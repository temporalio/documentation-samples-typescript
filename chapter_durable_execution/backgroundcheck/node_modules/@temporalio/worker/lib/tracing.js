"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.instrument = exports.childSpan = exports.getTracer = void 0;
const otel = __importStar(require("@opentelemetry/api"));
const NoopTracer_1 = require("@opentelemetry/api/build/src/trace/NoopTracer");
const type_helpers_1 = require("@temporalio/common/lib/type-helpers");
const pkg_1 = __importDefault(require("./pkg"));
/**
 * Get either an opentelemetry tracer or a NoopTracer based on the `enabled` param.
 */
function getTracer(enabled) {
    if (enabled) {
        return otel.trace.getTracer(pkg_1.default.name, pkg_1.default.version);
    }
    // otel.trace.
    return new NoopTracer_1.NoopTracer();
}
exports.getTracer = getTracer;
/**
 * Conveience function for creating a child span from an existing span
 */
function childSpan(tracer, parent, name, options) {
    const context = otel.trace.setSpan(otel.context.active(), parent);
    return tracer.startSpan(name, options, context);
}
exports.childSpan = childSpan;
/**
 * Wraps `fn` in a span which ends when function returns or throws
 *
 * @param acceptableErrors If this function returns true, we will not mark
 * the span as failed for such errors
 */
async function instrument(tracer, parent, name, fn, acceptableErrors) {
    const context = otel.trace.setSpan(otel.context.active(), parent);
    return otel.context.with(context, async () => {
        const span = tracer.startSpan(name, undefined);
        let didSetErr = false;
        try {
            return await fn(span);
        }
        catch (err) {
            if (acceptableErrors === undefined || !acceptableErrors(err)) {
                didSetErr = true;
                span.setStatus({ code: otel.SpanStatusCode.ERROR, message: (0, type_helpers_1.errorMessage)(err) });
            }
            throw err;
        }
        finally {
            if (!didSetErr) {
                span.setStatus({ code: otel.SpanStatusCode.OK });
            }
            span.end();
        }
    });
}
exports.instrument = instrument;
//# sourceMappingURL=tracing.js.map