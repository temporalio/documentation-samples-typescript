import { Context, Info } from '@temporalio/activity';
import { ActivityInboundCallsInterceptor, ActivityExecuteInput, Next } from './interceptors';
import { Logger } from './logger';
/**
 * Returns a map of attributes to be set on log messages for a given Activity
 */
export declare function activityLogAttributes(info: Info): Record<string, unknown>;
/** Logs Activity execution starts and their completions */
export declare class ActivityInboundLogInterceptor implements ActivityInboundCallsInterceptor {
    protected readonly ctx: Context;
    /**
     * @deprecated Use `Context.current().logger` instead
     */
    protected readonly logger: Logger;
    constructor(ctx: Context, logger?: Logger | undefined);
    protected logAttributes(): Record<string, unknown>;
    execute(input: ActivityExecuteInput, next: Next<ActivityInboundCallsInterceptor, 'execute'>): Promise<unknown>;
}
