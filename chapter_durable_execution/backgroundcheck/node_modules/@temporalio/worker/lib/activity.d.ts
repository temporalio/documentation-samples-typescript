/// <reference types="node" />
import 'abort-controller/polyfill';
import { Context, Info } from '@temporalio/activity';
import { ActivityFunction, LoadedDataConverter } from '@temporalio/common';
import { coresdk } from '@temporalio/proto';
import { ActivityExecuteInput, ActivityInboundCallsInterceptor, ActivityInboundCallsInterceptorFactory } from './interceptors';
export type CancelReason = keyof typeof coresdk.activity_task.ActivityCancelReason | 'WORKER_SHUTDOWN' | 'HEARTBEAT_DETAILS_CONVERSION_FAILED';
export declare class Activity {
    readonly info: Info;
    readonly fn: ActivityFunction<any[], any>;
    readonly dataConverter: LoadedDataConverter;
    readonly heartbeatCallback: Context['heartbeat'];
    protected cancelReason?: CancelReason;
    readonly context: Context;
    cancel: (reason: CancelReason) => void;
    readonly abortController: AbortController;
    readonly interceptors: {
        inbound: ActivityInboundCallsInterceptor[];
    };
    constructor(info: Info, fn: ActivityFunction<any[], any>, dataConverter: LoadedDataConverter, heartbeatCallback: Context['heartbeat'], interceptors?: {
        inbound?: ActivityInboundCallsInterceptorFactory[];
    });
    /**
     * Actually executes the function.
     *
     * Exist mostly for cutting it out of the stack trace for failures.
     */
    protected execute({ args }: ActivityExecuteInput): Promise<coresdk.activity_result.IActivityExecutionResult>;
    run(input: ActivityExecuteInput): Promise<coresdk.activity_result.IActivityExecutionResult>;
}
