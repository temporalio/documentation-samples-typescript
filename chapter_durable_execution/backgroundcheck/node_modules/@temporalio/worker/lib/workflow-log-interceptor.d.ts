import { Next, WorkflowExecuteInput, WorkflowInboundCallsInterceptor, WorkflowOutboundCallsInterceptor, WorkflowInfo, WorkflowInterceptorsFactory, GetLogAttributesInput } from '@temporalio/workflow';
/**
 * Returns a map of attributes to be set on log messages for a given Workflow
 */
export declare function workflowLogAttributes(info: WorkflowInfo): Record<string, unknown>;
/** Logs workflow execution starts and completions, attaches log attributes to `workflow.log` calls  */
export declare class WorkflowLogInterceptor implements WorkflowInboundCallsInterceptor, WorkflowOutboundCallsInterceptor {
    getLogAttributes(input: GetLogAttributesInput, next: Next<WorkflowOutboundCallsInterceptor, 'getLogAttributes'>): Record<string, unknown>;
    execute(input: WorkflowExecuteInput, next: Next<WorkflowInboundCallsInterceptor, 'execute'>): Promise<unknown>;
}
/** @deprecated use {@link WorkflowLogInterceptor} instead */
export declare const WorkflowInboundLogInterceptor: typeof WorkflowLogInterceptor;
export declare const interceptors: WorkflowInterceptorsFactory;
