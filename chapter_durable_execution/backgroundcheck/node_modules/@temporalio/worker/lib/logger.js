"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultLogger = exports.timeOfDayToBigint = exports.LogTimestamp = void 0;
const node_util_1 = require("node:util");
const core_bridge_1 = require("@temporalio/core-bridge");
exports.LogTimestamp = Symbol.for('log_timestamp');
const severities = ['TRACE', 'DEBUG', 'INFO', 'WARN', 'ERROR'];
const format = node_util_1.formatWithOptions.bind(undefined, { colors: true });
/**
 * Log messages to `stderr` using basic formatting
 */
function defaultLogFunction(entry) {
    const { level, timestampNanos, message, meta } = entry;
    const date = new Date(Number(timestampNanos / 1000000n));
    if (meta === undefined) {
        process.stderr.write(`${format(date)} [${level}] ${message}\n`);
    }
    else {
        process.stderr.write(`${format(date)} [${level}] ${message} ${format(meta)}\n`);
    }
}
/**
 * Takes a `[seconds, nanos]` tuple as returned from getTimeOfDay and turns it into bigint.
 */
function timeOfDayToBigint(timeOfDay) {
    const [seconds, nanos] = timeOfDay;
    return BigInt(seconds) * 1000000000n + BigInt(nanos);
}
exports.timeOfDayToBigint = timeOfDayToBigint;
/**
 * Default worker logger - uses a default log function to log messages to `console.error`.
 * See constructor arguments for customization.
 */
class DefaultLogger {
    constructor(level = 'INFO', logFunction = defaultLogFunction) {
        this.level = level;
        this.logFunction = logFunction;
        this.severity = severities.indexOf(this.level);
    }
    log(level, message, meta) {
        if (severities.indexOf(level) >= this.severity) {
            const { [exports.LogTimestamp]: timestampNanos, ...rest } = meta ?? {};
            this.logFunction({
                level,
                message,
                meta: Object.keys(rest).length === 0 ? undefined : rest,
                timestampNanos: timestampNanos ?? timeOfDayToBigint((0, core_bridge_1.getTimeOfDay)()),
            });
        }
    }
    trace(message, meta) {
        this.log('TRACE', message, meta);
    }
    debug(message, meta) {
        this.log('DEBUG', message, meta);
    }
    info(message, meta) {
        this.log('INFO', message, meta);
    }
    warn(message, meta) {
        this.log('WARN', message, meta);
    }
    error(message, meta) {
        this.log('ERROR', message, meta);
    }
}
exports.DefaultLogger = DefaultLogger;
//# sourceMappingURL=logger.js.map