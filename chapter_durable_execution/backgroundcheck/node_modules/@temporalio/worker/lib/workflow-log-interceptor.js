"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.interceptors = exports.WorkflowInboundLogInterceptor = exports.WorkflowLogInterceptor = exports.workflowLogAttributes = void 0;
const workflow_1 = require("@temporalio/workflow");
const stack_helpers_1 = require("@temporalio/workflow/lib/stack-helpers");
/**
 * Returns a map of attributes to be set on log messages for a given Workflow
 */
function workflowLogAttributes(info) {
    return {
        namespace: info.namespace,
        taskQueue: info.taskQueue,
        workflowId: info.workflowId,
        runId: info.runId,
        workflowType: info.workflowType,
    };
}
exports.workflowLogAttributes = workflowLogAttributes;
/** Logs workflow execution starts and completions, attaches log attributes to `workflow.log` calls  */
class WorkflowLogInterceptor {
    getLogAttributes(input, next) {
        return next({ ...input, ...workflowLogAttributes((0, workflow_1.workflowInfo)()) });
    }
    execute(input, next) {
        workflow_1.log.debug('Workflow started');
        const p = next(input).then((res) => {
            workflow_1.log.debug('Workflow completed');
            return res;
        }, (error) => {
            // Avoid using instanceof checks in case the modules they're defined in loaded more than once,
            // e.g. by jest or when multiple versions are installed.
            if (typeof error === 'object' && error != null) {
                if ((0, workflow_1.isCancellation)(error)) {
                    workflow_1.log.debug('Workflow completed as cancelled');
                    throw error;
                }
                else if (error instanceof workflow_1.ContinueAsNew) {
                    workflow_1.log.debug('Workflow continued as new');
                    throw error;
                }
            }
            workflow_1.log.warn('Workflow failed', { error });
            throw error;
        });
        // Avoid showing this interceptor in stack trace query
        (0, stack_helpers_1.untrackPromise)(p);
        return p;
    }
}
exports.WorkflowLogInterceptor = WorkflowLogInterceptor;
/** @deprecated use {@link WorkflowLogInterceptor} instead */
exports.WorkflowInboundLogInterceptor = WorkflowLogInterceptor;
// ts-prune-ignore-next
const interceptors = () => {
    const interceptor = new WorkflowLogInterceptor();
    return { inbound: [interceptor], outbound: [interceptor] };
};
exports.interceptors = interceptors;
//# sourceMappingURL=workflow-log-interceptor.js.map