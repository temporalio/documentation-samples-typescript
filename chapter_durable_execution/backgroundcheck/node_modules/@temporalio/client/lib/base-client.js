"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseClient = exports.defaultBaseClientOptions = void 0;
const node_os_1 = __importDefault(require("node:os"));
const internal_non_workflow_1 = require("@temporalio/common/lib/internal-non-workflow");
const connection_1 = require("./connection");
function defaultBaseClientOptions() {
    return {
        dataConverter: {},
        identity: `${process.pid}@${node_os_1.default.hostname()}`,
        namespace: 'default',
    };
}
exports.defaultBaseClientOptions = defaultBaseClientOptions;
class BaseClient {
    constructor(options) {
        this.connection = options?.connection ?? connection_1.Connection.lazy();
        const dataConverter = options?.dataConverter ?? {};
        this.loadedDataConverter = (0, internal_non_workflow_1.isLoadedDataConverter)(dataConverter) ? dataConverter : (0, internal_non_workflow_1.loadDataConverter)(dataConverter);
    }
    /**
     * Set the deadline for any service requests executed in `fn`'s scope.
     */
    async withDeadline(deadline, fn) {
        return await this.connection.withDeadline(deadline, fn);
    }
    /**
     * Set metadata for any service requests executed in `fn`'s scope.
     *
     * @returns returned value of `fn`
     *
     * @see {@link Connection.withMetadata}
     */
    async withMetadata(metadata, fn) {
        return await this.connection.withMetadata(metadata, fn);
    }
    get dataConverter() {
        return this.loadedDataConverter;
    }
}
exports.BaseClient = BaseClient;
//# sourceMappingURL=base-client.js.map