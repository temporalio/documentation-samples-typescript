"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isServerErrorResponse = exports.isGrpcServiceError = exports.WorkflowContinuedAsNewError = exports.WorkflowFailedError = exports.ServiceError = void 0;
const type_helpers_1 = require("@temporalio/common/lib/type-helpers");
/**
 * Generic Error class for errors coming from the service
 */
let ServiceError = class ServiceError extends Error {
    constructor(message, opts) {
        super(message);
        this.cause = opts?.cause;
    }
};
ServiceError = __decorate([
    (0, type_helpers_1.SymbolBasedInstanceOfError)('ServiceError')
], ServiceError);
exports.ServiceError = ServiceError;
/**
 * Thrown by the client while waiting on Workflow execution result if execution
 * completes with failure.
 *
 * The failure type will be set in the `cause` attribute.
 *
 * For example if the workflow is cancelled, `cause` will be set to
 * {@link CancelledFailure}.
 */
let WorkflowFailedError = class WorkflowFailedError extends Error {
    constructor(message, cause, retryState) {
        super(message);
        this.cause = cause;
        this.retryState = retryState;
    }
};
WorkflowFailedError = __decorate([
    (0, type_helpers_1.SymbolBasedInstanceOfError)('WorkflowFailedError')
], WorkflowFailedError);
exports.WorkflowFailedError = WorkflowFailedError;
/**
 * Thrown the by client while waiting on Workflow execution result if Workflow
 * continues as new.
 *
 * Only thrown if asked not to follow the chain of execution (see {@link WorkflowOptions.followRuns}).
 */
let WorkflowContinuedAsNewError = class WorkflowContinuedAsNewError extends Error {
    constructor(message, newExecutionRunId) {
        super(message);
        this.newExecutionRunId = newExecutionRunId;
    }
};
WorkflowContinuedAsNewError = __decorate([
    (0, type_helpers_1.SymbolBasedInstanceOfError)('WorkflowExecutionContinuedAsNewError')
], WorkflowContinuedAsNewError);
exports.WorkflowContinuedAsNewError = WorkflowContinuedAsNewError;
function isGrpcServiceError(err) {
    return ((0, type_helpers_1.isError)(err) &&
        typeof err?.details === 'string' &&
        (0, type_helpers_1.isRecord)(err.metadata));
}
exports.isGrpcServiceError = isGrpcServiceError;
/**
 * @deprecated Use `isGrpcServiceError` instead
 */
exports.isServerErrorResponse = isGrpcServiceError;
//# sourceMappingURL=errors.js.map