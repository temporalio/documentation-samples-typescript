"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScheduleOverlapPolicy = exports.DAYS_OF_WEEK = exports.MONTHS = void 0;
const type_helpers_1 = require("@temporalio/common/lib/type-helpers");
// Invariant: ScheduleDescription contains at least the same fields as ScheduleSummary
(0, type_helpers_1.checkExtends)();
// Invariant: An existing ScheduleDescription can be used as template to create a new Schedule
(0, type_helpers_1.checkExtends)();
// Invariant: An existing ScheduleDescription can be used as template to update that Schedule
(0, type_helpers_1.checkExtends)();
// Invariant: An existing ScheduleSpec can be used as is to create or update a Schedule
(0, type_helpers_1.checkExtends)();
exports.MONTHS = [
    'JANUARY',
    'FEBRUARY',
    'MARCH',
    'APRIL',
    'MAY',
    'JUNE',
    'JULY',
    'AUGUST',
    'SEPTEMBER',
    'OCTOBER',
    'NOVEMBER',
    'DECEMBER',
];
exports.DAYS_OF_WEEK = ['SUNDAY', 'MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY'];
// Invariant: an existing ScheduleDescriptionAction can be used as is to create or update a schedule
(0, type_helpers_1.checkExtends)();
/**
 * Policy for overlapping Actions.
 */
var ScheduleOverlapPolicy;
(function (ScheduleOverlapPolicy) {
    /**
     * Use server default (currently SKIP).
     *
     * FIXME: remove this field if this issue is implemented: https://github.com/temporalio/temporal/issues/3240
     */
    ScheduleOverlapPolicy[ScheduleOverlapPolicy["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * Don't start a new Action.
     */
    ScheduleOverlapPolicy[ScheduleOverlapPolicy["SKIP"] = 1] = "SKIP";
    /**
     * Start another Action as soon as the current Action completes, but only buffer one Action in this way. If another
     * Action is supposed to start, but one Action is running and one is already buffered, then only the buffered one will
     * be started after the running Action finishes.
     */
    ScheduleOverlapPolicy[ScheduleOverlapPolicy["BUFFER_ONE"] = 2] = "BUFFER_ONE";
    /**
     * Allows an unlimited number of Actions to buffer. They are started sequentially.
     */
    ScheduleOverlapPolicy[ScheduleOverlapPolicy["BUFFER_ALL"] = 3] = "BUFFER_ALL";
    /**
     * Cancels the running Action, and then starts the new Action once the cancelled one completes.
     */
    ScheduleOverlapPolicy[ScheduleOverlapPolicy["CANCEL_OTHER"] = 4] = "CANCEL_OTHER";
    /**
     * Terminate the running Action and start the new Action immediately.
     */
    ScheduleOverlapPolicy[ScheduleOverlapPolicy["TERMINATE_OTHER"] = 5] = "TERMINATE_OTHER";
    /**
     * Allow any number of Actions to start immediately.
     *
     * This is the only policy under which multiple Actions can run concurrently.
     */
    ScheduleOverlapPolicy[ScheduleOverlapPolicy["ALLOW_ALL"] = 6] = "ALLOW_ALL";
})(ScheduleOverlapPolicy = exports.ScheduleOverlapPolicy || (exports.ScheduleOverlapPolicy = {}));
(0, type_helpers_1.checkExtends)();
(0, type_helpers_1.checkExtends)();
//# sourceMappingURL=schedule-types.js.map