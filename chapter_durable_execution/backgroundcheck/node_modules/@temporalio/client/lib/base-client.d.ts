import { DataConverter, LoadedDataConverter } from '@temporalio/common';
import { ConnectionLike, Metadata } from './types';
export interface BaseClientOptions {
    /**
     * {@link DataConverter} to use for serializing and deserializing payloads
     */
    dataConverter?: DataConverter;
    /**
     * Identity to report to the server
     *
     * @default `${process.pid}@${os.hostname()}`
     */
    identity?: string;
    /**
     * Connection to use to communicate with the server.
     *
     * By default, connects to localhost.
     *
     * Connections are expensive to construct and should be reused.
     */
    connection?: ConnectionLike;
    /**
     * Server namespace
     *
     * @default default
     */
    namespace?: string;
}
export type WithDefaults<Options extends BaseClientOptions> = //
Required<Omit<Options, 'connection'>> & Pick<Options, 'connection'>;
export type LoadedWithDefaults<Options extends BaseClientOptions> = //
WithDefaults<Options> & {
    loadedDataConverter: LoadedDataConverter;
};
export declare function defaultBaseClientOptions(): WithDefaults<BaseClientOptions>;
export declare class BaseClient {
    readonly connection: ConnectionLike;
    private readonly loadedDataConverter;
    protected constructor(options?: BaseClientOptions);
    /**
     * Set the deadline for any service requests executed in `fn`'s scope.
     */
    withDeadline<R>(deadline: number | Date, fn: () => Promise<R>): Promise<R>;
    /**
     * Set metadata for any service requests executed in `fn`'s scope.
     *
     * @returns returned value of `fn`
     *
     * @see {@link Connection.withMetadata}
     */
    withMetadata<R>(metadata: Metadata, fn: () => Promise<R>): Promise<R>;
    protected get dataConverter(): LoadedDataConverter;
}
