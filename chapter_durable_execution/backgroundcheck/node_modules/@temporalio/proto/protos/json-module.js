/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
"use strict";

var $protobuf = require("protobufjs/light");

var $root = ($protobuf.roots.__temporal || ($protobuf.roots.__temporal = new $protobuf.Root()))
.addJSON({
  coresdk: {
    options: {
      ruby_package: "Temporalio::Bridge::Api::CoreInterface"
    },
    nested: {
      ActivityHeartbeat: {
        fields: {
          taskToken: {
            type: "bytes",
            id: 1
          },
          details: {
            rule: "repeated",
            type: "temporal.api.common.v1.Payload",
            id: 2
          }
        }
      },
      ActivityTaskCompletion: {
        fields: {
          taskToken: {
            type: "bytes",
            id: 1
          },
          result: {
            type: "activity_result.ActivityExecutionResult",
            id: 2
          }
        }
      },
      activity_result: {
        options: {
          ruby_package: "Temporalio::Bridge::Api::ActivityResult"
        },
        nested: {
          ActivityExecutionResult: {
            oneofs: {
              status: {
                oneof: [
                  "completed",
                  "failed",
                  "cancelled",
                  "willCompleteAsync"
                ]
              }
            },
            fields: {
              completed: {
                type: "Success",
                id: 1
              },
              failed: {
                type: "Failure",
                id: 2
              },
              cancelled: {
                type: "Cancellation",
                id: 3
              },
              willCompleteAsync: {
                type: "WillCompleteAsync",
                id: 4
              }
            }
          },
          ActivityResolution: {
            oneofs: {
              status: {
                oneof: [
                  "completed",
                  "failed",
                  "cancelled",
                  "backoff"
                ]
              }
            },
            fields: {
              completed: {
                type: "Success",
                id: 1
              },
              failed: {
                type: "Failure",
                id: 2
              },
              cancelled: {
                type: "Cancellation",
                id: 3
              },
              backoff: {
                type: "DoBackoff",
                id: 4
              }
            }
          },
          Success: {
            fields: {
              result: {
                type: "temporal.api.common.v1.Payload",
                id: 1
              }
            }
          },
          Failure: {
            fields: {
              failure: {
                type: "temporal.api.failure.v1.Failure",
                id: 1
              }
            }
          },
          Cancellation: {
            fields: {
              failure: {
                type: "temporal.api.failure.v1.Failure",
                id: 1
              }
            }
          },
          WillCompleteAsync: {
            fields: {}
          },
          DoBackoff: {
            fields: {
              attempt: {
                type: "uint32",
                id: 1
              },
              backoffDuration: {
                type: "google.protobuf.Duration",
                id: 2
              },
              originalScheduleTime: {
                type: "google.protobuf.Timestamp",
                id: 3
              }
            }
          }
        }
      },
      activity_task: {
        options: {
          ruby_package: "Temporalio::Bridge::Api::ActivityTask"
        },
        nested: {
          ActivityTask: {
            oneofs: {
              variant: {
                oneof: [
                  "start",
                  "cancel"
                ]
              }
            },
            fields: {
              taskToken: {
                type: "bytes",
                id: 1
              },
              start: {
                type: "Start",
                id: 3
              },
              cancel: {
                type: "Cancel",
                id: 4
              }
            }
          },
          Start: {
            fields: {
              workflowNamespace: {
                type: "string",
                id: 1
              },
              workflowType: {
                type: "string",
                id: 2
              },
              workflowExecution: {
                type: "temporal.api.common.v1.WorkflowExecution",
                id: 3
              },
              activityId: {
                type: "string",
                id: 4
              },
              activityType: {
                type: "string",
                id: 5
              },
              headerFields: {
                keyType: "string",
                type: "temporal.api.common.v1.Payload",
                id: 6
              },
              input: {
                rule: "repeated",
                type: "temporal.api.common.v1.Payload",
                id: 7
              },
              heartbeatDetails: {
                rule: "repeated",
                type: "temporal.api.common.v1.Payload",
                id: 8
              },
              scheduledTime: {
                type: "google.protobuf.Timestamp",
                id: 9
              },
              currentAttemptScheduledTime: {
                type: "google.protobuf.Timestamp",
                id: 10
              },
              startedTime: {
                type: "google.protobuf.Timestamp",
                id: 11
              },
              attempt: {
                type: "uint32",
                id: 12
              },
              scheduleToCloseTimeout: {
                type: "google.protobuf.Duration",
                id: 13
              },
              startToCloseTimeout: {
                type: "google.protobuf.Duration",
                id: 14
              },
              heartbeatTimeout: {
                type: "google.protobuf.Duration",
                id: 15
              },
              retryPolicy: {
                type: "temporal.api.common.v1.RetryPolicy",
                id: 16
              },
              isLocal: {
                type: "bool",
                id: 17
              }
            }
          },
          Cancel: {
            fields: {
              reason: {
                type: "ActivityCancelReason",
                id: 1
              }
            }
          },
          ActivityCancelReason: {
            values: {
              NOT_FOUND: 0,
              CANCELLED: 1,
              TIMED_OUT: 2,
              WORKER_SHUTDOWN: 3
            }
          }
        }
      },
      common: {
        options: {
          ruby_package: "Temporalio::Bridge::Api::Common"
        },
        nested: {
          NamespacedWorkflowExecution: {
            fields: {
              namespace: {
                type: "string",
                id: 1
              },
              workflowId: {
                type: "string",
                id: 2
              },
              runId: {
                type: "string",
                id: 3
              }
            }
          },
          VersioningIntent: {
            values: {
              UNSPECIFIED: 0,
              COMPATIBLE: 1,
              DEFAULT: 2
            }
          }
        }
      },
      external_data: {
        options: {
          ruby_package: "Temporalio::Bridge::Api::ExternalData"
        },
        nested: {
          LocalActivityMarkerData: {
            fields: {
              seq: {
                type: "uint32",
                id: 1
              },
              attempt: {
                type: "uint32",
                id: 2
              },
              activityId: {
                type: "string",
                id: 3
              },
              activityType: {
                type: "string",
                id: 4
              },
              completeTime: {
                type: "google.protobuf.Timestamp",
                id: 5
              },
              backoff: {
                type: "google.protobuf.Duration",
                id: 6
              },
              originalScheduleTime: {
                type: "google.protobuf.Timestamp",
                id: 7
              }
            }
          },
          PatchedMarkerData: {
            fields: {
              id: {
                type: "string",
                id: 1
              },
              deprecated: {
                type: "bool",
                id: 2
              }
            }
          }
        }
      },
      workflow_activation: {
        options: {
          ruby_package: "Temporalio::Bridge::Api::WorkflowActivation"
        },
        nested: {
          WorkflowActivation: {
            fields: {
              runId: {
                type: "string",
                id: 1
              },
              timestamp: {
                type: "google.protobuf.Timestamp",
                id: 2
              },
              isReplaying: {
                type: "bool",
                id: 3
              },
              historyLength: {
                type: "uint32",
                id: 4
              },
              jobs: {
                rule: "repeated",
                type: "WorkflowActivationJob",
                id: 5
              },
              availableInternalFlags: {
                rule: "repeated",
                type: "uint32",
                id: 6
              },
              historySizeBytes: {
                type: "uint64",
                id: 7
              },
              continueAsNewSuggested: {
                type: "bool",
                id: 8
              }
            }
          },
          WorkflowActivationJob: {
            oneofs: {
              variant: {
                oneof: [
                  "startWorkflow",
                  "fireTimer",
                  "updateRandomSeed",
                  "queryWorkflow",
                  "cancelWorkflow",
                  "signalWorkflow",
                  "resolveActivity",
                  "notifyHasPatch",
                  "resolveChildWorkflowExecutionStart",
                  "resolveChildWorkflowExecution",
                  "resolveSignalExternalWorkflow",
                  "resolveRequestCancelExternalWorkflow",
                  "removeFromCache"
                ]
              }
            },
            fields: {
              startWorkflow: {
                type: "StartWorkflow",
                id: 1
              },
              fireTimer: {
                type: "FireTimer",
                id: 2
              },
              updateRandomSeed: {
                type: "UpdateRandomSeed",
                id: 4
              },
              queryWorkflow: {
                type: "QueryWorkflow",
                id: 5
              },
              cancelWorkflow: {
                type: "CancelWorkflow",
                id: 6
              },
              signalWorkflow: {
                type: "SignalWorkflow",
                id: 7
              },
              resolveActivity: {
                type: "ResolveActivity",
                id: 8
              },
              notifyHasPatch: {
                type: "NotifyHasPatch",
                id: 9
              },
              resolveChildWorkflowExecutionStart: {
                type: "ResolveChildWorkflowExecutionStart",
                id: 10
              },
              resolveChildWorkflowExecution: {
                type: "ResolveChildWorkflowExecution",
                id: 11
              },
              resolveSignalExternalWorkflow: {
                type: "ResolveSignalExternalWorkflow",
                id: 12
              },
              resolveRequestCancelExternalWorkflow: {
                type: "ResolveRequestCancelExternalWorkflow",
                id: 13
              },
              removeFromCache: {
                type: "RemoveFromCache",
                id: 50
              }
            }
          },
          StartWorkflow: {
            fields: {
              workflowType: {
                type: "string",
                id: 1
              },
              workflowId: {
                type: "string",
                id: 2
              },
              "arguments": {
                rule: "repeated",
                type: "temporal.api.common.v1.Payload",
                id: 3
              },
              randomnessSeed: {
                type: "uint64",
                id: 4
              },
              headers: {
                keyType: "string",
                type: "temporal.api.common.v1.Payload",
                id: 5
              },
              identity: {
                type: "string",
                id: 6
              },
              parentWorkflowInfo: {
                type: "common.NamespacedWorkflowExecution",
                id: 7
              },
              workflowExecutionTimeout: {
                type: "google.protobuf.Duration",
                id: 8
              },
              workflowRunTimeout: {
                type: "google.protobuf.Duration",
                id: 9
              },
              workflowTaskTimeout: {
                type: "google.protobuf.Duration",
                id: 10
              },
              continuedFromExecutionRunId: {
                type: "string",
                id: 11
              },
              continuedInitiator: {
                type: "temporal.api.enums.v1.ContinueAsNewInitiator",
                id: 12
              },
              continuedFailure: {
                type: "temporal.api.failure.v1.Failure",
                id: 13
              },
              lastCompletionResult: {
                type: "temporal.api.common.v1.Payloads",
                id: 14
              },
              firstExecutionRunId: {
                type: "string",
                id: 15
              },
              retryPolicy: {
                type: "temporal.api.common.v1.RetryPolicy",
                id: 16
              },
              attempt: {
                type: "int32",
                id: 17
              },
              cronSchedule: {
                type: "string",
                id: 18
              },
              workflowExecutionExpirationTime: {
                type: "google.protobuf.Timestamp",
                id: 19
              },
              cronScheduleToScheduleInterval: {
                type: "google.protobuf.Duration",
                id: 20
              },
              memo: {
                type: "temporal.api.common.v1.Memo",
                id: 21
              },
              searchAttributes: {
                type: "temporal.api.common.v1.SearchAttributes",
                id: 22
              },
              startTime: {
                type: "google.protobuf.Timestamp",
                id: 23
              }
            }
          },
          FireTimer: {
            fields: {
              seq: {
                type: "uint32",
                id: 1
              }
            }
          },
          ResolveActivity: {
            fields: {
              seq: {
                type: "uint32",
                id: 1
              },
              result: {
                type: "activity_result.ActivityResolution",
                id: 2
              }
            }
          },
          ResolveChildWorkflowExecutionStart: {
            oneofs: {
              status: {
                oneof: [
                  "succeeded",
                  "failed",
                  "cancelled"
                ]
              }
            },
            fields: {
              seq: {
                type: "uint32",
                id: 1
              },
              succeeded: {
                type: "ResolveChildWorkflowExecutionStartSuccess",
                id: 2
              },
              failed: {
                type: "ResolveChildWorkflowExecutionStartFailure",
                id: 3
              },
              cancelled: {
                type: "ResolveChildWorkflowExecutionStartCancelled",
                id: 4
              }
            }
          },
          ResolveChildWorkflowExecutionStartSuccess: {
            fields: {
              runId: {
                type: "string",
                id: 1
              }
            }
          },
          ResolveChildWorkflowExecutionStartFailure: {
            fields: {
              workflowId: {
                type: "string",
                id: 1
              },
              workflowType: {
                type: "string",
                id: 2
              },
              cause: {
                type: "child_workflow.StartChildWorkflowExecutionFailedCause",
                id: 3
              }
            }
          },
          ResolveChildWorkflowExecutionStartCancelled: {
            fields: {
              failure: {
                type: "temporal.api.failure.v1.Failure",
                id: 1
              }
            }
          },
          ResolveChildWorkflowExecution: {
            fields: {
              seq: {
                type: "uint32",
                id: 1
              },
              result: {
                type: "child_workflow.ChildWorkflowResult",
                id: 2
              }
            }
          },
          UpdateRandomSeed: {
            fields: {
              randomnessSeed: {
                type: "uint64",
                id: 1
              }
            }
          },
          QueryWorkflow: {
            fields: {
              queryId: {
                type: "string",
                id: 1
              },
              queryType: {
                type: "string",
                id: 2
              },
              "arguments": {
                rule: "repeated",
                type: "temporal.api.common.v1.Payload",
                id: 3
              },
              headers: {
                keyType: "string",
                type: "temporal.api.common.v1.Payload",
                id: 5
              }
            }
          },
          CancelWorkflow: {
            fields: {
              details: {
                rule: "repeated",
                type: "temporal.api.common.v1.Payload",
                id: 1
              }
            }
          },
          SignalWorkflow: {
            fields: {
              signalName: {
                type: "string",
                id: 1
              },
              input: {
                rule: "repeated",
                type: "temporal.api.common.v1.Payload",
                id: 2
              },
              identity: {
                type: "string",
                id: 3
              },
              headers: {
                keyType: "string",
                type: "temporal.api.common.v1.Payload",
                id: 5
              }
            }
          },
          NotifyHasPatch: {
            fields: {
              patchId: {
                type: "string",
                id: 1
              }
            }
          },
          ResolveSignalExternalWorkflow: {
            fields: {
              seq: {
                type: "uint32",
                id: 1
              },
              failure: {
                type: "temporal.api.failure.v1.Failure",
                id: 2
              }
            }
          },
          ResolveRequestCancelExternalWorkflow: {
            fields: {
              seq: {
                type: "uint32",
                id: 1
              },
              failure: {
                type: "temporal.api.failure.v1.Failure",
                id: 2
              }
            }
          },
          RemoveFromCache: {
            fields: {
              message: {
                type: "string",
                id: 1
              },
              reason: {
                type: "EvictionReason",
                id: 2
              }
            },
            nested: {
              EvictionReason: {
                values: {
                  UNSPECIFIED: 0,
                  CACHE_FULL: 1,
                  CACHE_MISS: 2,
                  NONDETERMINISM: 3,
                  LANG_FAIL: 4,
                  LANG_REQUESTED: 5,
                  TASK_NOT_FOUND: 6,
                  UNHANDLED_COMMAND: 7,
                  FATAL: 8,
                  PAGINATION_OR_HISTORY_FETCH: 9
                }
              }
            }
          }
        }
      },
      child_workflow: {
        options: {
          ruby_package: "Temporalio::Bridge::Api::ChildWorkflow"
        },
        nested: {
          ChildWorkflowResult: {
            oneofs: {
              status: {
                oneof: [
                  "completed",
                  "failed",
                  "cancelled"
                ]
              }
            },
            fields: {
              completed: {
                type: "Success",
                id: 1
              },
              failed: {
                type: "Failure",
                id: 2
              },
              cancelled: {
                type: "Cancellation",
                id: 3
              }
            }
          },
          Success: {
            fields: {
              result: {
                type: "temporal.api.common.v1.Payload",
                id: 1
              }
            }
          },
          Failure: {
            fields: {
              failure: {
                type: "temporal.api.failure.v1.Failure",
                id: 1
              }
            }
          },
          Cancellation: {
            fields: {
              failure: {
                type: "temporal.api.failure.v1.Failure",
                id: 1
              }
            }
          },
          ParentClosePolicy: {
            values: {
              PARENT_CLOSE_POLICY_UNSPECIFIED: 0,
              PARENT_CLOSE_POLICY_TERMINATE: 1,
              PARENT_CLOSE_POLICY_ABANDON: 2,
              PARENT_CLOSE_POLICY_REQUEST_CANCEL: 3
            }
          },
          StartChildWorkflowExecutionFailedCause: {
            values: {
              START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED: 0,
              START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_WORKFLOW_ALREADY_EXISTS: 1
            }
          },
          ChildWorkflowCancellationType: {
            values: {
              ABANDON: 0,
              TRY_CANCEL: 1,
              WAIT_CANCELLATION_COMPLETED: 2,
              WAIT_CANCELLATION_REQUESTED: 3
            }
          }
        }
      },
      workflow_commands: {
        options: {
          ruby_package: "Temporalio::Bridge::Api::WorkflowCommands"
        },
        nested: {
          WorkflowCommand: {
            oneofs: {
              variant: {
                oneof: [
                  "startTimer",
                  "scheduleActivity",
                  "respondToQuery",
                  "requestCancelActivity",
                  "cancelTimer",
                  "completeWorkflowExecution",
                  "failWorkflowExecution",
                  "continueAsNewWorkflowExecution",
                  "cancelWorkflowExecution",
                  "setPatchMarker",
                  "startChildWorkflowExecution",
                  "cancelChildWorkflowExecution",
                  "requestCancelExternalWorkflowExecution",
                  "signalExternalWorkflowExecution",
                  "cancelSignalWorkflow",
                  "scheduleLocalActivity",
                  "requestCancelLocalActivity",
                  "upsertWorkflowSearchAttributes",
                  "modifyWorkflowProperties"
                ]
              }
            },
            fields: {
              startTimer: {
                type: "StartTimer",
                id: 1
              },
              scheduleActivity: {
                type: "ScheduleActivity",
                id: 2
              },
              respondToQuery: {
                type: "QueryResult",
                id: 3
              },
              requestCancelActivity: {
                type: "RequestCancelActivity",
                id: 4
              },
              cancelTimer: {
                type: "CancelTimer",
                id: 5
              },
              completeWorkflowExecution: {
                type: "CompleteWorkflowExecution",
                id: 6
              },
              failWorkflowExecution: {
                type: "FailWorkflowExecution",
                id: 7
              },
              continueAsNewWorkflowExecution: {
                type: "ContinueAsNewWorkflowExecution",
                id: 8
              },
              cancelWorkflowExecution: {
                type: "CancelWorkflowExecution",
                id: 9
              },
              setPatchMarker: {
                type: "SetPatchMarker",
                id: 10
              },
              startChildWorkflowExecution: {
                type: "StartChildWorkflowExecution",
                id: 11
              },
              cancelChildWorkflowExecution: {
                type: "CancelChildWorkflowExecution",
                id: 12
              },
              requestCancelExternalWorkflowExecution: {
                type: "RequestCancelExternalWorkflowExecution",
                id: 13
              },
              signalExternalWorkflowExecution: {
                type: "SignalExternalWorkflowExecution",
                id: 14
              },
              cancelSignalWorkflow: {
                type: "CancelSignalWorkflow",
                id: 15
              },
              scheduleLocalActivity: {
                type: "ScheduleLocalActivity",
                id: 16
              },
              requestCancelLocalActivity: {
                type: "RequestCancelLocalActivity",
                id: 17
              },
              upsertWorkflowSearchAttributes: {
                type: "UpsertWorkflowSearchAttributes",
                id: 18
              },
              modifyWorkflowProperties: {
                type: "ModifyWorkflowProperties",
                id: 19
              }
            }
          },
          StartTimer: {
            fields: {
              seq: {
                type: "uint32",
                id: 1
              },
              startToFireTimeout: {
                type: "google.protobuf.Duration",
                id: 2
              }
            }
          },
          CancelTimer: {
            fields: {
              seq: {
                type: "uint32",
                id: 1
              }
            }
          },
          ScheduleActivity: {
            fields: {
              seq: {
                type: "uint32",
                id: 1
              },
              activityId: {
                type: "string",
                id: 2
              },
              activityType: {
                type: "string",
                id: 3
              },
              taskQueue: {
                type: "string",
                id: 5
              },
              headers: {
                keyType: "string",
                type: "temporal.api.common.v1.Payload",
                id: 6
              },
              "arguments": {
                rule: "repeated",
                type: "temporal.api.common.v1.Payload",
                id: 7
              },
              scheduleToCloseTimeout: {
                type: "google.protobuf.Duration",
                id: 8
              },
              scheduleToStartTimeout: {
                type: "google.protobuf.Duration",
                id: 9
              },
              startToCloseTimeout: {
                type: "google.protobuf.Duration",
                id: 10
              },
              heartbeatTimeout: {
                type: "google.protobuf.Duration",
                id: 11
              },
              retryPolicy: {
                type: "temporal.api.common.v1.RetryPolicy",
                id: 12
              },
              cancellationType: {
                type: "ActivityCancellationType",
                id: 13
              },
              doNotEagerlyExecute: {
                type: "bool",
                id: 14
              },
              versioningIntent: {
                type: "coresdk.common.VersioningIntent",
                id: 15
              }
            }
          },
          ScheduleLocalActivity: {
            fields: {
              seq: {
                type: "uint32",
                id: 1
              },
              activityId: {
                type: "string",
                id: 2
              },
              activityType: {
                type: "string",
                id: 3
              },
              attempt: {
                type: "uint32",
                id: 4
              },
              originalScheduleTime: {
                type: "google.protobuf.Timestamp",
                id: 5
              },
              headers: {
                keyType: "string",
                type: "temporal.api.common.v1.Payload",
                id: 6
              },
              "arguments": {
                rule: "repeated",
                type: "temporal.api.common.v1.Payload",
                id: 7
              },
              scheduleToCloseTimeout: {
                type: "google.protobuf.Duration",
                id: 8
              },
              scheduleToStartTimeout: {
                type: "google.protobuf.Duration",
                id: 9
              },
              startToCloseTimeout: {
                type: "google.protobuf.Duration",
                id: 10
              },
              retryPolicy: {
                type: "temporal.api.common.v1.RetryPolicy",
                id: 11
              },
              localRetryThreshold: {
                type: "google.protobuf.Duration",
                id: 12
              },
              cancellationType: {
                type: "ActivityCancellationType",
                id: 13
              }
            }
          },
          ActivityCancellationType: {
            values: {
              TRY_CANCEL: 0,
              WAIT_CANCELLATION_COMPLETED: 1,
              ABANDON: 2
            }
          },
          RequestCancelActivity: {
            fields: {
              seq: {
                type: "uint32",
                id: 1
              }
            }
          },
          RequestCancelLocalActivity: {
            fields: {
              seq: {
                type: "uint32",
                id: 1
              }
            }
          },
          QueryResult: {
            oneofs: {
              variant: {
                oneof: [
                  "succeeded",
                  "failed"
                ]
              }
            },
            fields: {
              queryId: {
                type: "string",
                id: 1
              },
              succeeded: {
                type: "QuerySuccess",
                id: 2
              },
              failed: {
                type: "temporal.api.failure.v1.Failure",
                id: 3
              }
            }
          },
          QuerySuccess: {
            fields: {
              response: {
                type: "temporal.api.common.v1.Payload",
                id: 1
              }
            }
          },
          CompleteWorkflowExecution: {
            fields: {
              result: {
                type: "temporal.api.common.v1.Payload",
                id: 1
              }
            }
          },
          FailWorkflowExecution: {
            fields: {
              failure: {
                type: "temporal.api.failure.v1.Failure",
                id: 1
              }
            }
          },
          ContinueAsNewWorkflowExecution: {
            fields: {
              workflowType: {
                type: "string",
                id: 1
              },
              taskQueue: {
                type: "string",
                id: 2
              },
              "arguments": {
                rule: "repeated",
                type: "temporal.api.common.v1.Payload",
                id: 3
              },
              workflowRunTimeout: {
                type: "google.protobuf.Duration",
                id: 4
              },
              workflowTaskTimeout: {
                type: "google.protobuf.Duration",
                id: 5
              },
              memo: {
                keyType: "string",
                type: "temporal.api.common.v1.Payload",
                id: 6
              },
              headers: {
                keyType: "string",
                type: "temporal.api.common.v1.Payload",
                id: 7
              },
              searchAttributes: {
                keyType: "string",
                type: "temporal.api.common.v1.Payload",
                id: 8
              },
              retryPolicy: {
                type: "temporal.api.common.v1.RetryPolicy",
                id: 9
              },
              versioningIntent: {
                type: "coresdk.common.VersioningIntent",
                id: 10
              }
            }
          },
          CancelWorkflowExecution: {
            fields: {}
          },
          SetPatchMarker: {
            fields: {
              patchId: {
                type: "string",
                id: 1
              },
              deprecated: {
                type: "bool",
                id: 2
              }
            }
          },
          StartChildWorkflowExecution: {
            fields: {
              seq: {
                type: "uint32",
                id: 1
              },
              namespace: {
                type: "string",
                id: 2
              },
              workflowId: {
                type: "string",
                id: 3
              },
              workflowType: {
                type: "string",
                id: 4
              },
              taskQueue: {
                type: "string",
                id: 5
              },
              input: {
                rule: "repeated",
                type: "temporal.api.common.v1.Payload",
                id: 6
              },
              workflowExecutionTimeout: {
                type: "google.protobuf.Duration",
                id: 7
              },
              workflowRunTimeout: {
                type: "google.protobuf.Duration",
                id: 8
              },
              workflowTaskTimeout: {
                type: "google.protobuf.Duration",
                id: 9
              },
              parentClosePolicy: {
                type: "child_workflow.ParentClosePolicy",
                id: 10
              },
              workflowIdReusePolicy: {
                type: "temporal.api.enums.v1.WorkflowIdReusePolicy",
                id: 12
              },
              retryPolicy: {
                type: "temporal.api.common.v1.RetryPolicy",
                id: 13
              },
              cronSchedule: {
                type: "string",
                id: 14
              },
              headers: {
                keyType: "string",
                type: "temporal.api.common.v1.Payload",
                id: 15
              },
              memo: {
                keyType: "string",
                type: "temporal.api.common.v1.Payload",
                id: 16
              },
              searchAttributes: {
                keyType: "string",
                type: "temporal.api.common.v1.Payload",
                id: 17
              },
              cancellationType: {
                type: "child_workflow.ChildWorkflowCancellationType",
                id: 18
              },
              versioningIntent: {
                type: "coresdk.common.VersioningIntent",
                id: 19
              }
            }
          },
          CancelChildWorkflowExecution: {
            fields: {
              childWorkflowSeq: {
                type: "uint32",
                id: 1
              }
            }
          },
          RequestCancelExternalWorkflowExecution: {
            oneofs: {
              target: {
                oneof: [
                  "workflowExecution",
                  "childWorkflowId"
                ]
              }
            },
            fields: {
              seq: {
                type: "uint32",
                id: 1
              },
              workflowExecution: {
                type: "common.NamespacedWorkflowExecution",
                id: 2
              },
              childWorkflowId: {
                type: "string",
                id: 3
              }
            }
          },
          SignalExternalWorkflowExecution: {
            oneofs: {
              target: {
                oneof: [
                  "workflowExecution",
                  "childWorkflowId"
                ]
              }
            },
            fields: {
              seq: {
                type: "uint32",
                id: 1
              },
              workflowExecution: {
                type: "common.NamespacedWorkflowExecution",
                id: 2
              },
              childWorkflowId: {
                type: "string",
                id: 3
              },
              signalName: {
                type: "string",
                id: 4
              },
              args: {
                rule: "repeated",
                type: "temporal.api.common.v1.Payload",
                id: 5
              },
              headers: {
                keyType: "string",
                type: "temporal.api.common.v1.Payload",
                id: 6
              }
            }
          },
          CancelSignalWorkflow: {
            fields: {
              seq: {
                type: "uint32",
                id: 1
              }
            }
          },
          UpsertWorkflowSearchAttributes: {
            fields: {
              searchAttributes: {
                keyType: "string",
                type: "temporal.api.common.v1.Payload",
                id: 1
              }
            }
          },
          ModifyWorkflowProperties: {
            fields: {
              upsertedMemo: {
                type: "temporal.api.common.v1.Memo",
                id: 1
              }
            }
          }
        }
      },
      workflow_completion: {
        options: {
          ruby_package: "Temporalio::Bridge::Api::WorkflowCompletion"
        },
        nested: {
          WorkflowActivationCompletion: {
            oneofs: {
              status: {
                oneof: [
                  "successful",
                  "failed"
                ]
              }
            },
            fields: {
              runId: {
                type: "string",
                id: 1
              },
              successful: {
                type: "Success",
                id: 2
              },
              failed: {
                type: "Failure",
                id: 3
              }
            }
          },
          Success: {
            fields: {
              commands: {
                rule: "repeated",
                type: "workflow_commands.WorkflowCommand",
                id: 1
              },
              usedInternalFlags: {
                rule: "repeated",
                type: "uint32",
                id: 6
              }
            }
          },
          Failure: {
            fields: {
              failure: {
                type: "temporal.api.failure.v1.Failure",
                id: 1
              },
              forceCause: {
                type: "temporal.api.enums.v1.WorkflowTaskFailedCause",
                id: 2
              }
            }
          }
        }
      }
    }
  },
  temporal: {
    nested: {
      api: {
        nested: {
          common: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/common/v1;common",
                  java_package: "io.temporal.api.common.v1",
                  java_multiple_files: true,
                  java_outer_classname: "MessageProto",
                  ruby_package: "Temporalio::Api::Common::V1",
                  csharp_namespace: "Temporalio.Api.Common.V1"
                },
                nested: {
                  DataBlob: {
                    fields: {
                      encodingType: {
                        type: "temporal.api.enums.v1.EncodingType",
                        id: 1
                      },
                      data: {
                        type: "bytes",
                        id: 2
                      }
                    }
                  },
                  Payloads: {
                    fields: {
                      payloads: {
                        rule: "repeated",
                        type: "Payload",
                        id: 1
                      }
                    }
                  },
                  Payload: {
                    fields: {
                      metadata: {
                        keyType: "string",
                        type: "bytes",
                        id: 1
                      },
                      data: {
                        type: "bytes",
                        id: 2
                      }
                    }
                  },
                  SearchAttributes: {
                    fields: {
                      indexedFields: {
                        keyType: "string",
                        type: "Payload",
                        id: 1
                      }
                    }
                  },
                  Memo: {
                    fields: {
                      fields: {
                        keyType: "string",
                        type: "Payload",
                        id: 1
                      }
                    }
                  },
                  Header: {
                    fields: {
                      fields: {
                        keyType: "string",
                        type: "Payload",
                        id: 1
                      }
                    }
                  },
                  WorkflowExecution: {
                    fields: {
                      workflowId: {
                        type: "string",
                        id: 1
                      },
                      runId: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  WorkflowType: {
                    fields: {
                      name: {
                        type: "string",
                        id: 1
                      }
                    }
                  },
                  ActivityType: {
                    fields: {
                      name: {
                        type: "string",
                        id: 1
                      }
                    }
                  },
                  RetryPolicy: {
                    fields: {
                      initialInterval: {
                        type: "google.protobuf.Duration",
                        id: 1,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      backoffCoefficient: {
                        type: "double",
                        id: 2
                      },
                      maximumInterval: {
                        type: "google.protobuf.Duration",
                        id: 3,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      maximumAttempts: {
                        type: "int32",
                        id: 4
                      },
                      nonRetryableErrorTypes: {
                        rule: "repeated",
                        type: "string",
                        id: 5
                      }
                    }
                  },
                  MeteringMetadata: {
                    fields: {
                      nonfirstLocalActivityExecutionAttempts: {
                        type: "uint32",
                        id: 13
                      }
                    }
                  },
                  WorkerVersionStamp: {
                    fields: {
                      buildId: {
                        type: "string",
                        id: 1
                      },
                      bundleId: {
                        type: "string",
                        id: 2
                      },
                      useVersioning: {
                        type: "bool",
                        id: 3
                      }
                    }
                  },
                  WorkerVersionCapabilities: {
                    fields: {
                      buildId: {
                        type: "string",
                        id: 1
                      },
                      useVersioning: {
                        type: "bool",
                        id: 2
                      }
                    }
                  }
                }
              }
            }
          },
          enums: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/enums/v1;enums",
                  java_package: "io.temporal.api.enums.v1",
                  java_multiple_files: true,
                  java_outer_classname: "ScheduleProto",
                  ruby_package: "Temporalio::Api::Enums::V1",
                  csharp_namespace: "Temporalio.Api.Enums.V1"
                },
                nested: {
                  EncodingType: {
                    values: {
                      ENCODING_TYPE_UNSPECIFIED: 0,
                      ENCODING_TYPE_PROTO3: 1,
                      ENCODING_TYPE_JSON: 2
                    }
                  },
                  IndexedValueType: {
                    values: {
                      INDEXED_VALUE_TYPE_UNSPECIFIED: 0,
                      INDEXED_VALUE_TYPE_TEXT: 1,
                      INDEXED_VALUE_TYPE_KEYWORD: 2,
                      INDEXED_VALUE_TYPE_INT: 3,
                      INDEXED_VALUE_TYPE_DOUBLE: 4,
                      INDEXED_VALUE_TYPE_BOOL: 5,
                      INDEXED_VALUE_TYPE_DATETIME: 6,
                      INDEXED_VALUE_TYPE_KEYWORD_LIST: 7
                    }
                  },
                  Severity: {
                    values: {
                      SEVERITY_UNSPECIFIED: 0,
                      SEVERITY_HIGH: 1,
                      SEVERITY_MEDIUM: 2,
                      SEVERITY_LOW: 3
                    }
                  },
                  WorkflowIdReusePolicy: {
                    values: {
                      WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED: 0,
                      WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE: 1,
                      WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY: 2,
                      WORKFLOW_ID_REUSE_POLICY_REJECT_DUPLICATE: 3,
                      WORKFLOW_ID_REUSE_POLICY_TERMINATE_IF_RUNNING: 4
                    }
                  },
                  ParentClosePolicy: {
                    values: {
                      PARENT_CLOSE_POLICY_UNSPECIFIED: 0,
                      PARENT_CLOSE_POLICY_TERMINATE: 1,
                      PARENT_CLOSE_POLICY_ABANDON: 2,
                      PARENT_CLOSE_POLICY_REQUEST_CANCEL: 3
                    }
                  },
                  ContinueAsNewInitiator: {
                    values: {
                      CONTINUE_AS_NEW_INITIATOR_UNSPECIFIED: 0,
                      CONTINUE_AS_NEW_INITIATOR_WORKFLOW: 1,
                      CONTINUE_AS_NEW_INITIATOR_RETRY: 2,
                      CONTINUE_AS_NEW_INITIATOR_CRON_SCHEDULE: 3
                    }
                  },
                  WorkflowExecutionStatus: {
                    values: {
                      WORKFLOW_EXECUTION_STATUS_UNSPECIFIED: 0,
                      WORKFLOW_EXECUTION_STATUS_RUNNING: 1,
                      WORKFLOW_EXECUTION_STATUS_COMPLETED: 2,
                      WORKFLOW_EXECUTION_STATUS_FAILED: 3,
                      WORKFLOW_EXECUTION_STATUS_CANCELED: 4,
                      WORKFLOW_EXECUTION_STATUS_TERMINATED: 5,
                      WORKFLOW_EXECUTION_STATUS_CONTINUED_AS_NEW: 6,
                      WORKFLOW_EXECUTION_STATUS_TIMED_OUT: 7
                    }
                  },
                  PendingActivityState: {
                    values: {
                      PENDING_ACTIVITY_STATE_UNSPECIFIED: 0,
                      PENDING_ACTIVITY_STATE_SCHEDULED: 1,
                      PENDING_ACTIVITY_STATE_STARTED: 2,
                      PENDING_ACTIVITY_STATE_CANCEL_REQUESTED: 3
                    }
                  },
                  PendingWorkflowTaskState: {
                    values: {
                      PENDING_WORKFLOW_TASK_STATE_UNSPECIFIED: 0,
                      PENDING_WORKFLOW_TASK_STATE_SCHEDULED: 1,
                      PENDING_WORKFLOW_TASK_STATE_STARTED: 2
                    }
                  },
                  HistoryEventFilterType: {
                    values: {
                      HISTORY_EVENT_FILTER_TYPE_UNSPECIFIED: 0,
                      HISTORY_EVENT_FILTER_TYPE_ALL_EVENT: 1,
                      HISTORY_EVENT_FILTER_TYPE_CLOSE_EVENT: 2
                    }
                  },
                  RetryState: {
                    values: {
                      RETRY_STATE_UNSPECIFIED: 0,
                      RETRY_STATE_IN_PROGRESS: 1,
                      RETRY_STATE_NON_RETRYABLE_FAILURE: 2,
                      RETRY_STATE_TIMEOUT: 3,
                      RETRY_STATE_MAXIMUM_ATTEMPTS_REACHED: 4,
                      RETRY_STATE_RETRY_POLICY_NOT_SET: 5,
                      RETRY_STATE_INTERNAL_SERVER_ERROR: 6,
                      RETRY_STATE_CANCEL_REQUESTED: 7
                    }
                  },
                  TimeoutType: {
                    values: {
                      TIMEOUT_TYPE_UNSPECIFIED: 0,
                      TIMEOUT_TYPE_START_TO_CLOSE: 1,
                      TIMEOUT_TYPE_SCHEDULE_TO_START: 2,
                      TIMEOUT_TYPE_SCHEDULE_TO_CLOSE: 3,
                      TIMEOUT_TYPE_HEARTBEAT: 4
                    }
                  },
                  WorkflowTaskFailedCause: {
                    values: {
                      WORKFLOW_TASK_FAILED_CAUSE_UNSPECIFIED: 0,
                      WORKFLOW_TASK_FAILED_CAUSE_UNHANDLED_COMMAND: 1,
                      WORKFLOW_TASK_FAILED_CAUSE_BAD_SCHEDULE_ACTIVITY_ATTRIBUTES: 2,
                      WORKFLOW_TASK_FAILED_CAUSE_BAD_REQUEST_CANCEL_ACTIVITY_ATTRIBUTES: 3,
                      WORKFLOW_TASK_FAILED_CAUSE_BAD_START_TIMER_ATTRIBUTES: 4,
                      WORKFLOW_TASK_FAILED_CAUSE_BAD_CANCEL_TIMER_ATTRIBUTES: 5,
                      WORKFLOW_TASK_FAILED_CAUSE_BAD_RECORD_MARKER_ATTRIBUTES: 6,
                      WORKFLOW_TASK_FAILED_CAUSE_BAD_COMPLETE_WORKFLOW_EXECUTION_ATTRIBUTES: 7,
                      WORKFLOW_TASK_FAILED_CAUSE_BAD_FAIL_WORKFLOW_EXECUTION_ATTRIBUTES: 8,
                      WORKFLOW_TASK_FAILED_CAUSE_BAD_CANCEL_WORKFLOW_EXECUTION_ATTRIBUTES: 9,
                      WORKFLOW_TASK_FAILED_CAUSE_BAD_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_ATTRIBUTES: 10,
                      WORKFLOW_TASK_FAILED_CAUSE_BAD_CONTINUE_AS_NEW_ATTRIBUTES: 11,
                      WORKFLOW_TASK_FAILED_CAUSE_START_TIMER_DUPLICATE_ID: 12,
                      WORKFLOW_TASK_FAILED_CAUSE_RESET_STICKY_TASK_QUEUE: 13,
                      WORKFLOW_TASK_FAILED_CAUSE_WORKFLOW_WORKER_UNHANDLED_FAILURE: 14,
                      WORKFLOW_TASK_FAILED_CAUSE_BAD_SIGNAL_WORKFLOW_EXECUTION_ATTRIBUTES: 15,
                      WORKFLOW_TASK_FAILED_CAUSE_BAD_START_CHILD_EXECUTION_ATTRIBUTES: 16,
                      WORKFLOW_TASK_FAILED_CAUSE_FORCE_CLOSE_COMMAND: 17,
                      WORKFLOW_TASK_FAILED_CAUSE_FAILOVER_CLOSE_COMMAND: 18,
                      WORKFLOW_TASK_FAILED_CAUSE_BAD_SIGNAL_INPUT_SIZE: 19,
                      WORKFLOW_TASK_FAILED_CAUSE_RESET_WORKFLOW: 20,
                      WORKFLOW_TASK_FAILED_CAUSE_BAD_BINARY: 21,
                      WORKFLOW_TASK_FAILED_CAUSE_SCHEDULE_ACTIVITY_DUPLICATE_ID: 22,
                      WORKFLOW_TASK_FAILED_CAUSE_BAD_SEARCH_ATTRIBUTES: 23,
                      WORKFLOW_TASK_FAILED_CAUSE_NON_DETERMINISTIC_ERROR: 24,
                      WORKFLOW_TASK_FAILED_CAUSE_BAD_MODIFY_WORKFLOW_PROPERTIES_ATTRIBUTES: 25,
                      WORKFLOW_TASK_FAILED_CAUSE_PENDING_CHILD_WORKFLOWS_LIMIT_EXCEEDED: 26,
                      WORKFLOW_TASK_FAILED_CAUSE_PENDING_ACTIVITIES_LIMIT_EXCEEDED: 27,
                      WORKFLOW_TASK_FAILED_CAUSE_PENDING_SIGNALS_LIMIT_EXCEEDED: 28,
                      WORKFLOW_TASK_FAILED_CAUSE_PENDING_REQUEST_CANCEL_LIMIT_EXCEEDED: 29,
                      WORKFLOW_TASK_FAILED_CAUSE_BAD_UPDATE_WORKFLOW_EXECUTION_MESSAGE: 30,
                      WORKFLOW_TASK_FAILED_CAUSE_UNHANDLED_UPDATE: 31
                    }
                  },
                  StartChildWorkflowExecutionFailedCause: {
                    values: {
                      START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED: 0,
                      START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_WORKFLOW_ALREADY_EXISTS: 1,
                      START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_NAMESPACE_NOT_FOUND: 2
                    }
                  },
                  CancelExternalWorkflowExecutionFailedCause: {
                    values: {
                      CANCEL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED: 0,
                      CANCEL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_EXTERNAL_WORKFLOW_EXECUTION_NOT_FOUND: 1,
                      CANCEL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_NAMESPACE_NOT_FOUND: 2
                    }
                  },
                  SignalExternalWorkflowExecutionFailedCause: {
                    values: {
                      SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED: 0,
                      SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_EXTERNAL_WORKFLOW_EXECUTION_NOT_FOUND: 1,
                      SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_NAMESPACE_NOT_FOUND: 2,
                      SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_SIGNAL_COUNT_LIMIT_EXCEEDED: 3
                    }
                  },
                  ResourceExhaustedCause: {
                    values: {
                      RESOURCE_EXHAUSTED_CAUSE_UNSPECIFIED: 0,
                      RESOURCE_EXHAUSTED_CAUSE_RPS_LIMIT: 1,
                      RESOURCE_EXHAUSTED_CAUSE_CONCURRENT_LIMIT: 2,
                      RESOURCE_EXHAUSTED_CAUSE_SYSTEM_OVERLOADED: 3,
                      RESOURCE_EXHAUSTED_CAUSE_PERSISTENCE_LIMIT: 4,
                      RESOURCE_EXHAUSTED_CAUSE_BUSY_WORKFLOW: 5
                    }
                  },
                  BatchOperationType: {
                    values: {
                      BATCH_OPERATION_TYPE_UNSPECIFIED: 0,
                      BATCH_OPERATION_TYPE_TERMINATE: 1,
                      BATCH_OPERATION_TYPE_CANCEL: 2,
                      BATCH_OPERATION_TYPE_SIGNAL: 3,
                      BATCH_OPERATION_TYPE_DELETE: 4,
                      BATCH_OPERATION_TYPE_RESET: 5
                    }
                  },
                  BatchOperationState: {
                    values: {
                      BATCH_OPERATION_STATE_UNSPECIFIED: 0,
                      BATCH_OPERATION_STATE_RUNNING: 1,
                      BATCH_OPERATION_STATE_COMPLETED: 2,
                      BATCH_OPERATION_STATE_FAILED: 3
                    }
                  },
                  NamespaceState: {
                    values: {
                      NAMESPACE_STATE_UNSPECIFIED: 0,
                      NAMESPACE_STATE_REGISTERED: 1,
                      NAMESPACE_STATE_DEPRECATED: 2,
                      NAMESPACE_STATE_DELETED: 3
                    }
                  },
                  ArchivalState: {
                    values: {
                      ARCHIVAL_STATE_UNSPECIFIED: 0,
                      ARCHIVAL_STATE_DISABLED: 1,
                      ARCHIVAL_STATE_ENABLED: 2
                    }
                  },
                  ReplicationState: {
                    values: {
                      REPLICATION_STATE_UNSPECIFIED: 0,
                      REPLICATION_STATE_NORMAL: 1,
                      REPLICATION_STATE_HANDOVER: 2
                    }
                  },
                  QueryResultType: {
                    values: {
                      QUERY_RESULT_TYPE_UNSPECIFIED: 0,
                      QUERY_RESULT_TYPE_ANSWERED: 1,
                      QUERY_RESULT_TYPE_FAILED: 2
                    }
                  },
                  QueryRejectCondition: {
                    values: {
                      QUERY_REJECT_CONDITION_UNSPECIFIED: 0,
                      QUERY_REJECT_CONDITION_NONE: 1,
                      QUERY_REJECT_CONDITION_NOT_OPEN: 2,
                      QUERY_REJECT_CONDITION_NOT_COMPLETED_CLEANLY: 3
                    }
                  },
                  ResetReapplyType: {
                    values: {
                      RESET_REAPPLY_TYPE_UNSPECIFIED: 0,
                      RESET_REAPPLY_TYPE_SIGNAL: 1,
                      RESET_REAPPLY_TYPE_NONE: 2
                    }
                  },
                  ResetType: {
                    values: {
                      RESET_TYPE_UNSPECIFIED: 0,
                      RESET_TYPE_FIRST_WORKFLOW_TASK: 1,
                      RESET_TYPE_LAST_WORKFLOW_TASK: 2
                    }
                  },
                  TaskQueueKind: {
                    values: {
                      TASK_QUEUE_KIND_UNSPECIFIED: 0,
                      TASK_QUEUE_KIND_NORMAL: 1,
                      TASK_QUEUE_KIND_STICKY: 2
                    }
                  },
                  TaskQueueType: {
                    values: {
                      TASK_QUEUE_TYPE_UNSPECIFIED: 0,
                      TASK_QUEUE_TYPE_WORKFLOW: 1,
                      TASK_QUEUE_TYPE_ACTIVITY: 2
                    }
                  },
                  TaskReachability: {
                    values: {
                      TASK_REACHABILITY_UNSPECIFIED: 0,
                      TASK_REACHABILITY_NEW_WORKFLOWS: 1,
                      TASK_REACHABILITY_EXISTING_WORKFLOWS: 2,
                      TASK_REACHABILITY_OPEN_WORKFLOWS: 3,
                      TASK_REACHABILITY_CLOSED_WORKFLOWS: 4
                    }
                  },
                  EventType: {
                    values: {
                      EVENT_TYPE_UNSPECIFIED: 0,
                      EVENT_TYPE_WORKFLOW_EXECUTION_STARTED: 1,
                      EVENT_TYPE_WORKFLOW_EXECUTION_COMPLETED: 2,
                      EVENT_TYPE_WORKFLOW_EXECUTION_FAILED: 3,
                      EVENT_TYPE_WORKFLOW_EXECUTION_TIMED_OUT: 4,
                      EVENT_TYPE_WORKFLOW_TASK_SCHEDULED: 5,
                      EVENT_TYPE_WORKFLOW_TASK_STARTED: 6,
                      EVENT_TYPE_WORKFLOW_TASK_COMPLETED: 7,
                      EVENT_TYPE_WORKFLOW_TASK_TIMED_OUT: 8,
                      EVENT_TYPE_WORKFLOW_TASK_FAILED: 9,
                      EVENT_TYPE_ACTIVITY_TASK_SCHEDULED: 10,
                      EVENT_TYPE_ACTIVITY_TASK_STARTED: 11,
                      EVENT_TYPE_ACTIVITY_TASK_COMPLETED: 12,
                      EVENT_TYPE_ACTIVITY_TASK_FAILED: 13,
                      EVENT_TYPE_ACTIVITY_TASK_TIMED_OUT: 14,
                      EVENT_TYPE_ACTIVITY_TASK_CANCEL_REQUESTED: 15,
                      EVENT_TYPE_ACTIVITY_TASK_CANCELED: 16,
                      EVENT_TYPE_TIMER_STARTED: 17,
                      EVENT_TYPE_TIMER_FIRED: 18,
                      EVENT_TYPE_TIMER_CANCELED: 19,
                      EVENT_TYPE_WORKFLOW_EXECUTION_CANCEL_REQUESTED: 20,
                      EVENT_TYPE_WORKFLOW_EXECUTION_CANCELED: 21,
                      EVENT_TYPE_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_INITIATED: 22,
                      EVENT_TYPE_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_FAILED: 23,
                      EVENT_TYPE_EXTERNAL_WORKFLOW_EXECUTION_CANCEL_REQUESTED: 24,
                      EVENT_TYPE_MARKER_RECORDED: 25,
                      EVENT_TYPE_WORKFLOW_EXECUTION_SIGNALED: 26,
                      EVENT_TYPE_WORKFLOW_EXECUTION_TERMINATED: 27,
                      EVENT_TYPE_WORKFLOW_EXECUTION_CONTINUED_AS_NEW: 28,
                      EVENT_TYPE_START_CHILD_WORKFLOW_EXECUTION_INITIATED: 29,
                      EVENT_TYPE_START_CHILD_WORKFLOW_EXECUTION_FAILED: 30,
                      EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_STARTED: 31,
                      EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_COMPLETED: 32,
                      EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_FAILED: 33,
                      EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_CANCELED: 34,
                      EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_TIMED_OUT: 35,
                      EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_TERMINATED: 36,
                      EVENT_TYPE_SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_INITIATED: 37,
                      EVENT_TYPE_SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED: 38,
                      EVENT_TYPE_EXTERNAL_WORKFLOW_EXECUTION_SIGNALED: 39,
                      EVENT_TYPE_UPSERT_WORKFLOW_SEARCH_ATTRIBUTES: 40,
                      EVENT_TYPE_WORKFLOW_EXECUTION_UPDATE_ACCEPTED: 41,
                      EVENT_TYPE_WORKFLOW_EXECUTION_UPDATE_REJECTED: 42,
                      EVENT_TYPE_WORKFLOW_EXECUTION_UPDATE_COMPLETED: 43,
                      EVENT_TYPE_WORKFLOW_PROPERTIES_MODIFIED_EXTERNALLY: 44,
                      EVENT_TYPE_ACTIVITY_PROPERTIES_MODIFIED_EXTERNALLY: 45,
                      EVENT_TYPE_WORKFLOW_PROPERTIES_MODIFIED: 46
                    }
                  },
                  UpdateWorkflowExecutionLifecycleStage: {
                    values: {
                      UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_UNSPECIFIED: 0,
                      UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_ADMITTED: 1,
                      UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_ACCEPTED: 2,
                      UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_COMPLETED: 3
                    }
                  },
                  CommandType: {
                    values: {
                      COMMAND_TYPE_UNSPECIFIED: 0,
                      COMMAND_TYPE_SCHEDULE_ACTIVITY_TASK: 1,
                      COMMAND_TYPE_REQUEST_CANCEL_ACTIVITY_TASK: 2,
                      COMMAND_TYPE_START_TIMER: 3,
                      COMMAND_TYPE_COMPLETE_WORKFLOW_EXECUTION: 4,
                      COMMAND_TYPE_FAIL_WORKFLOW_EXECUTION: 5,
                      COMMAND_TYPE_CANCEL_TIMER: 6,
                      COMMAND_TYPE_CANCEL_WORKFLOW_EXECUTION: 7,
                      COMMAND_TYPE_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION: 8,
                      COMMAND_TYPE_RECORD_MARKER: 9,
                      COMMAND_TYPE_CONTINUE_AS_NEW_WORKFLOW_EXECUTION: 10,
                      COMMAND_TYPE_START_CHILD_WORKFLOW_EXECUTION: 11,
                      COMMAND_TYPE_SIGNAL_EXTERNAL_WORKFLOW_EXECUTION: 12,
                      COMMAND_TYPE_UPSERT_WORKFLOW_SEARCH_ATTRIBUTES: 13,
                      COMMAND_TYPE_PROTOCOL_MESSAGE: 14,
                      COMMAND_TYPE_MODIFY_WORKFLOW_PROPERTIES: 16
                    }
                  },
                  ScheduleOverlapPolicy: {
                    values: {
                      SCHEDULE_OVERLAP_POLICY_UNSPECIFIED: 0,
                      SCHEDULE_OVERLAP_POLICY_SKIP: 1,
                      SCHEDULE_OVERLAP_POLICY_BUFFER_ONE: 2,
                      SCHEDULE_OVERLAP_POLICY_BUFFER_ALL: 3,
                      SCHEDULE_OVERLAP_POLICY_CANCEL_OTHER: 4,
                      SCHEDULE_OVERLAP_POLICY_TERMINATE_OTHER: 5,
                      SCHEDULE_OVERLAP_POLICY_ALLOW_ALL: 6
                    }
                  }
                }
              }
            }
          },
          failure: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/failure/v1;failure",
                  java_package: "io.temporal.api.failure.v1",
                  java_multiple_files: true,
                  java_outer_classname: "MessageProto",
                  ruby_package: "Temporalio::Api::Failure::V1",
                  csharp_namespace: "Temporalio.Api.Failure.V1"
                },
                nested: {
                  ApplicationFailureInfo: {
                    fields: {
                      type: {
                        type: "string",
                        id: 1
                      },
                      nonRetryable: {
                        type: "bool",
                        id: 2
                      },
                      details: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 3
                      }
                    }
                  },
                  TimeoutFailureInfo: {
                    fields: {
                      timeoutType: {
                        type: "temporal.api.enums.v1.TimeoutType",
                        id: 1
                      },
                      lastHeartbeatDetails: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 2
                      }
                    }
                  },
                  CanceledFailureInfo: {
                    fields: {
                      details: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 1
                      }
                    }
                  },
                  TerminatedFailureInfo: {
                    fields: {}
                  },
                  ServerFailureInfo: {
                    fields: {
                      nonRetryable: {
                        type: "bool",
                        id: 1
                      }
                    }
                  },
                  ResetWorkflowFailureInfo: {
                    fields: {
                      lastHeartbeatDetails: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 1
                      }
                    }
                  },
                  ActivityFailureInfo: {
                    fields: {
                      scheduledEventId: {
                        type: "int64",
                        id: 1
                      },
                      startedEventId: {
                        type: "int64",
                        id: 2
                      },
                      identity: {
                        type: "string",
                        id: 3
                      },
                      activityType: {
                        type: "temporal.api.common.v1.ActivityType",
                        id: 4
                      },
                      activityId: {
                        type: "string",
                        id: 5
                      },
                      retryState: {
                        type: "temporal.api.enums.v1.RetryState",
                        id: 6
                      }
                    }
                  },
                  ChildWorkflowExecutionFailureInfo: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 2
                      },
                      workflowType: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 3
                      },
                      initiatedEventId: {
                        type: "int64",
                        id: 4
                      },
                      startedEventId: {
                        type: "int64",
                        id: 5
                      },
                      retryState: {
                        type: "temporal.api.enums.v1.RetryState",
                        id: 6
                      }
                    }
                  },
                  Failure: {
                    oneofs: {
                      failureInfo: {
                        oneof: [
                          "applicationFailureInfo",
                          "timeoutFailureInfo",
                          "canceledFailureInfo",
                          "terminatedFailureInfo",
                          "serverFailureInfo",
                          "resetWorkflowFailureInfo",
                          "activityFailureInfo",
                          "childWorkflowExecutionFailureInfo"
                        ]
                      }
                    },
                    fields: {
                      message: {
                        type: "string",
                        id: 1
                      },
                      source: {
                        type: "string",
                        id: 2
                      },
                      stackTrace: {
                        type: "string",
                        id: 3
                      },
                      encodedAttributes: {
                        type: "temporal.api.common.v1.Payload",
                        id: 20
                      },
                      cause: {
                        type: "Failure",
                        id: 4
                      },
                      applicationFailureInfo: {
                        type: "ApplicationFailureInfo",
                        id: 5
                      },
                      timeoutFailureInfo: {
                        type: "TimeoutFailureInfo",
                        id: 6
                      },
                      canceledFailureInfo: {
                        type: "CanceledFailureInfo",
                        id: 7
                      },
                      terminatedFailureInfo: {
                        type: "TerminatedFailureInfo",
                        id: 8
                      },
                      serverFailureInfo: {
                        type: "ServerFailureInfo",
                        id: 9
                      },
                      resetWorkflowFailureInfo: {
                        type: "ResetWorkflowFailureInfo",
                        id: 10
                      },
                      activityFailureInfo: {
                        type: "ActivityFailureInfo",
                        id: 11
                      },
                      childWorkflowExecutionFailureInfo: {
                        type: "ChildWorkflowExecutionFailureInfo",
                        id: 12
                      }
                    }
                  }
                }
              }
            }
          },
          workflowservice: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/workflowservice/v1;workflowservice",
                  java_package: "io.temporal.api.workflowservice.v1",
                  java_multiple_files: true,
                  java_outer_classname: "RequestResponseProto",
                  ruby_package: "Temporalio::Api::WorkflowService::V1",
                  csharp_namespace: "Temporalio.Api.WorkflowService.V1"
                },
                nested: {
                  WorkflowService: {
                    methods: {
                      RegisterNamespace: {
                        requestType: "RegisterNamespaceRequest",
                        responseType: "RegisterNamespaceResponse"
                      },
                      DescribeNamespace: {
                        requestType: "DescribeNamespaceRequest",
                        responseType: "DescribeNamespaceResponse"
                      },
                      ListNamespaces: {
                        requestType: "ListNamespacesRequest",
                        responseType: "ListNamespacesResponse"
                      },
                      UpdateNamespace: {
                        requestType: "UpdateNamespaceRequest",
                        responseType: "UpdateNamespaceResponse"
                      },
                      DeprecateNamespace: {
                        requestType: "DeprecateNamespaceRequest",
                        responseType: "DeprecateNamespaceResponse"
                      },
                      StartWorkflowExecution: {
                        requestType: "StartWorkflowExecutionRequest",
                        responseType: "StartWorkflowExecutionResponse"
                      },
                      GetWorkflowExecutionHistory: {
                        requestType: "GetWorkflowExecutionHistoryRequest",
                        responseType: "GetWorkflowExecutionHistoryResponse"
                      },
                      GetWorkflowExecutionHistoryReverse: {
                        requestType: "GetWorkflowExecutionHistoryReverseRequest",
                        responseType: "GetWorkflowExecutionHistoryReverseResponse"
                      },
                      PollWorkflowTaskQueue: {
                        requestType: "PollWorkflowTaskQueueRequest",
                        responseType: "PollWorkflowTaskQueueResponse"
                      },
                      RespondWorkflowTaskCompleted: {
                        requestType: "RespondWorkflowTaskCompletedRequest",
                        responseType: "RespondWorkflowTaskCompletedResponse"
                      },
                      RespondWorkflowTaskFailed: {
                        requestType: "RespondWorkflowTaskFailedRequest",
                        responseType: "RespondWorkflowTaskFailedResponse"
                      },
                      PollActivityTaskQueue: {
                        requestType: "PollActivityTaskQueueRequest",
                        responseType: "PollActivityTaskQueueResponse"
                      },
                      RecordActivityTaskHeartbeat: {
                        requestType: "RecordActivityTaskHeartbeatRequest",
                        responseType: "RecordActivityTaskHeartbeatResponse"
                      },
                      RecordActivityTaskHeartbeatById: {
                        requestType: "RecordActivityTaskHeartbeatByIdRequest",
                        responseType: "RecordActivityTaskHeartbeatByIdResponse"
                      },
                      RespondActivityTaskCompleted: {
                        requestType: "RespondActivityTaskCompletedRequest",
                        responseType: "RespondActivityTaskCompletedResponse"
                      },
                      RespondActivityTaskCompletedById: {
                        requestType: "RespondActivityTaskCompletedByIdRequest",
                        responseType: "RespondActivityTaskCompletedByIdResponse"
                      },
                      RespondActivityTaskFailed: {
                        requestType: "RespondActivityTaskFailedRequest",
                        responseType: "RespondActivityTaskFailedResponse"
                      },
                      RespondActivityTaskFailedById: {
                        requestType: "RespondActivityTaskFailedByIdRequest",
                        responseType: "RespondActivityTaskFailedByIdResponse"
                      },
                      RespondActivityTaskCanceled: {
                        requestType: "RespondActivityTaskCanceledRequest",
                        responseType: "RespondActivityTaskCanceledResponse"
                      },
                      RespondActivityTaskCanceledById: {
                        requestType: "RespondActivityTaskCanceledByIdRequest",
                        responseType: "RespondActivityTaskCanceledByIdResponse"
                      },
                      RequestCancelWorkflowExecution: {
                        requestType: "RequestCancelWorkflowExecutionRequest",
                        responseType: "RequestCancelWorkflowExecutionResponse"
                      },
                      SignalWorkflowExecution: {
                        requestType: "SignalWorkflowExecutionRequest",
                        responseType: "SignalWorkflowExecutionResponse"
                      },
                      SignalWithStartWorkflowExecution: {
                        requestType: "SignalWithStartWorkflowExecutionRequest",
                        responseType: "SignalWithStartWorkflowExecutionResponse"
                      },
                      ResetWorkflowExecution: {
                        requestType: "ResetWorkflowExecutionRequest",
                        responseType: "ResetWorkflowExecutionResponse"
                      },
                      TerminateWorkflowExecution: {
                        requestType: "TerminateWorkflowExecutionRequest",
                        responseType: "TerminateWorkflowExecutionResponse"
                      },
                      DeleteWorkflowExecution: {
                        requestType: "DeleteWorkflowExecutionRequest",
                        responseType: "DeleteWorkflowExecutionResponse"
                      },
                      ListOpenWorkflowExecutions: {
                        requestType: "ListOpenWorkflowExecutionsRequest",
                        responseType: "ListOpenWorkflowExecutionsResponse"
                      },
                      ListClosedWorkflowExecutions: {
                        requestType: "ListClosedWorkflowExecutionsRequest",
                        responseType: "ListClosedWorkflowExecutionsResponse"
                      },
                      ListWorkflowExecutions: {
                        requestType: "ListWorkflowExecutionsRequest",
                        responseType: "ListWorkflowExecutionsResponse"
                      },
                      ListArchivedWorkflowExecutions: {
                        requestType: "ListArchivedWorkflowExecutionsRequest",
                        responseType: "ListArchivedWorkflowExecutionsResponse"
                      },
                      ScanWorkflowExecutions: {
                        requestType: "ScanWorkflowExecutionsRequest",
                        responseType: "ScanWorkflowExecutionsResponse"
                      },
                      CountWorkflowExecutions: {
                        requestType: "CountWorkflowExecutionsRequest",
                        responseType: "CountWorkflowExecutionsResponse"
                      },
                      GetSearchAttributes: {
                        requestType: "GetSearchAttributesRequest",
                        responseType: "GetSearchAttributesResponse"
                      },
                      RespondQueryTaskCompleted: {
                        requestType: "RespondQueryTaskCompletedRequest",
                        responseType: "RespondQueryTaskCompletedResponse"
                      },
                      ResetStickyTaskQueue: {
                        requestType: "ResetStickyTaskQueueRequest",
                        responseType: "ResetStickyTaskQueueResponse"
                      },
                      QueryWorkflow: {
                        requestType: "QueryWorkflowRequest",
                        responseType: "QueryWorkflowResponse"
                      },
                      DescribeWorkflowExecution: {
                        requestType: "DescribeWorkflowExecutionRequest",
                        responseType: "DescribeWorkflowExecutionResponse"
                      },
                      DescribeTaskQueue: {
                        requestType: "DescribeTaskQueueRequest",
                        responseType: "DescribeTaskQueueResponse"
                      },
                      GetClusterInfo: {
                        requestType: "GetClusterInfoRequest",
                        responseType: "GetClusterInfoResponse"
                      },
                      GetSystemInfo: {
                        requestType: "GetSystemInfoRequest",
                        responseType: "GetSystemInfoResponse"
                      },
                      ListTaskQueuePartitions: {
                        requestType: "ListTaskQueuePartitionsRequest",
                        responseType: "ListTaskQueuePartitionsResponse"
                      },
                      CreateSchedule: {
                        requestType: "CreateScheduleRequest",
                        responseType: "CreateScheduleResponse"
                      },
                      DescribeSchedule: {
                        requestType: "DescribeScheduleRequest",
                        responseType: "DescribeScheduleResponse"
                      },
                      UpdateSchedule: {
                        requestType: "UpdateScheduleRequest",
                        responseType: "UpdateScheduleResponse"
                      },
                      PatchSchedule: {
                        requestType: "PatchScheduleRequest",
                        responseType: "PatchScheduleResponse"
                      },
                      ListScheduleMatchingTimes: {
                        requestType: "ListScheduleMatchingTimesRequest",
                        responseType: "ListScheduleMatchingTimesResponse"
                      },
                      DeleteSchedule: {
                        requestType: "DeleteScheduleRequest",
                        responseType: "DeleteScheduleResponse"
                      },
                      ListSchedules: {
                        requestType: "ListSchedulesRequest",
                        responseType: "ListSchedulesResponse"
                      },
                      UpdateWorkerBuildIdCompatibility: {
                        requestType: "UpdateWorkerBuildIdCompatibilityRequest",
                        responseType: "UpdateWorkerBuildIdCompatibilityResponse"
                      },
                      GetWorkerBuildIdCompatibility: {
                        requestType: "GetWorkerBuildIdCompatibilityRequest",
                        responseType: "GetWorkerBuildIdCompatibilityResponse"
                      },
                      GetWorkerTaskReachability: {
                        requestType: "GetWorkerTaskReachabilityRequest",
                        responseType: "GetWorkerTaskReachabilityResponse"
                      },
                      UpdateWorkflowExecution: {
                        requestType: "UpdateWorkflowExecutionRequest",
                        responseType: "UpdateWorkflowExecutionResponse"
                      },
                      PollWorkflowExecutionUpdate: {
                        requestType: "PollWorkflowExecutionUpdateRequest",
                        responseType: "PollWorkflowExecutionUpdateResponse"
                      },
                      StartBatchOperation: {
                        requestType: "StartBatchOperationRequest",
                        responseType: "StartBatchOperationResponse"
                      },
                      StopBatchOperation: {
                        requestType: "StopBatchOperationRequest",
                        responseType: "StopBatchOperationResponse"
                      },
                      DescribeBatchOperation: {
                        requestType: "DescribeBatchOperationRequest",
                        responseType: "DescribeBatchOperationResponse"
                      },
                      ListBatchOperations: {
                        requestType: "ListBatchOperationsRequest",
                        responseType: "ListBatchOperationsResponse"
                      }
                    }
                  },
                  RegisterNamespaceRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      description: {
                        type: "string",
                        id: 2
                      },
                      ownerEmail: {
                        type: "string",
                        id: 3
                      },
                      workflowExecutionRetentionPeriod: {
                        type: "google.protobuf.Duration",
                        id: 4,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      clusters: {
                        rule: "repeated",
                        type: "temporal.api.replication.v1.ClusterReplicationConfig",
                        id: 5
                      },
                      activeClusterName: {
                        type: "string",
                        id: 6
                      },
                      data: {
                        keyType: "string",
                        type: "string",
                        id: 7
                      },
                      securityToken: {
                        type: "string",
                        id: 8
                      },
                      isGlobalNamespace: {
                        type: "bool",
                        id: 9
                      },
                      historyArchivalState: {
                        type: "temporal.api.enums.v1.ArchivalState",
                        id: 10
                      },
                      historyArchivalUri: {
                        type: "string",
                        id: 11
                      },
                      visibilityArchivalState: {
                        type: "temporal.api.enums.v1.ArchivalState",
                        id: 12
                      },
                      visibilityArchivalUri: {
                        type: "string",
                        id: 13
                      }
                    }
                  },
                  RegisterNamespaceResponse: {
                    fields: {}
                  },
                  ListNamespacesRequest: {
                    fields: {
                      pageSize: {
                        type: "int32",
                        id: 1
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 2
                      },
                      namespaceFilter: {
                        type: "temporal.api.namespace.v1.NamespaceFilter",
                        id: 3
                      }
                    }
                  },
                  ListNamespacesResponse: {
                    fields: {
                      namespaces: {
                        rule: "repeated",
                        type: "DescribeNamespaceResponse",
                        id: 1
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 2
                      }
                    }
                  },
                  DescribeNamespaceRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      id: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  DescribeNamespaceResponse: {
                    fields: {
                      namespaceInfo: {
                        type: "temporal.api.namespace.v1.NamespaceInfo",
                        id: 1
                      },
                      config: {
                        type: "temporal.api.namespace.v1.NamespaceConfig",
                        id: 2
                      },
                      replicationConfig: {
                        type: "temporal.api.replication.v1.NamespaceReplicationConfig",
                        id: 3
                      },
                      failoverVersion: {
                        type: "int64",
                        id: 4
                      },
                      isGlobalNamespace: {
                        type: "bool",
                        id: 5
                      },
                      failoverHistory: {
                        rule: "repeated",
                        type: "temporal.api.replication.v1.FailoverStatus",
                        id: 6
                      }
                    }
                  },
                  UpdateNamespaceRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      updateInfo: {
                        type: "temporal.api.namespace.v1.UpdateNamespaceInfo",
                        id: 2
                      },
                      config: {
                        type: "temporal.api.namespace.v1.NamespaceConfig",
                        id: 3
                      },
                      replicationConfig: {
                        type: "temporal.api.replication.v1.NamespaceReplicationConfig",
                        id: 4
                      },
                      securityToken: {
                        type: "string",
                        id: 5
                      },
                      deleteBadBinary: {
                        type: "string",
                        id: 6
                      },
                      promoteNamespace: {
                        type: "bool",
                        id: 7
                      }
                    }
                  },
                  UpdateNamespaceResponse: {
                    fields: {
                      namespaceInfo: {
                        type: "temporal.api.namespace.v1.NamespaceInfo",
                        id: 1
                      },
                      config: {
                        type: "temporal.api.namespace.v1.NamespaceConfig",
                        id: 2
                      },
                      replicationConfig: {
                        type: "temporal.api.replication.v1.NamespaceReplicationConfig",
                        id: 3
                      },
                      failoverVersion: {
                        type: "int64",
                        id: 4
                      },
                      isGlobalNamespace: {
                        type: "bool",
                        id: 5
                      }
                    }
                  },
                  DeprecateNamespaceRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      securityToken: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  DeprecateNamespaceResponse: {
                    fields: {}
                  },
                  StartWorkflowExecutionRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      workflowId: {
                        type: "string",
                        id: 2
                      },
                      workflowType: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 3
                      },
                      taskQueue: {
                        type: "temporal.api.taskqueue.v1.TaskQueue",
                        id: 4
                      },
                      input: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 5
                      },
                      workflowExecutionTimeout: {
                        type: "google.protobuf.Duration",
                        id: 6,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      workflowRunTimeout: {
                        type: "google.protobuf.Duration",
                        id: 7,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      workflowTaskTimeout: {
                        type: "google.protobuf.Duration",
                        id: 8,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      identity: {
                        type: "string",
                        id: 9
                      },
                      requestId: {
                        type: "string",
                        id: 10
                      },
                      workflowIdReusePolicy: {
                        type: "temporal.api.enums.v1.WorkflowIdReusePolicy",
                        id: 11
                      },
                      retryPolicy: {
                        type: "temporal.api.common.v1.RetryPolicy",
                        id: 12
                      },
                      cronSchedule: {
                        type: "string",
                        id: 13
                      },
                      memo: {
                        type: "temporal.api.common.v1.Memo",
                        id: 14
                      },
                      searchAttributes: {
                        type: "temporal.api.common.v1.SearchAttributes",
                        id: 15
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 16
                      },
                      requestEagerExecution: {
                        type: "bool",
                        id: 17
                      },
                      continuedFailure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 18
                      },
                      lastCompletionResult: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 19
                      },
                      workflowStartDelay: {
                        type: "google.protobuf.Duration",
                        id: 20,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      }
                    }
                  },
                  StartWorkflowExecutionResponse: {
                    fields: {
                      runId: {
                        type: "string",
                        id: 1
                      },
                      eagerWorkflowTask: {
                        type: "PollWorkflowTaskQueueResponse",
                        id: 2
                      }
                    }
                  },
                  GetWorkflowExecutionHistoryRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      execution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 2
                      },
                      maximumPageSize: {
                        type: "int32",
                        id: 3
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 4
                      },
                      waitNewEvent: {
                        type: "bool",
                        id: 5
                      },
                      historyEventFilterType: {
                        type: "temporal.api.enums.v1.HistoryEventFilterType",
                        id: 6
                      },
                      skipArchival: {
                        type: "bool",
                        id: 7
                      }
                    }
                  },
                  GetWorkflowExecutionHistoryResponse: {
                    fields: {
                      history: {
                        type: "temporal.api.history.v1.History",
                        id: 1
                      },
                      rawHistory: {
                        rule: "repeated",
                        type: "temporal.api.common.v1.DataBlob",
                        id: 2
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 3
                      },
                      archived: {
                        type: "bool",
                        id: 4
                      }
                    }
                  },
                  GetWorkflowExecutionHistoryReverseRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      execution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 2
                      },
                      maximumPageSize: {
                        type: "int32",
                        id: 3
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 4
                      }
                    }
                  },
                  GetWorkflowExecutionHistoryReverseResponse: {
                    fields: {
                      history: {
                        type: "temporal.api.history.v1.History",
                        id: 1
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 3
                      }
                    }
                  },
                  PollWorkflowTaskQueueRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      taskQueue: {
                        type: "temporal.api.taskqueue.v1.TaskQueue",
                        id: 2
                      },
                      identity: {
                        type: "string",
                        id: 3
                      },
                      binaryChecksum: {
                        type: "string",
                        id: 4
                      },
                      workerVersionCapabilities: {
                        type: "temporal.api.common.v1.WorkerVersionCapabilities",
                        id: 5
                      }
                    }
                  },
                  PollWorkflowTaskQueueResponse: {
                    fields: {
                      taskToken: {
                        type: "bytes",
                        id: 1
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 2
                      },
                      workflowType: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 3
                      },
                      previousStartedEventId: {
                        type: "int64",
                        id: 4
                      },
                      startedEventId: {
                        type: "int64",
                        id: 5
                      },
                      attempt: {
                        type: "int32",
                        id: 6
                      },
                      backlogCountHint: {
                        type: "int64",
                        id: 7
                      },
                      history: {
                        type: "temporal.api.history.v1.History",
                        id: 8
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 9
                      },
                      query: {
                        type: "temporal.api.query.v1.WorkflowQuery",
                        id: 10
                      },
                      workflowExecutionTaskQueue: {
                        type: "temporal.api.taskqueue.v1.TaskQueue",
                        id: 11
                      },
                      scheduledTime: {
                        type: "google.protobuf.Timestamp",
                        id: 12,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      },
                      startedTime: {
                        type: "google.protobuf.Timestamp",
                        id: 13,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      },
                      queries: {
                        keyType: "string",
                        type: "temporal.api.query.v1.WorkflowQuery",
                        id: 14
                      },
                      messages: {
                        rule: "repeated",
                        type: "temporal.api.protocol.v1.Message",
                        id: 15
                      }
                    }
                  },
                  RespondWorkflowTaskCompletedRequest: {
                    fields: {
                      taskToken: {
                        type: "bytes",
                        id: 1
                      },
                      commands: {
                        rule: "repeated",
                        type: "temporal.api.command.v1.Command",
                        id: 2
                      },
                      identity: {
                        type: "string",
                        id: 3
                      },
                      stickyAttributes: {
                        type: "temporal.api.taskqueue.v1.StickyExecutionAttributes",
                        id: 4
                      },
                      returnNewWorkflowTask: {
                        type: "bool",
                        id: 5
                      },
                      forceCreateNewWorkflowTask: {
                        type: "bool",
                        id: 6
                      },
                      binaryChecksum: {
                        type: "string",
                        id: 7
                      },
                      queryResults: {
                        keyType: "string",
                        type: "temporal.api.query.v1.WorkflowQueryResult",
                        id: 8
                      },
                      namespace: {
                        type: "string",
                        id: 9
                      },
                      workerVersionStamp: {
                        type: "temporal.api.common.v1.WorkerVersionStamp",
                        id: 10
                      },
                      messages: {
                        rule: "repeated",
                        type: "temporal.api.protocol.v1.Message",
                        id: 11
                      },
                      sdkMetadata: {
                        type: "temporal.api.sdk.v1.WorkflowTaskCompletedMetadata",
                        id: 12
                      },
                      meteringMetadata: {
                        type: "temporal.api.common.v1.MeteringMetadata",
                        id: 13
                      }
                    }
                  },
                  RespondWorkflowTaskCompletedResponse: {
                    fields: {
                      workflowTask: {
                        type: "PollWorkflowTaskQueueResponse",
                        id: 1
                      },
                      activityTasks: {
                        rule: "repeated",
                        type: "PollActivityTaskQueueResponse",
                        id: 2
                      },
                      resetHistoryEventId: {
                        type: "int64",
                        id: 3
                      }
                    }
                  },
                  RespondWorkflowTaskFailedRequest: {
                    fields: {
                      taskToken: {
                        type: "bytes",
                        id: 1
                      },
                      cause: {
                        type: "temporal.api.enums.v1.WorkflowTaskFailedCause",
                        id: 2
                      },
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 3
                      },
                      identity: {
                        type: "string",
                        id: 4
                      },
                      binaryChecksum: {
                        type: "string",
                        id: 5
                      },
                      namespace: {
                        type: "string",
                        id: 6
                      },
                      messages: {
                        rule: "repeated",
                        type: "temporal.api.protocol.v1.Message",
                        id: 7
                      },
                      workerVersion: {
                        type: "temporal.api.common.v1.WorkerVersionStamp",
                        id: 8
                      }
                    }
                  },
                  RespondWorkflowTaskFailedResponse: {
                    fields: {}
                  },
                  PollActivityTaskQueueRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      taskQueue: {
                        type: "temporal.api.taskqueue.v1.TaskQueue",
                        id: 2
                      },
                      identity: {
                        type: "string",
                        id: 3
                      },
                      taskQueueMetadata: {
                        type: "temporal.api.taskqueue.v1.TaskQueueMetadata",
                        id: 4
                      },
                      workerVersionCapabilities: {
                        type: "temporal.api.common.v1.WorkerVersionCapabilities",
                        id: 5
                      }
                    }
                  },
                  PollActivityTaskQueueResponse: {
                    fields: {
                      taskToken: {
                        type: "bytes",
                        id: 1
                      },
                      workflowNamespace: {
                        type: "string",
                        id: 2
                      },
                      workflowType: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 3
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 4
                      },
                      activityType: {
                        type: "temporal.api.common.v1.ActivityType",
                        id: 5
                      },
                      activityId: {
                        type: "string",
                        id: 6
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 7
                      },
                      input: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 8
                      },
                      heartbeatDetails: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 9
                      },
                      scheduledTime: {
                        type: "google.protobuf.Timestamp",
                        id: 10,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      },
                      currentAttemptScheduledTime: {
                        type: "google.protobuf.Timestamp",
                        id: 11,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      },
                      startedTime: {
                        type: "google.protobuf.Timestamp",
                        id: 12,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      },
                      attempt: {
                        type: "int32",
                        id: 13
                      },
                      scheduleToCloseTimeout: {
                        type: "google.protobuf.Duration",
                        id: 14,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      startToCloseTimeout: {
                        type: "google.protobuf.Duration",
                        id: 15,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      heartbeatTimeout: {
                        type: "google.protobuf.Duration",
                        id: 16,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      retryPolicy: {
                        type: "temporal.api.common.v1.RetryPolicy",
                        id: 17
                      }
                    }
                  },
                  RecordActivityTaskHeartbeatRequest: {
                    fields: {
                      taskToken: {
                        type: "bytes",
                        id: 1
                      },
                      details: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 2
                      },
                      identity: {
                        type: "string",
                        id: 3
                      },
                      namespace: {
                        type: "string",
                        id: 4
                      }
                    }
                  },
                  RecordActivityTaskHeartbeatResponse: {
                    fields: {
                      cancelRequested: {
                        type: "bool",
                        id: 1
                      }
                    }
                  },
                  RecordActivityTaskHeartbeatByIdRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      workflowId: {
                        type: "string",
                        id: 2
                      },
                      runId: {
                        type: "string",
                        id: 3
                      },
                      activityId: {
                        type: "string",
                        id: 4
                      },
                      details: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 5
                      },
                      identity: {
                        type: "string",
                        id: 6
                      }
                    }
                  },
                  RecordActivityTaskHeartbeatByIdResponse: {
                    fields: {
                      cancelRequested: {
                        type: "bool",
                        id: 1
                      }
                    }
                  },
                  RespondActivityTaskCompletedRequest: {
                    fields: {
                      taskToken: {
                        type: "bytes",
                        id: 1
                      },
                      result: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 2
                      },
                      identity: {
                        type: "string",
                        id: 3
                      },
                      namespace: {
                        type: "string",
                        id: 4
                      },
                      workerVersion: {
                        type: "temporal.api.common.v1.WorkerVersionStamp",
                        id: 5
                      }
                    }
                  },
                  RespondActivityTaskCompletedResponse: {
                    fields: {}
                  },
                  RespondActivityTaskCompletedByIdRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      workflowId: {
                        type: "string",
                        id: 2
                      },
                      runId: {
                        type: "string",
                        id: 3
                      },
                      activityId: {
                        type: "string",
                        id: 4
                      },
                      result: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 5
                      },
                      identity: {
                        type: "string",
                        id: 6
                      }
                    }
                  },
                  RespondActivityTaskCompletedByIdResponse: {
                    fields: {}
                  },
                  RespondActivityTaskFailedRequest: {
                    fields: {
                      taskToken: {
                        type: "bytes",
                        id: 1
                      },
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 2
                      },
                      identity: {
                        type: "string",
                        id: 3
                      },
                      namespace: {
                        type: "string",
                        id: 4
                      },
                      lastHeartbeatDetails: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 5
                      },
                      workerVersion: {
                        type: "temporal.api.common.v1.WorkerVersionStamp",
                        id: 6
                      }
                    }
                  },
                  RespondActivityTaskFailedResponse: {
                    fields: {
                      failures: {
                        rule: "repeated",
                        type: "temporal.api.failure.v1.Failure",
                        id: 1
                      }
                    }
                  },
                  RespondActivityTaskFailedByIdRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      workflowId: {
                        type: "string",
                        id: 2
                      },
                      runId: {
                        type: "string",
                        id: 3
                      },
                      activityId: {
                        type: "string",
                        id: 4
                      },
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 5
                      },
                      identity: {
                        type: "string",
                        id: 6
                      },
                      lastHeartbeatDetails: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 7
                      }
                    }
                  },
                  RespondActivityTaskFailedByIdResponse: {
                    fields: {
                      failures: {
                        rule: "repeated",
                        type: "temporal.api.failure.v1.Failure",
                        id: 1
                      }
                    }
                  },
                  RespondActivityTaskCanceledRequest: {
                    fields: {
                      taskToken: {
                        type: "bytes",
                        id: 1
                      },
                      details: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 2
                      },
                      identity: {
                        type: "string",
                        id: 3
                      },
                      namespace: {
                        type: "string",
                        id: 4
                      },
                      workerVersion: {
                        type: "temporal.api.common.v1.WorkerVersionStamp",
                        id: 5
                      }
                    }
                  },
                  RespondActivityTaskCanceledResponse: {
                    fields: {}
                  },
                  RespondActivityTaskCanceledByIdRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      workflowId: {
                        type: "string",
                        id: 2
                      },
                      runId: {
                        type: "string",
                        id: 3
                      },
                      activityId: {
                        type: "string",
                        id: 4
                      },
                      details: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 5
                      },
                      identity: {
                        type: "string",
                        id: 6
                      }
                    }
                  },
                  RespondActivityTaskCanceledByIdResponse: {
                    fields: {}
                  },
                  RequestCancelWorkflowExecutionRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 2
                      },
                      identity: {
                        type: "string",
                        id: 3
                      },
                      requestId: {
                        type: "string",
                        id: 4
                      },
                      firstExecutionRunId: {
                        type: "string",
                        id: 5
                      },
                      reason: {
                        type: "string",
                        id: 6
                      }
                    }
                  },
                  RequestCancelWorkflowExecutionResponse: {
                    fields: {}
                  },
                  SignalWorkflowExecutionRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 2
                      },
                      signalName: {
                        type: "string",
                        id: 3
                      },
                      input: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 4
                      },
                      identity: {
                        type: "string",
                        id: 5
                      },
                      requestId: {
                        type: "string",
                        id: 6
                      },
                      control: {
                        type: "string",
                        id: 7
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 8
                      },
                      skipGenerateWorkflowTask: {
                        type: "bool",
                        id: 9
                      }
                    }
                  },
                  SignalWorkflowExecutionResponse: {
                    fields: {}
                  },
                  SignalWithStartWorkflowExecutionRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      workflowId: {
                        type: "string",
                        id: 2
                      },
                      workflowType: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 3
                      },
                      taskQueue: {
                        type: "temporal.api.taskqueue.v1.TaskQueue",
                        id: 4
                      },
                      input: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 5
                      },
                      workflowExecutionTimeout: {
                        type: "google.protobuf.Duration",
                        id: 6,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      workflowRunTimeout: {
                        type: "google.protobuf.Duration",
                        id: 7,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      workflowTaskTimeout: {
                        type: "google.protobuf.Duration",
                        id: 8,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      identity: {
                        type: "string",
                        id: 9
                      },
                      requestId: {
                        type: "string",
                        id: 10
                      },
                      workflowIdReusePolicy: {
                        type: "temporal.api.enums.v1.WorkflowIdReusePolicy",
                        id: 11
                      },
                      signalName: {
                        type: "string",
                        id: 12
                      },
                      signalInput: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 13
                      },
                      control: {
                        type: "string",
                        id: 14
                      },
                      retryPolicy: {
                        type: "temporal.api.common.v1.RetryPolicy",
                        id: 15
                      },
                      cronSchedule: {
                        type: "string",
                        id: 16
                      },
                      memo: {
                        type: "temporal.api.common.v1.Memo",
                        id: 17
                      },
                      searchAttributes: {
                        type: "temporal.api.common.v1.SearchAttributes",
                        id: 18
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 19
                      },
                      workflowStartDelay: {
                        type: "google.protobuf.Duration",
                        id: 20,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      skipGenerateWorkflowTask: {
                        type: "bool",
                        id: 21
                      }
                    }
                  },
                  SignalWithStartWorkflowExecutionResponse: {
                    fields: {
                      runId: {
                        type: "string",
                        id: 1
                      }
                    }
                  },
                  ResetWorkflowExecutionRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 2
                      },
                      reason: {
                        type: "string",
                        id: 3
                      },
                      workflowTaskFinishEventId: {
                        type: "int64",
                        id: 4
                      },
                      requestId: {
                        type: "string",
                        id: 5
                      },
                      resetReapplyType: {
                        type: "temporal.api.enums.v1.ResetReapplyType",
                        id: 6
                      }
                    }
                  },
                  ResetWorkflowExecutionResponse: {
                    fields: {
                      runId: {
                        type: "string",
                        id: 1
                      }
                    }
                  },
                  TerminateWorkflowExecutionRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 2
                      },
                      reason: {
                        type: "string",
                        id: 3
                      },
                      details: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 4
                      },
                      identity: {
                        type: "string",
                        id: 5
                      },
                      firstExecutionRunId: {
                        type: "string",
                        id: 6
                      }
                    }
                  },
                  TerminateWorkflowExecutionResponse: {
                    fields: {}
                  },
                  DeleteWorkflowExecutionRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 2
                      }
                    }
                  },
                  DeleteWorkflowExecutionResponse: {
                    fields: {}
                  },
                  ListOpenWorkflowExecutionsRequest: {
                    oneofs: {
                      filters: {
                        oneof: [
                          "executionFilter",
                          "typeFilter"
                        ]
                      }
                    },
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      maximumPageSize: {
                        type: "int32",
                        id: 2
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 3
                      },
                      startTimeFilter: {
                        type: "temporal.api.filter.v1.StartTimeFilter",
                        id: 4
                      },
                      executionFilter: {
                        type: "temporal.api.filter.v1.WorkflowExecutionFilter",
                        id: 5
                      },
                      typeFilter: {
                        type: "temporal.api.filter.v1.WorkflowTypeFilter",
                        id: 6
                      }
                    }
                  },
                  ListOpenWorkflowExecutionsResponse: {
                    fields: {
                      executions: {
                        rule: "repeated",
                        type: "temporal.api.workflow.v1.WorkflowExecutionInfo",
                        id: 1
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 2
                      }
                    }
                  },
                  ListClosedWorkflowExecutionsRequest: {
                    oneofs: {
                      filters: {
                        oneof: [
                          "executionFilter",
                          "typeFilter",
                          "statusFilter"
                        ]
                      }
                    },
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      maximumPageSize: {
                        type: "int32",
                        id: 2
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 3
                      },
                      startTimeFilter: {
                        type: "temporal.api.filter.v1.StartTimeFilter",
                        id: 4
                      },
                      executionFilter: {
                        type: "temporal.api.filter.v1.WorkflowExecutionFilter",
                        id: 5
                      },
                      typeFilter: {
                        type: "temporal.api.filter.v1.WorkflowTypeFilter",
                        id: 6
                      },
                      statusFilter: {
                        type: "temporal.api.filter.v1.StatusFilter",
                        id: 7
                      }
                    }
                  },
                  ListClosedWorkflowExecutionsResponse: {
                    fields: {
                      executions: {
                        rule: "repeated",
                        type: "temporal.api.workflow.v1.WorkflowExecutionInfo",
                        id: 1
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 2
                      }
                    }
                  },
                  ListWorkflowExecutionsRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      pageSize: {
                        type: "int32",
                        id: 2
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 3
                      },
                      query: {
                        type: "string",
                        id: 4
                      }
                    }
                  },
                  ListWorkflowExecutionsResponse: {
                    fields: {
                      executions: {
                        rule: "repeated",
                        type: "temporal.api.workflow.v1.WorkflowExecutionInfo",
                        id: 1
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 2
                      }
                    }
                  },
                  ListArchivedWorkflowExecutionsRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      pageSize: {
                        type: "int32",
                        id: 2
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 3
                      },
                      query: {
                        type: "string",
                        id: 4
                      }
                    }
                  },
                  ListArchivedWorkflowExecutionsResponse: {
                    fields: {
                      executions: {
                        rule: "repeated",
                        type: "temporal.api.workflow.v1.WorkflowExecutionInfo",
                        id: 1
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 2
                      }
                    }
                  },
                  ScanWorkflowExecutionsRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      pageSize: {
                        type: "int32",
                        id: 2
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 3
                      },
                      query: {
                        type: "string",
                        id: 4
                      }
                    }
                  },
                  ScanWorkflowExecutionsResponse: {
                    fields: {
                      executions: {
                        rule: "repeated",
                        type: "temporal.api.workflow.v1.WorkflowExecutionInfo",
                        id: 1
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 2
                      }
                    }
                  },
                  CountWorkflowExecutionsRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      query: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  CountWorkflowExecutionsResponse: {
                    fields: {
                      count: {
                        type: "int64",
                        id: 1
                      }
                    }
                  },
                  GetSearchAttributesRequest: {
                    fields: {}
                  },
                  GetSearchAttributesResponse: {
                    fields: {
                      keys: {
                        keyType: "string",
                        type: "temporal.api.enums.v1.IndexedValueType",
                        id: 1
                      }
                    }
                  },
                  RespondQueryTaskCompletedRequest: {
                    fields: {
                      taskToken: {
                        type: "bytes",
                        id: 1
                      },
                      completedType: {
                        type: "temporal.api.enums.v1.QueryResultType",
                        id: 2
                      },
                      queryResult: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 3
                      },
                      errorMessage: {
                        type: "string",
                        id: 4
                      },
                      namespace: {
                        type: "string",
                        id: 6
                      }
                    },
                    reserved: [
                      [
                        5,
                        5
                      ]
                    ]
                  },
                  RespondQueryTaskCompletedResponse: {
                    fields: {}
                  },
                  ResetStickyTaskQueueRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      execution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 2
                      }
                    }
                  },
                  ResetStickyTaskQueueResponse: {
                    fields: {}
                  },
                  QueryWorkflowRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      execution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 2
                      },
                      query: {
                        type: "temporal.api.query.v1.WorkflowQuery",
                        id: 3
                      },
                      queryRejectCondition: {
                        type: "temporal.api.enums.v1.QueryRejectCondition",
                        id: 4
                      }
                    }
                  },
                  QueryWorkflowResponse: {
                    fields: {
                      queryResult: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 1
                      },
                      queryRejected: {
                        type: "temporal.api.query.v1.QueryRejected",
                        id: 2
                      }
                    }
                  },
                  DescribeWorkflowExecutionRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      execution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 2
                      }
                    }
                  },
                  DescribeWorkflowExecutionResponse: {
                    fields: {
                      executionConfig: {
                        type: "temporal.api.workflow.v1.WorkflowExecutionConfig",
                        id: 1
                      },
                      workflowExecutionInfo: {
                        type: "temporal.api.workflow.v1.WorkflowExecutionInfo",
                        id: 2
                      },
                      pendingActivities: {
                        rule: "repeated",
                        type: "temporal.api.workflow.v1.PendingActivityInfo",
                        id: 3
                      },
                      pendingChildren: {
                        rule: "repeated",
                        type: "temporal.api.workflow.v1.PendingChildExecutionInfo",
                        id: 4
                      },
                      pendingWorkflowTask: {
                        type: "temporal.api.workflow.v1.PendingWorkflowTaskInfo",
                        id: 5
                      }
                    }
                  },
                  DescribeTaskQueueRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      taskQueue: {
                        type: "temporal.api.taskqueue.v1.TaskQueue",
                        id: 2
                      },
                      taskQueueType: {
                        type: "temporal.api.enums.v1.TaskQueueType",
                        id: 3
                      },
                      includeTaskQueueStatus: {
                        type: "bool",
                        id: 4
                      }
                    }
                  },
                  DescribeTaskQueueResponse: {
                    fields: {
                      pollers: {
                        rule: "repeated",
                        type: "temporal.api.taskqueue.v1.PollerInfo",
                        id: 1
                      },
                      taskQueueStatus: {
                        type: "temporal.api.taskqueue.v1.TaskQueueStatus",
                        id: 2
                      }
                    }
                  },
                  GetClusterInfoRequest: {
                    fields: {}
                  },
                  GetClusterInfoResponse: {
                    fields: {
                      supportedClients: {
                        keyType: "string",
                        type: "string",
                        id: 1
                      },
                      serverVersion: {
                        type: "string",
                        id: 2
                      },
                      clusterId: {
                        type: "string",
                        id: 3
                      },
                      versionInfo: {
                        type: "temporal.api.version.v1.VersionInfo",
                        id: 4
                      },
                      clusterName: {
                        type: "string",
                        id: 5
                      },
                      historyShardCount: {
                        type: "int32",
                        id: 6
                      },
                      persistenceStore: {
                        type: "string",
                        id: 7
                      },
                      visibilityStore: {
                        type: "string",
                        id: 8
                      }
                    }
                  },
                  GetSystemInfoRequest: {
                    fields: {}
                  },
                  GetSystemInfoResponse: {
                    fields: {
                      serverVersion: {
                        type: "string",
                        id: 1
                      },
                      capabilities: {
                        type: "Capabilities",
                        id: 2
                      }
                    },
                    nested: {
                      Capabilities: {
                        fields: {
                          signalAndQueryHeader: {
                            type: "bool",
                            id: 1
                          },
                          internalErrorDifferentiation: {
                            type: "bool",
                            id: 2
                          },
                          activityFailureIncludeHeartbeat: {
                            type: "bool",
                            id: 3
                          },
                          supportsSchedules: {
                            type: "bool",
                            id: 4
                          },
                          encodedFailureAttributes: {
                            type: "bool",
                            id: 5
                          },
                          buildIdBasedVersioning: {
                            type: "bool",
                            id: 6
                          },
                          upsertMemo: {
                            type: "bool",
                            id: 7
                          },
                          eagerWorkflowStart: {
                            type: "bool",
                            id: 8
                          },
                          sdkMetadata: {
                            type: "bool",
                            id: 9
                          }
                        }
                      }
                    }
                  },
                  ListTaskQueuePartitionsRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      taskQueue: {
                        type: "temporal.api.taskqueue.v1.TaskQueue",
                        id: 2
                      }
                    }
                  },
                  ListTaskQueuePartitionsResponse: {
                    fields: {
                      activityTaskQueuePartitions: {
                        rule: "repeated",
                        type: "temporal.api.taskqueue.v1.TaskQueuePartitionMetadata",
                        id: 1
                      },
                      workflowTaskQueuePartitions: {
                        rule: "repeated",
                        type: "temporal.api.taskqueue.v1.TaskQueuePartitionMetadata",
                        id: 2
                      }
                    }
                  },
                  CreateScheduleRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      scheduleId: {
                        type: "string",
                        id: 2
                      },
                      schedule: {
                        type: "temporal.api.schedule.v1.Schedule",
                        id: 3
                      },
                      initialPatch: {
                        type: "temporal.api.schedule.v1.SchedulePatch",
                        id: 4
                      },
                      identity: {
                        type: "string",
                        id: 5
                      },
                      requestId: {
                        type: "string",
                        id: 6
                      },
                      memo: {
                        type: "temporal.api.common.v1.Memo",
                        id: 7
                      },
                      searchAttributes: {
                        type: "temporal.api.common.v1.SearchAttributes",
                        id: 8
                      }
                    }
                  },
                  CreateScheduleResponse: {
                    fields: {
                      conflictToken: {
                        type: "bytes",
                        id: 1
                      }
                    }
                  },
                  DescribeScheduleRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      scheduleId: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  DescribeScheduleResponse: {
                    fields: {
                      schedule: {
                        type: "temporal.api.schedule.v1.Schedule",
                        id: 1
                      },
                      info: {
                        type: "temporal.api.schedule.v1.ScheduleInfo",
                        id: 2
                      },
                      memo: {
                        type: "temporal.api.common.v1.Memo",
                        id: 3
                      },
                      searchAttributes: {
                        type: "temporal.api.common.v1.SearchAttributes",
                        id: 4
                      },
                      conflictToken: {
                        type: "bytes",
                        id: 5
                      }
                    }
                  },
                  UpdateScheduleRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      scheduleId: {
                        type: "string",
                        id: 2
                      },
                      schedule: {
                        type: "temporal.api.schedule.v1.Schedule",
                        id: 3
                      },
                      conflictToken: {
                        type: "bytes",
                        id: 4
                      },
                      identity: {
                        type: "string",
                        id: 5
                      },
                      requestId: {
                        type: "string",
                        id: 6
                      }
                    }
                  },
                  UpdateScheduleResponse: {
                    fields: {}
                  },
                  PatchScheduleRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      scheduleId: {
                        type: "string",
                        id: 2
                      },
                      patch: {
                        type: "temporal.api.schedule.v1.SchedulePatch",
                        id: 3
                      },
                      identity: {
                        type: "string",
                        id: 4
                      },
                      requestId: {
                        type: "string",
                        id: 5
                      }
                    }
                  },
                  PatchScheduleResponse: {
                    fields: {}
                  },
                  ListScheduleMatchingTimesRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      scheduleId: {
                        type: "string",
                        id: 2
                      },
                      startTime: {
                        type: "google.protobuf.Timestamp",
                        id: 3,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      },
                      endTime: {
                        type: "google.protobuf.Timestamp",
                        id: 4,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      }
                    }
                  },
                  ListScheduleMatchingTimesResponse: {
                    fields: {
                      startTime: {
                        rule: "repeated",
                        type: "google.protobuf.Timestamp",
                        id: 1,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      }
                    }
                  },
                  DeleteScheduleRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      scheduleId: {
                        type: "string",
                        id: 2
                      },
                      identity: {
                        type: "string",
                        id: 3
                      }
                    }
                  },
                  DeleteScheduleResponse: {
                    fields: {}
                  },
                  ListSchedulesRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      maximumPageSize: {
                        type: "int32",
                        id: 2
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 3
                      }
                    }
                  },
                  ListSchedulesResponse: {
                    fields: {
                      schedules: {
                        rule: "repeated",
                        type: "temporal.api.schedule.v1.ScheduleListEntry",
                        id: 1
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 2
                      }
                    }
                  },
                  UpdateWorkerBuildIdCompatibilityRequest: {
                    oneofs: {
                      operation: {
                        oneof: [
                          "addNewBuildIdInNewDefaultSet",
                          "addNewCompatibleBuildId",
                          "promoteSetByBuildId",
                          "promoteBuildIdWithinSet",
                          "mergeSets"
                        ]
                      }
                    },
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      taskQueue: {
                        type: "string",
                        id: 2
                      },
                      addNewBuildIdInNewDefaultSet: {
                        type: "string",
                        id: 3
                      },
                      addNewCompatibleBuildId: {
                        type: "AddNewCompatibleVersion",
                        id: 4
                      },
                      promoteSetByBuildId: {
                        type: "string",
                        id: 5
                      },
                      promoteBuildIdWithinSet: {
                        type: "string",
                        id: 6
                      },
                      mergeSets: {
                        type: "MergeSets",
                        id: 7
                      }
                    },
                    nested: {
                      AddNewCompatibleVersion: {
                        fields: {
                          newBuildId: {
                            type: "string",
                            id: 1
                          },
                          existingCompatibleBuildId: {
                            type: "string",
                            id: 2
                          },
                          makeSetDefault: {
                            type: "bool",
                            id: 3
                          }
                        }
                      },
                      MergeSets: {
                        fields: {
                          primarySetBuildId: {
                            type: "string",
                            id: 1
                          },
                          secondarySetBuildId: {
                            type: "string",
                            id: 2
                          }
                        }
                      }
                    }
                  },
                  UpdateWorkerBuildIdCompatibilityResponse: {
                    fields: {
                      versionSetId: {
                        type: "string",
                        id: 1
                      }
                    }
                  },
                  GetWorkerBuildIdCompatibilityRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      taskQueue: {
                        type: "string",
                        id: 2
                      },
                      maxSets: {
                        type: "int32",
                        id: 3
                      }
                    }
                  },
                  GetWorkerBuildIdCompatibilityResponse: {
                    fields: {
                      majorVersionSets: {
                        rule: "repeated",
                        type: "temporal.api.taskqueue.v1.CompatibleVersionSet",
                        id: 1
                      }
                    }
                  },
                  GetWorkerTaskReachabilityRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      buildIds: {
                        rule: "repeated",
                        type: "string",
                        id: 2
                      },
                      taskQueues: {
                        rule: "repeated",
                        type: "string",
                        id: 3
                      },
                      reachability: {
                        type: "temporal.api.enums.v1.TaskReachability",
                        id: 4
                      }
                    }
                  },
                  GetWorkerTaskReachabilityResponse: {
                    fields: {
                      buildIdReachability: {
                        rule: "repeated",
                        type: "temporal.api.taskqueue.v1.BuildIdReachability",
                        id: 1
                      }
                    }
                  },
                  UpdateWorkflowExecutionRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 2
                      },
                      firstExecutionRunId: {
                        type: "string",
                        id: 3
                      },
                      waitPolicy: {
                        type: "temporal.api.update.v1.WaitPolicy",
                        id: 4
                      },
                      request: {
                        type: "temporal.api.update.v1.Request",
                        id: 5
                      }
                    }
                  },
                  UpdateWorkflowExecutionResponse: {
                    fields: {
                      updateRef: {
                        type: "temporal.api.update.v1.UpdateRef",
                        id: 1
                      },
                      outcome: {
                        type: "temporal.api.update.v1.Outcome",
                        id: 2
                      }
                    }
                  },
                  StartBatchOperationRequest: {
                    oneofs: {
                      operation: {
                        oneof: [
                          "terminationOperation",
                          "signalOperation",
                          "cancellationOperation",
                          "deletionOperation",
                          "resetOperation"
                        ]
                      }
                    },
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      visibilityQuery: {
                        type: "string",
                        id: 2
                      },
                      jobId: {
                        type: "string",
                        id: 3
                      },
                      reason: {
                        type: "string",
                        id: 4
                      },
                      executions: {
                        rule: "repeated",
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 5
                      },
                      terminationOperation: {
                        type: "temporal.api.batch.v1.BatchOperationTermination",
                        id: 10
                      },
                      signalOperation: {
                        type: "temporal.api.batch.v1.BatchOperationSignal",
                        id: 11
                      },
                      cancellationOperation: {
                        type: "temporal.api.batch.v1.BatchOperationCancellation",
                        id: 12
                      },
                      deletionOperation: {
                        type: "temporal.api.batch.v1.BatchOperationDeletion",
                        id: 13
                      },
                      resetOperation: {
                        type: "temporal.api.batch.v1.BatchOperationReset",
                        id: 14
                      }
                    }
                  },
                  StartBatchOperationResponse: {
                    fields: {}
                  },
                  StopBatchOperationRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      jobId: {
                        type: "string",
                        id: 2
                      },
                      reason: {
                        type: "string",
                        id: 3
                      },
                      identity: {
                        type: "string",
                        id: 4
                      }
                    }
                  },
                  StopBatchOperationResponse: {
                    fields: {}
                  },
                  DescribeBatchOperationRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      jobId: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  DescribeBatchOperationResponse: {
                    fields: {
                      operationType: {
                        type: "temporal.api.enums.v1.BatchOperationType",
                        id: 1
                      },
                      jobId: {
                        type: "string",
                        id: 2
                      },
                      state: {
                        type: "temporal.api.enums.v1.BatchOperationState",
                        id: 3
                      },
                      startTime: {
                        type: "google.protobuf.Timestamp",
                        id: 4,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      },
                      closeTime: {
                        type: "google.protobuf.Timestamp",
                        id: 5,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      },
                      totalOperationCount: {
                        type: "int64",
                        id: 6
                      },
                      completeOperationCount: {
                        type: "int64",
                        id: 7
                      },
                      failureOperationCount: {
                        type: "int64",
                        id: 8
                      },
                      identity: {
                        type: "string",
                        id: 9
                      },
                      reason: {
                        type: "string",
                        id: 10
                      }
                    }
                  },
                  ListBatchOperationsRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      pageSize: {
                        type: "int32",
                        id: 2
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 3
                      }
                    }
                  },
                  ListBatchOperationsResponse: {
                    fields: {
                      operationInfo: {
                        rule: "repeated",
                        type: "temporal.api.batch.v1.BatchOperationInfo",
                        id: 1
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 2
                      }
                    }
                  },
                  PollWorkflowExecutionUpdateRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      updateRef: {
                        type: "temporal.api.update.v1.UpdateRef",
                        id: 2
                      },
                      identity: {
                        type: "string",
                        id: 3
                      },
                      waitPolicy: {
                        type: "temporal.api.update.v1.WaitPolicy",
                        id: 4
                      }
                    }
                  },
                  PollWorkflowExecutionUpdateResponse: {
                    fields: {
                      outcome: {
                        type: "temporal.api.update.v1.Outcome",
                        id: 1
                      }
                    }
                  }
                }
              }
            }
          },
          history: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/history/v1;history",
                  java_package: "io.temporal.api.history.v1",
                  java_multiple_files: true,
                  java_outer_classname: "MessageProto",
                  ruby_package: "Temporalio::Api::History::V1",
                  csharp_namespace: "Temporalio.Api.History.V1"
                },
                nested: {
                  WorkflowExecutionStartedEventAttributes: {
                    fields: {
                      workflowType: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 1
                      },
                      parentWorkflowNamespace: {
                        type: "string",
                        id: 2
                      },
                      parentWorkflowNamespaceId: {
                        type: "string",
                        id: 27
                      },
                      parentWorkflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 3
                      },
                      parentInitiatedEventId: {
                        type: "int64",
                        id: 4
                      },
                      taskQueue: {
                        type: "temporal.api.taskqueue.v1.TaskQueue",
                        id: 5
                      },
                      input: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 6
                      },
                      workflowExecutionTimeout: {
                        type: "google.protobuf.Duration",
                        id: 7,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      workflowRunTimeout: {
                        type: "google.protobuf.Duration",
                        id: 8,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      workflowTaskTimeout: {
                        type: "google.protobuf.Duration",
                        id: 9,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      continuedExecutionRunId: {
                        type: "string",
                        id: 10
                      },
                      initiator: {
                        type: "temporal.api.enums.v1.ContinueAsNewInitiator",
                        id: 11
                      },
                      continuedFailure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 12
                      },
                      lastCompletionResult: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 13
                      },
                      originalExecutionRunId: {
                        type: "string",
                        id: 14
                      },
                      identity: {
                        type: "string",
                        id: 15
                      },
                      firstExecutionRunId: {
                        type: "string",
                        id: 16
                      },
                      retryPolicy: {
                        type: "temporal.api.common.v1.RetryPolicy",
                        id: 17
                      },
                      attempt: {
                        type: "int32",
                        id: 18
                      },
                      workflowExecutionExpirationTime: {
                        type: "google.protobuf.Timestamp",
                        id: 19,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      },
                      cronSchedule: {
                        type: "string",
                        id: 20
                      },
                      firstWorkflowTaskBackoff: {
                        type: "google.protobuf.Duration",
                        id: 21,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      memo: {
                        type: "temporal.api.common.v1.Memo",
                        id: 22
                      },
                      searchAttributes: {
                        type: "temporal.api.common.v1.SearchAttributes",
                        id: 23
                      },
                      prevAutoResetPoints: {
                        type: "temporal.api.workflow.v1.ResetPoints",
                        id: 24
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 25
                      },
                      parentInitiatedEventVersion: {
                        type: "int64",
                        id: 26
                      },
                      workflowId: {
                        type: "string",
                        id: 28
                      },
                      sourceVersionStamp: {
                        type: "temporal.api.common.v1.WorkerVersionStamp",
                        id: 29
                      }
                    }
                  },
                  WorkflowExecutionCompletedEventAttributes: {
                    fields: {
                      result: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 1
                      },
                      workflowTaskCompletedEventId: {
                        type: "int64",
                        id: 2
                      },
                      newExecutionRunId: {
                        type: "string",
                        id: 3
                      }
                    }
                  },
                  WorkflowExecutionFailedEventAttributes: {
                    fields: {
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 1
                      },
                      retryState: {
                        type: "temporal.api.enums.v1.RetryState",
                        id: 2
                      },
                      workflowTaskCompletedEventId: {
                        type: "int64",
                        id: 3
                      },
                      newExecutionRunId: {
                        type: "string",
                        id: 4
                      }
                    }
                  },
                  WorkflowExecutionTimedOutEventAttributes: {
                    fields: {
                      retryState: {
                        type: "temporal.api.enums.v1.RetryState",
                        id: 1
                      },
                      newExecutionRunId: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  WorkflowExecutionContinuedAsNewEventAttributes: {
                    fields: {
                      newExecutionRunId: {
                        type: "string",
                        id: 1
                      },
                      workflowType: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 2
                      },
                      taskQueue: {
                        type: "temporal.api.taskqueue.v1.TaskQueue",
                        id: 3
                      },
                      input: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 4
                      },
                      workflowRunTimeout: {
                        type: "google.protobuf.Duration",
                        id: 5,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      workflowTaskTimeout: {
                        type: "google.protobuf.Duration",
                        id: 6,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      workflowTaskCompletedEventId: {
                        type: "int64",
                        id: 7
                      },
                      backoffStartInterval: {
                        type: "google.protobuf.Duration",
                        id: 8,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      initiator: {
                        type: "temporal.api.enums.v1.ContinueAsNewInitiator",
                        id: 9
                      },
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 10
                      },
                      lastCompletionResult: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 11
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 12
                      },
                      memo: {
                        type: "temporal.api.common.v1.Memo",
                        id: 13
                      },
                      searchAttributes: {
                        type: "temporal.api.common.v1.SearchAttributes",
                        id: 14
                      },
                      useCompatibleVersion: {
                        type: "bool",
                        id: 15
                      }
                    }
                  },
                  WorkflowTaskScheduledEventAttributes: {
                    fields: {
                      taskQueue: {
                        type: "temporal.api.taskqueue.v1.TaskQueue",
                        id: 1
                      },
                      startToCloseTimeout: {
                        type: "google.protobuf.Duration",
                        id: 2,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      attempt: {
                        type: "int32",
                        id: 3
                      }
                    }
                  },
                  WorkflowTaskStartedEventAttributes: {
                    fields: {
                      scheduledEventId: {
                        type: "int64",
                        id: 1
                      },
                      identity: {
                        type: "string",
                        id: 2
                      },
                      requestId: {
                        type: "string",
                        id: 3
                      },
                      suggestContinueAsNew: {
                        type: "bool",
                        id: 4
                      },
                      historySizeBytes: {
                        type: "int64",
                        id: 5
                      }
                    }
                  },
                  WorkflowTaskCompletedEventAttributes: {
                    fields: {
                      scheduledEventId: {
                        type: "int64",
                        id: 1
                      },
                      startedEventId: {
                        type: "int64",
                        id: 2
                      },
                      identity: {
                        type: "string",
                        id: 3
                      },
                      binaryChecksum: {
                        type: "string",
                        id: 4
                      },
                      workerVersion: {
                        type: "temporal.api.common.v1.WorkerVersionStamp",
                        id: 5
                      },
                      sdkMetadata: {
                        type: "temporal.api.sdk.v1.WorkflowTaskCompletedMetadata",
                        id: 6
                      },
                      meteringMetadata: {
                        type: "temporal.api.common.v1.MeteringMetadata",
                        id: 13
                      }
                    }
                  },
                  WorkflowTaskTimedOutEventAttributes: {
                    fields: {
                      scheduledEventId: {
                        type: "int64",
                        id: 1
                      },
                      startedEventId: {
                        type: "int64",
                        id: 2
                      },
                      timeoutType: {
                        type: "temporal.api.enums.v1.TimeoutType",
                        id: 3
                      }
                    }
                  },
                  WorkflowTaskFailedEventAttributes: {
                    fields: {
                      scheduledEventId: {
                        type: "int64",
                        id: 1
                      },
                      startedEventId: {
                        type: "int64",
                        id: 2
                      },
                      cause: {
                        type: "temporal.api.enums.v1.WorkflowTaskFailedCause",
                        id: 3
                      },
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 4
                      },
                      identity: {
                        type: "string",
                        id: 5
                      },
                      baseRunId: {
                        type: "string",
                        id: 6
                      },
                      newRunId: {
                        type: "string",
                        id: 7
                      },
                      forkEventVersion: {
                        type: "int64",
                        id: 8
                      },
                      binaryChecksum: {
                        type: "string",
                        id: 9
                      },
                      workerVersion: {
                        type: "temporal.api.common.v1.WorkerVersionStamp",
                        id: 10
                      }
                    }
                  },
                  ActivityTaskScheduledEventAttributes: {
                    fields: {
                      activityId: {
                        type: "string",
                        id: 1
                      },
                      activityType: {
                        type: "temporal.api.common.v1.ActivityType",
                        id: 2
                      },
                      taskQueue: {
                        type: "temporal.api.taskqueue.v1.TaskQueue",
                        id: 4
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 5
                      },
                      input: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 6
                      },
                      scheduleToCloseTimeout: {
                        type: "google.protobuf.Duration",
                        id: 7,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      scheduleToStartTimeout: {
                        type: "google.protobuf.Duration",
                        id: 8,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      startToCloseTimeout: {
                        type: "google.protobuf.Duration",
                        id: 9,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      heartbeatTimeout: {
                        type: "google.protobuf.Duration",
                        id: 10,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      workflowTaskCompletedEventId: {
                        type: "int64",
                        id: 11
                      },
                      retryPolicy: {
                        type: "temporal.api.common.v1.RetryPolicy",
                        id: 12
                      },
                      useCompatibleVersion: {
                        type: "bool",
                        id: 13
                      }
                    },
                    reserved: [
                      [
                        3,
                        3
                      ]
                    ]
                  },
                  ActivityTaskStartedEventAttributes: {
                    fields: {
                      scheduledEventId: {
                        type: "int64",
                        id: 1
                      },
                      identity: {
                        type: "string",
                        id: 2
                      },
                      requestId: {
                        type: "string",
                        id: 3
                      },
                      attempt: {
                        type: "int32",
                        id: 4
                      },
                      lastFailure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 5
                      }
                    }
                  },
                  ActivityTaskCompletedEventAttributes: {
                    fields: {
                      result: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 1
                      },
                      scheduledEventId: {
                        type: "int64",
                        id: 2
                      },
                      startedEventId: {
                        type: "int64",
                        id: 3
                      },
                      identity: {
                        type: "string",
                        id: 4
                      },
                      workerVersion: {
                        type: "temporal.api.common.v1.WorkerVersionStamp",
                        id: 5
                      }
                    }
                  },
                  ActivityTaskFailedEventAttributes: {
                    fields: {
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 1
                      },
                      scheduledEventId: {
                        type: "int64",
                        id: 2
                      },
                      startedEventId: {
                        type: "int64",
                        id: 3
                      },
                      identity: {
                        type: "string",
                        id: 4
                      },
                      retryState: {
                        type: "temporal.api.enums.v1.RetryState",
                        id: 5
                      },
                      workerVersion: {
                        type: "temporal.api.common.v1.WorkerVersionStamp",
                        id: 6
                      }
                    }
                  },
                  ActivityTaskTimedOutEventAttributes: {
                    fields: {
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 1
                      },
                      scheduledEventId: {
                        type: "int64",
                        id: 2
                      },
                      startedEventId: {
                        type: "int64",
                        id: 3
                      },
                      retryState: {
                        type: "temporal.api.enums.v1.RetryState",
                        id: 4
                      }
                    }
                  },
                  ActivityTaskCancelRequestedEventAttributes: {
                    fields: {
                      scheduledEventId: {
                        type: "int64",
                        id: 1
                      },
                      workflowTaskCompletedEventId: {
                        type: "int64",
                        id: 2
                      }
                    }
                  },
                  ActivityTaskCanceledEventAttributes: {
                    fields: {
                      details: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 1
                      },
                      latestCancelRequestedEventId: {
                        type: "int64",
                        id: 2
                      },
                      scheduledEventId: {
                        type: "int64",
                        id: 3
                      },
                      startedEventId: {
                        type: "int64",
                        id: 4
                      },
                      identity: {
                        type: "string",
                        id: 5
                      },
                      workerVersion: {
                        type: "temporal.api.common.v1.WorkerVersionStamp",
                        id: 6
                      }
                    }
                  },
                  TimerStartedEventAttributes: {
                    fields: {
                      timerId: {
                        type: "string",
                        id: 1
                      },
                      startToFireTimeout: {
                        type: "google.protobuf.Duration",
                        id: 2,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      workflowTaskCompletedEventId: {
                        type: "int64",
                        id: 3
                      }
                    }
                  },
                  TimerFiredEventAttributes: {
                    fields: {
                      timerId: {
                        type: "string",
                        id: 1
                      },
                      startedEventId: {
                        type: "int64",
                        id: 2
                      }
                    }
                  },
                  TimerCanceledEventAttributes: {
                    fields: {
                      timerId: {
                        type: "string",
                        id: 1
                      },
                      startedEventId: {
                        type: "int64",
                        id: 2
                      },
                      workflowTaskCompletedEventId: {
                        type: "int64",
                        id: 3
                      },
                      identity: {
                        type: "string",
                        id: 4
                      }
                    }
                  },
                  WorkflowExecutionCancelRequestedEventAttributes: {
                    fields: {
                      cause: {
                        type: "string",
                        id: 1
                      },
                      externalInitiatedEventId: {
                        type: "int64",
                        id: 2
                      },
                      externalWorkflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 3
                      },
                      identity: {
                        type: "string",
                        id: 4
                      }
                    }
                  },
                  WorkflowExecutionCanceledEventAttributes: {
                    fields: {
                      workflowTaskCompletedEventId: {
                        type: "int64",
                        id: 1
                      },
                      details: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 2
                      }
                    }
                  },
                  MarkerRecordedEventAttributes: {
                    fields: {
                      markerName: {
                        type: "string",
                        id: 1
                      },
                      details: {
                        keyType: "string",
                        type: "temporal.api.common.v1.Payloads",
                        id: 2
                      },
                      workflowTaskCompletedEventId: {
                        type: "int64",
                        id: 3
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 4
                      },
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 5
                      }
                    }
                  },
                  WorkflowExecutionSignaledEventAttributes: {
                    fields: {
                      signalName: {
                        type: "string",
                        id: 1
                      },
                      input: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 2
                      },
                      identity: {
                        type: "string",
                        id: 3
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 4
                      },
                      skipGenerateWorkflowTask: {
                        type: "bool",
                        id: 5
                      }
                    }
                  },
                  WorkflowExecutionTerminatedEventAttributes: {
                    fields: {
                      reason: {
                        type: "string",
                        id: 1
                      },
                      details: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 2
                      },
                      identity: {
                        type: "string",
                        id: 3
                      }
                    }
                  },
                  RequestCancelExternalWorkflowExecutionInitiatedEventAttributes: {
                    fields: {
                      workflowTaskCompletedEventId: {
                        type: "int64",
                        id: 1
                      },
                      namespace: {
                        type: "string",
                        id: 2
                      },
                      namespaceId: {
                        type: "string",
                        id: 7
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 3
                      },
                      control: {
                        type: "string",
                        id: 4
                      },
                      childWorkflowOnly: {
                        type: "bool",
                        id: 5
                      },
                      reason: {
                        type: "string",
                        id: 6
                      }
                    }
                  },
                  RequestCancelExternalWorkflowExecutionFailedEventAttributes: {
                    fields: {
                      cause: {
                        type: "temporal.api.enums.v1.CancelExternalWorkflowExecutionFailedCause",
                        id: 1
                      },
                      workflowTaskCompletedEventId: {
                        type: "int64",
                        id: 2
                      },
                      namespace: {
                        type: "string",
                        id: 3
                      },
                      namespaceId: {
                        type: "string",
                        id: 7
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 4
                      },
                      initiatedEventId: {
                        type: "int64",
                        id: 5
                      },
                      control: {
                        type: "string",
                        id: 6
                      }
                    }
                  },
                  ExternalWorkflowExecutionCancelRequestedEventAttributes: {
                    fields: {
                      initiatedEventId: {
                        type: "int64",
                        id: 1
                      },
                      namespace: {
                        type: "string",
                        id: 2
                      },
                      namespaceId: {
                        type: "string",
                        id: 4
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 3
                      }
                    }
                  },
                  SignalExternalWorkflowExecutionInitiatedEventAttributes: {
                    fields: {
                      workflowTaskCompletedEventId: {
                        type: "int64",
                        id: 1
                      },
                      namespace: {
                        type: "string",
                        id: 2
                      },
                      namespaceId: {
                        type: "string",
                        id: 9
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 3
                      },
                      signalName: {
                        type: "string",
                        id: 4
                      },
                      input: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 5
                      },
                      control: {
                        type: "string",
                        id: 6
                      },
                      childWorkflowOnly: {
                        type: "bool",
                        id: 7
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 8
                      }
                    }
                  },
                  SignalExternalWorkflowExecutionFailedEventAttributes: {
                    fields: {
                      cause: {
                        type: "temporal.api.enums.v1.SignalExternalWorkflowExecutionFailedCause",
                        id: 1
                      },
                      workflowTaskCompletedEventId: {
                        type: "int64",
                        id: 2
                      },
                      namespace: {
                        type: "string",
                        id: 3
                      },
                      namespaceId: {
                        type: "string",
                        id: 7
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 4
                      },
                      initiatedEventId: {
                        type: "int64",
                        id: 5
                      },
                      control: {
                        type: "string",
                        id: 6
                      }
                    }
                  },
                  ExternalWorkflowExecutionSignaledEventAttributes: {
                    fields: {
                      initiatedEventId: {
                        type: "int64",
                        id: 1
                      },
                      namespace: {
                        type: "string",
                        id: 2
                      },
                      namespaceId: {
                        type: "string",
                        id: 5
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 3
                      },
                      control: {
                        type: "string",
                        id: 4
                      }
                    }
                  },
                  UpsertWorkflowSearchAttributesEventAttributes: {
                    fields: {
                      workflowTaskCompletedEventId: {
                        type: "int64",
                        id: 1
                      },
                      searchAttributes: {
                        type: "temporal.api.common.v1.SearchAttributes",
                        id: 2
                      }
                    }
                  },
                  WorkflowPropertiesModifiedEventAttributes: {
                    fields: {
                      workflowTaskCompletedEventId: {
                        type: "int64",
                        id: 1
                      },
                      upsertedMemo: {
                        type: "temporal.api.common.v1.Memo",
                        id: 2
                      }
                    }
                  },
                  StartChildWorkflowExecutionInitiatedEventAttributes: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      namespaceId: {
                        type: "string",
                        id: 18
                      },
                      workflowId: {
                        type: "string",
                        id: 2
                      },
                      workflowType: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 3
                      },
                      taskQueue: {
                        type: "temporal.api.taskqueue.v1.TaskQueue",
                        id: 4
                      },
                      input: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 5
                      },
                      workflowExecutionTimeout: {
                        type: "google.protobuf.Duration",
                        id: 6,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      workflowRunTimeout: {
                        type: "google.protobuf.Duration",
                        id: 7,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      workflowTaskTimeout: {
                        type: "google.protobuf.Duration",
                        id: 8,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      parentClosePolicy: {
                        type: "temporal.api.enums.v1.ParentClosePolicy",
                        id: 9
                      },
                      control: {
                        type: "string",
                        id: 10
                      },
                      workflowTaskCompletedEventId: {
                        type: "int64",
                        id: 11
                      },
                      workflowIdReusePolicy: {
                        type: "temporal.api.enums.v1.WorkflowIdReusePolicy",
                        id: 12
                      },
                      retryPolicy: {
                        type: "temporal.api.common.v1.RetryPolicy",
                        id: 13
                      },
                      cronSchedule: {
                        type: "string",
                        id: 14
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 15
                      },
                      memo: {
                        type: "temporal.api.common.v1.Memo",
                        id: 16
                      },
                      searchAttributes: {
                        type: "temporal.api.common.v1.SearchAttributes",
                        id: 17
                      },
                      useCompatibleVersion: {
                        type: "bool",
                        id: 19
                      }
                    }
                  },
                  StartChildWorkflowExecutionFailedEventAttributes: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      namespaceId: {
                        type: "string",
                        id: 8
                      },
                      workflowId: {
                        type: "string",
                        id: 2
                      },
                      workflowType: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 3
                      },
                      cause: {
                        type: "temporal.api.enums.v1.StartChildWorkflowExecutionFailedCause",
                        id: 4
                      },
                      control: {
                        type: "string",
                        id: 5
                      },
                      initiatedEventId: {
                        type: "int64",
                        id: 6
                      },
                      workflowTaskCompletedEventId: {
                        type: "int64",
                        id: 7
                      }
                    }
                  },
                  ChildWorkflowExecutionStartedEventAttributes: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      namespaceId: {
                        type: "string",
                        id: 6
                      },
                      initiatedEventId: {
                        type: "int64",
                        id: 2
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 3
                      },
                      workflowType: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 4
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 5
                      }
                    }
                  },
                  ChildWorkflowExecutionCompletedEventAttributes: {
                    fields: {
                      result: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 1
                      },
                      namespace: {
                        type: "string",
                        id: 2
                      },
                      namespaceId: {
                        type: "string",
                        id: 7
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 3
                      },
                      workflowType: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 4
                      },
                      initiatedEventId: {
                        type: "int64",
                        id: 5
                      },
                      startedEventId: {
                        type: "int64",
                        id: 6
                      }
                    }
                  },
                  ChildWorkflowExecutionFailedEventAttributes: {
                    fields: {
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 1
                      },
                      namespace: {
                        type: "string",
                        id: 2
                      },
                      namespaceId: {
                        type: "string",
                        id: 8
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 3
                      },
                      workflowType: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 4
                      },
                      initiatedEventId: {
                        type: "int64",
                        id: 5
                      },
                      startedEventId: {
                        type: "int64",
                        id: 6
                      },
                      retryState: {
                        type: "temporal.api.enums.v1.RetryState",
                        id: 7
                      }
                    }
                  },
                  ChildWorkflowExecutionCanceledEventAttributes: {
                    fields: {
                      details: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 1
                      },
                      namespace: {
                        type: "string",
                        id: 2
                      },
                      namespaceId: {
                        type: "string",
                        id: 7
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 3
                      },
                      workflowType: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 4
                      },
                      initiatedEventId: {
                        type: "int64",
                        id: 5
                      },
                      startedEventId: {
                        type: "int64",
                        id: 6
                      }
                    }
                  },
                  ChildWorkflowExecutionTimedOutEventAttributes: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      namespaceId: {
                        type: "string",
                        id: 7
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 2
                      },
                      workflowType: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 3
                      },
                      initiatedEventId: {
                        type: "int64",
                        id: 4
                      },
                      startedEventId: {
                        type: "int64",
                        id: 5
                      },
                      retryState: {
                        type: "temporal.api.enums.v1.RetryState",
                        id: 6
                      }
                    }
                  },
                  ChildWorkflowExecutionTerminatedEventAttributes: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      namespaceId: {
                        type: "string",
                        id: 6
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 2
                      },
                      workflowType: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 3
                      },
                      initiatedEventId: {
                        type: "int64",
                        id: 4
                      },
                      startedEventId: {
                        type: "int64",
                        id: 5
                      }
                    }
                  },
                  WorkflowPropertiesModifiedExternallyEventAttributes: {
                    fields: {
                      newTaskQueue: {
                        type: "string",
                        id: 1
                      },
                      newWorkflowTaskTimeout: {
                        type: "google.protobuf.Duration",
                        id: 2,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      newWorkflowRunTimeout: {
                        type: "google.protobuf.Duration",
                        id: 3,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      newWorkflowExecutionTimeout: {
                        type: "google.protobuf.Duration",
                        id: 4,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      upsertedMemo: {
                        type: "temporal.api.common.v1.Memo",
                        id: 5
                      }
                    }
                  },
                  ActivityPropertiesModifiedExternallyEventAttributes: {
                    fields: {
                      scheduledEventId: {
                        type: "int64",
                        id: 1
                      },
                      newRetryPolicy: {
                        type: "temporal.api.common.v1.RetryPolicy",
                        id: 2
                      }
                    }
                  },
                  WorkflowExecutionUpdateAcceptedEventAttributes: {
                    fields: {
                      protocolInstanceId: {
                        type: "string",
                        id: 1
                      },
                      acceptedRequestMessageId: {
                        type: "string",
                        id: 2
                      },
                      acceptedRequestSequencingEventId: {
                        type: "int64",
                        id: 3
                      },
                      acceptedRequest: {
                        type: "temporal.api.update.v1.Request",
                        id: 4
                      }
                    }
                  },
                  WorkflowExecutionUpdateCompletedEventAttributes: {
                    fields: {
                      meta: {
                        type: "temporal.api.update.v1.Meta",
                        id: 1
                      },
                      acceptedEventId: {
                        type: "int64",
                        id: 3
                      },
                      outcome: {
                        type: "temporal.api.update.v1.Outcome",
                        id: 2
                      }
                    }
                  },
                  WorkflowExecutionUpdateRejectedEventAttributes: {
                    fields: {
                      protocolInstanceId: {
                        type: "string",
                        id: 1
                      },
                      rejectedRequestMessageId: {
                        type: "string",
                        id: 2
                      },
                      rejectedRequestSequencingEventId: {
                        type: "int64",
                        id: 3
                      },
                      rejectedRequest: {
                        type: "temporal.api.update.v1.Request",
                        id: 4
                      },
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 5
                      }
                    }
                  },
                  HistoryEvent: {
                    oneofs: {
                      attributes: {
                        oneof: [
                          "workflowExecutionStartedEventAttributes",
                          "workflowExecutionCompletedEventAttributes",
                          "workflowExecutionFailedEventAttributes",
                          "workflowExecutionTimedOutEventAttributes",
                          "workflowTaskScheduledEventAttributes",
                          "workflowTaskStartedEventAttributes",
                          "workflowTaskCompletedEventAttributes",
                          "workflowTaskTimedOutEventAttributes",
                          "workflowTaskFailedEventAttributes",
                          "activityTaskScheduledEventAttributes",
                          "activityTaskStartedEventAttributes",
                          "activityTaskCompletedEventAttributes",
                          "activityTaskFailedEventAttributes",
                          "activityTaskTimedOutEventAttributes",
                          "timerStartedEventAttributes",
                          "timerFiredEventAttributes",
                          "activityTaskCancelRequestedEventAttributes",
                          "activityTaskCanceledEventAttributes",
                          "timerCanceledEventAttributes",
                          "markerRecordedEventAttributes",
                          "workflowExecutionSignaledEventAttributes",
                          "workflowExecutionTerminatedEventAttributes",
                          "workflowExecutionCancelRequestedEventAttributes",
                          "workflowExecutionCanceledEventAttributes",
                          "requestCancelExternalWorkflowExecutionInitiatedEventAttributes",
                          "requestCancelExternalWorkflowExecutionFailedEventAttributes",
                          "externalWorkflowExecutionCancelRequestedEventAttributes",
                          "workflowExecutionContinuedAsNewEventAttributes",
                          "startChildWorkflowExecutionInitiatedEventAttributes",
                          "startChildWorkflowExecutionFailedEventAttributes",
                          "childWorkflowExecutionStartedEventAttributes",
                          "childWorkflowExecutionCompletedEventAttributes",
                          "childWorkflowExecutionFailedEventAttributes",
                          "childWorkflowExecutionCanceledEventAttributes",
                          "childWorkflowExecutionTimedOutEventAttributes",
                          "childWorkflowExecutionTerminatedEventAttributes",
                          "signalExternalWorkflowExecutionInitiatedEventAttributes",
                          "signalExternalWorkflowExecutionFailedEventAttributes",
                          "externalWorkflowExecutionSignaledEventAttributes",
                          "upsertWorkflowSearchAttributesEventAttributes",
                          "workflowExecutionUpdateAcceptedEventAttributes",
                          "workflowExecutionUpdateRejectedEventAttributes",
                          "workflowExecutionUpdateCompletedEventAttributes",
                          "workflowPropertiesModifiedExternallyEventAttributes",
                          "activityPropertiesModifiedExternallyEventAttributes",
                          "workflowPropertiesModifiedEventAttributes"
                        ]
                      }
                    },
                    fields: {
                      eventId: {
                        type: "int64",
                        id: 1
                      },
                      eventTime: {
                        type: "google.protobuf.Timestamp",
                        id: 2,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      },
                      eventType: {
                        type: "temporal.api.enums.v1.EventType",
                        id: 3
                      },
                      version: {
                        type: "int64",
                        id: 4
                      },
                      taskId: {
                        type: "int64",
                        id: 5
                      },
                      workerMayIgnore: {
                        type: "bool",
                        id: 300
                      },
                      workflowExecutionStartedEventAttributes: {
                        type: "WorkflowExecutionStartedEventAttributes",
                        id: 6
                      },
                      workflowExecutionCompletedEventAttributes: {
                        type: "WorkflowExecutionCompletedEventAttributes",
                        id: 7
                      },
                      workflowExecutionFailedEventAttributes: {
                        type: "WorkflowExecutionFailedEventAttributes",
                        id: 8
                      },
                      workflowExecutionTimedOutEventAttributes: {
                        type: "WorkflowExecutionTimedOutEventAttributes",
                        id: 9
                      },
                      workflowTaskScheduledEventAttributes: {
                        type: "WorkflowTaskScheduledEventAttributes",
                        id: 10
                      },
                      workflowTaskStartedEventAttributes: {
                        type: "WorkflowTaskStartedEventAttributes",
                        id: 11
                      },
                      workflowTaskCompletedEventAttributes: {
                        type: "WorkflowTaskCompletedEventAttributes",
                        id: 12
                      },
                      workflowTaskTimedOutEventAttributes: {
                        type: "WorkflowTaskTimedOutEventAttributes",
                        id: 13
                      },
                      workflowTaskFailedEventAttributes: {
                        type: "WorkflowTaskFailedEventAttributes",
                        id: 14
                      },
                      activityTaskScheduledEventAttributes: {
                        type: "ActivityTaskScheduledEventAttributes",
                        id: 15
                      },
                      activityTaskStartedEventAttributes: {
                        type: "ActivityTaskStartedEventAttributes",
                        id: 16
                      },
                      activityTaskCompletedEventAttributes: {
                        type: "ActivityTaskCompletedEventAttributes",
                        id: 17
                      },
                      activityTaskFailedEventAttributes: {
                        type: "ActivityTaskFailedEventAttributes",
                        id: 18
                      },
                      activityTaskTimedOutEventAttributes: {
                        type: "ActivityTaskTimedOutEventAttributes",
                        id: 19
                      },
                      timerStartedEventAttributes: {
                        type: "TimerStartedEventAttributes",
                        id: 20
                      },
                      timerFiredEventAttributes: {
                        type: "TimerFiredEventAttributes",
                        id: 21
                      },
                      activityTaskCancelRequestedEventAttributes: {
                        type: "ActivityTaskCancelRequestedEventAttributes",
                        id: 22
                      },
                      activityTaskCanceledEventAttributes: {
                        type: "ActivityTaskCanceledEventAttributes",
                        id: 23
                      },
                      timerCanceledEventAttributes: {
                        type: "TimerCanceledEventAttributes",
                        id: 24
                      },
                      markerRecordedEventAttributes: {
                        type: "MarkerRecordedEventAttributes",
                        id: 25
                      },
                      workflowExecutionSignaledEventAttributes: {
                        type: "WorkflowExecutionSignaledEventAttributes",
                        id: 26
                      },
                      workflowExecutionTerminatedEventAttributes: {
                        type: "WorkflowExecutionTerminatedEventAttributes",
                        id: 27
                      },
                      workflowExecutionCancelRequestedEventAttributes: {
                        type: "WorkflowExecutionCancelRequestedEventAttributes",
                        id: 28
                      },
                      workflowExecutionCanceledEventAttributes: {
                        type: "WorkflowExecutionCanceledEventAttributes",
                        id: 29
                      },
                      requestCancelExternalWorkflowExecutionInitiatedEventAttributes: {
                        type: "RequestCancelExternalWorkflowExecutionInitiatedEventAttributes",
                        id: 30
                      },
                      requestCancelExternalWorkflowExecutionFailedEventAttributes: {
                        type: "RequestCancelExternalWorkflowExecutionFailedEventAttributes",
                        id: 31
                      },
                      externalWorkflowExecutionCancelRequestedEventAttributes: {
                        type: "ExternalWorkflowExecutionCancelRequestedEventAttributes",
                        id: 32
                      },
                      workflowExecutionContinuedAsNewEventAttributes: {
                        type: "WorkflowExecutionContinuedAsNewEventAttributes",
                        id: 33
                      },
                      startChildWorkflowExecutionInitiatedEventAttributes: {
                        type: "StartChildWorkflowExecutionInitiatedEventAttributes",
                        id: 34
                      },
                      startChildWorkflowExecutionFailedEventAttributes: {
                        type: "StartChildWorkflowExecutionFailedEventAttributes",
                        id: 35
                      },
                      childWorkflowExecutionStartedEventAttributes: {
                        type: "ChildWorkflowExecutionStartedEventAttributes",
                        id: 36
                      },
                      childWorkflowExecutionCompletedEventAttributes: {
                        type: "ChildWorkflowExecutionCompletedEventAttributes",
                        id: 37
                      },
                      childWorkflowExecutionFailedEventAttributes: {
                        type: "ChildWorkflowExecutionFailedEventAttributes",
                        id: 38
                      },
                      childWorkflowExecutionCanceledEventAttributes: {
                        type: "ChildWorkflowExecutionCanceledEventAttributes",
                        id: 39
                      },
                      childWorkflowExecutionTimedOutEventAttributes: {
                        type: "ChildWorkflowExecutionTimedOutEventAttributes",
                        id: 40
                      },
                      childWorkflowExecutionTerminatedEventAttributes: {
                        type: "ChildWorkflowExecutionTerminatedEventAttributes",
                        id: 41
                      },
                      signalExternalWorkflowExecutionInitiatedEventAttributes: {
                        type: "SignalExternalWorkflowExecutionInitiatedEventAttributes",
                        id: 42
                      },
                      signalExternalWorkflowExecutionFailedEventAttributes: {
                        type: "SignalExternalWorkflowExecutionFailedEventAttributes",
                        id: 43
                      },
                      externalWorkflowExecutionSignaledEventAttributes: {
                        type: "ExternalWorkflowExecutionSignaledEventAttributes",
                        id: 44
                      },
                      upsertWorkflowSearchAttributesEventAttributes: {
                        type: "UpsertWorkflowSearchAttributesEventAttributes",
                        id: 45
                      },
                      workflowExecutionUpdateAcceptedEventAttributes: {
                        type: "WorkflowExecutionUpdateAcceptedEventAttributes",
                        id: 46
                      },
                      workflowExecutionUpdateRejectedEventAttributes: {
                        type: "WorkflowExecutionUpdateRejectedEventAttributes",
                        id: 47
                      },
                      workflowExecutionUpdateCompletedEventAttributes: {
                        type: "WorkflowExecutionUpdateCompletedEventAttributes",
                        id: 48
                      },
                      workflowPropertiesModifiedExternallyEventAttributes: {
                        type: "WorkflowPropertiesModifiedExternallyEventAttributes",
                        id: 49
                      },
                      activityPropertiesModifiedExternallyEventAttributes: {
                        type: "ActivityPropertiesModifiedExternallyEventAttributes",
                        id: 50
                      },
                      workflowPropertiesModifiedEventAttributes: {
                        type: "WorkflowPropertiesModifiedEventAttributes",
                        id: 51
                      }
                    }
                  },
                  History: {
                    fields: {
                      events: {
                        rule: "repeated",
                        type: "HistoryEvent",
                        id: 1
                      }
                    }
                  }
                }
              }
            }
          },
          taskqueue: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/taskqueue/v1;taskqueue",
                  java_package: "io.temporal.api.taskqueue.v1",
                  java_multiple_files: true,
                  java_outer_classname: "MessageProto",
                  ruby_package: "Temporalio::Api::TaskQueue::V1",
                  csharp_namespace: "Temporalio.Api.TaskQueue.V1"
                },
                nested: {
                  TaskQueue: {
                    fields: {
                      name: {
                        type: "string",
                        id: 1
                      },
                      kind: {
                        type: "temporal.api.enums.v1.TaskQueueKind",
                        id: 2
                      },
                      normalName: {
                        type: "string",
                        id: 3
                      }
                    }
                  },
                  TaskQueueMetadata: {
                    fields: {
                      maxTasksPerSecond: {
                        type: "google.protobuf.DoubleValue",
                        id: 1
                      }
                    }
                  },
                  TaskQueueStatus: {
                    fields: {
                      backlogCountHint: {
                        type: "int64",
                        id: 1
                      },
                      readLevel: {
                        type: "int64",
                        id: 2
                      },
                      ackLevel: {
                        type: "int64",
                        id: 3
                      },
                      ratePerSecond: {
                        type: "double",
                        id: 4
                      },
                      taskIdBlock: {
                        type: "TaskIdBlock",
                        id: 5
                      }
                    }
                  },
                  TaskIdBlock: {
                    fields: {
                      startId: {
                        type: "int64",
                        id: 1
                      },
                      endId: {
                        type: "int64",
                        id: 2
                      }
                    }
                  },
                  TaskQueuePartitionMetadata: {
                    fields: {
                      key: {
                        type: "string",
                        id: 1
                      },
                      ownerHostName: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  PollerInfo: {
                    fields: {
                      lastAccessTime: {
                        type: "google.protobuf.Timestamp",
                        id: 1,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      },
                      identity: {
                        type: "string",
                        id: 2
                      },
                      ratePerSecond: {
                        type: "double",
                        id: 3
                      },
                      workerVersionCapabilities: {
                        type: "temporal.api.common.v1.WorkerVersionCapabilities",
                        id: 4
                      }
                    }
                  },
                  StickyExecutionAttributes: {
                    fields: {
                      workerTaskQueue: {
                        type: "TaskQueue",
                        id: 1
                      },
                      scheduleToStartTimeout: {
                        type: "google.protobuf.Duration",
                        id: 2,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      }
                    }
                  },
                  CompatibleVersionSet: {
                    fields: {
                      buildIds: {
                        rule: "repeated",
                        type: "string",
                        id: 1
                      }
                    }
                  },
                  TaskQueueReachability: {
                    fields: {
                      taskQueue: {
                        type: "string",
                        id: 1
                      },
                      reachability: {
                        rule: "repeated",
                        type: "temporal.api.enums.v1.TaskReachability",
                        id: 2
                      }
                    }
                  },
                  BuildIdReachability: {
                    fields: {
                      buildId: {
                        type: "string",
                        id: 1
                      },
                      taskQueueReachability: {
                        rule: "repeated",
                        type: "TaskQueueReachability",
                        id: 2
                      }
                    }
                  }
                }
              }
            }
          },
          update: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/update/v1;update",
                  java_package: "io.temporal.api.update.v1",
                  java_multiple_files: true,
                  java_outer_classname: "MessageProto",
                  ruby_package: "Temporalio::Api::Update::V1",
                  csharp_namespace: "Temporalio.Api.Update.V1"
                },
                nested: {
                  WaitPolicy: {
                    fields: {
                      lifecycleStage: {
                        type: "temporal.api.enums.v1.UpdateWorkflowExecutionLifecycleStage",
                        id: 1
                      }
                    }
                  },
                  UpdateRef: {
                    fields: {
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 1
                      },
                      updateId: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  Outcome: {
                    oneofs: {
                      value: {
                        oneof: [
                          "success",
                          "failure"
                        ]
                      }
                    },
                    fields: {
                      success: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 1
                      },
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 2
                      }
                    }
                  },
                  Meta: {
                    fields: {
                      updateId: {
                        type: "string",
                        id: 1
                      },
                      identity: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  Input: {
                    fields: {
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 1
                      },
                      name: {
                        type: "string",
                        id: 2
                      },
                      args: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 3
                      }
                    }
                  },
                  Request: {
                    fields: {
                      meta: {
                        type: "Meta",
                        id: 1
                      },
                      input: {
                        type: "Input",
                        id: 2
                      }
                    }
                  },
                  Rejection: {
                    fields: {
                      rejectedRequestMessageId: {
                        type: "string",
                        id: 1
                      },
                      rejectedRequestSequencingEventId: {
                        type: "int64",
                        id: 2
                      },
                      rejectedRequest: {
                        type: "Request",
                        id: 3
                      },
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 4
                      }
                    }
                  },
                  Acceptance: {
                    fields: {
                      acceptedRequestMessageId: {
                        type: "string",
                        id: 1
                      },
                      acceptedRequestSequencingEventId: {
                        type: "int64",
                        id: 2
                      },
                      acceptedRequest: {
                        type: "Request",
                        id: 3
                      }
                    }
                  },
                  Response: {
                    fields: {
                      meta: {
                        type: "Meta",
                        id: 1
                      },
                      outcome: {
                        type: "Outcome",
                        id: 2
                      }
                    }
                  }
                }
              }
            }
          },
          workflow: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/workflow/v1;workflow",
                  java_package: "io.temporal.api.workflow.v1",
                  java_multiple_files: true,
                  java_outer_classname: "MessageProto",
                  ruby_package: "Temporalio::Api::Workflow::V1",
                  csharp_namespace: "Temporalio.Api.Workflow.V1"
                },
                nested: {
                  WorkflowExecutionInfo: {
                    fields: {
                      execution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 1
                      },
                      type: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 2
                      },
                      startTime: {
                        type: "google.protobuf.Timestamp",
                        id: 3,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      },
                      closeTime: {
                        type: "google.protobuf.Timestamp",
                        id: 4,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      },
                      status: {
                        type: "temporal.api.enums.v1.WorkflowExecutionStatus",
                        id: 5
                      },
                      historyLength: {
                        type: "int64",
                        id: 6
                      },
                      parentNamespaceId: {
                        type: "string",
                        id: 7
                      },
                      parentExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 8
                      },
                      executionTime: {
                        type: "google.protobuf.Timestamp",
                        id: 9,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      },
                      memo: {
                        type: "temporal.api.common.v1.Memo",
                        id: 10
                      },
                      searchAttributes: {
                        type: "temporal.api.common.v1.SearchAttributes",
                        id: 11
                      },
                      autoResetPoints: {
                        type: "ResetPoints",
                        id: 12
                      },
                      taskQueue: {
                        type: "string",
                        id: 13
                      },
                      stateTransitionCount: {
                        type: "int64",
                        id: 14
                      },
                      historySizeBytes: {
                        type: "int64",
                        id: 15
                      },
                      mostRecentWorkerVersionStamp: {
                        type: "temporal.api.common.v1.WorkerVersionStamp",
                        id: 16
                      }
                    }
                  },
                  WorkflowExecutionConfig: {
                    fields: {
                      taskQueue: {
                        type: "temporal.api.taskqueue.v1.TaskQueue",
                        id: 1
                      },
                      workflowExecutionTimeout: {
                        type: "google.protobuf.Duration",
                        id: 2,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      workflowRunTimeout: {
                        type: "google.protobuf.Duration",
                        id: 3,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      defaultWorkflowTaskTimeout: {
                        type: "google.protobuf.Duration",
                        id: 4,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      }
                    }
                  },
                  PendingActivityInfo: {
                    fields: {
                      activityId: {
                        type: "string",
                        id: 1
                      },
                      activityType: {
                        type: "temporal.api.common.v1.ActivityType",
                        id: 2
                      },
                      state: {
                        type: "temporal.api.enums.v1.PendingActivityState",
                        id: 3
                      },
                      heartbeatDetails: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 4
                      },
                      lastHeartbeatTime: {
                        type: "google.protobuf.Timestamp",
                        id: 5,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      },
                      lastStartedTime: {
                        type: "google.protobuf.Timestamp",
                        id: 6,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      },
                      attempt: {
                        type: "int32",
                        id: 7
                      },
                      maximumAttempts: {
                        type: "int32",
                        id: 8
                      },
                      scheduledTime: {
                        type: "google.protobuf.Timestamp",
                        id: 9,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      },
                      expirationTime: {
                        type: "google.protobuf.Timestamp",
                        id: 10,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      },
                      lastFailure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 11
                      },
                      lastWorkerIdentity: {
                        type: "string",
                        id: 12
                      }
                    }
                  },
                  PendingChildExecutionInfo: {
                    fields: {
                      workflowId: {
                        type: "string",
                        id: 1
                      },
                      runId: {
                        type: "string",
                        id: 2
                      },
                      workflowTypeName: {
                        type: "string",
                        id: 3
                      },
                      initiatedId: {
                        type: "int64",
                        id: 4
                      },
                      parentClosePolicy: {
                        type: "temporal.api.enums.v1.ParentClosePolicy",
                        id: 5
                      }
                    }
                  },
                  PendingWorkflowTaskInfo: {
                    fields: {
                      state: {
                        type: "temporal.api.enums.v1.PendingWorkflowTaskState",
                        id: 1
                      },
                      scheduledTime: {
                        type: "google.protobuf.Timestamp",
                        id: 2,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      },
                      originalScheduledTime: {
                        type: "google.protobuf.Timestamp",
                        id: 3,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      },
                      startedTime: {
                        type: "google.protobuf.Timestamp",
                        id: 4,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      },
                      attempt: {
                        type: "int32",
                        id: 5
                      }
                    }
                  },
                  ResetPoints: {
                    fields: {
                      points: {
                        rule: "repeated",
                        type: "ResetPointInfo",
                        id: 1
                      }
                    }
                  },
                  ResetPointInfo: {
                    fields: {
                      binaryChecksum: {
                        type: "string",
                        id: 1
                      },
                      runId: {
                        type: "string",
                        id: 2
                      },
                      firstWorkflowTaskCompletedId: {
                        type: "int64",
                        id: 3
                      },
                      createTime: {
                        type: "google.protobuf.Timestamp",
                        id: 4,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      },
                      expireTime: {
                        type: "google.protobuf.Timestamp",
                        id: 5,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      },
                      resettable: {
                        type: "bool",
                        id: 6
                      }
                    }
                  },
                  NewWorkflowExecutionInfo: {
                    fields: {
                      workflowId: {
                        type: "string",
                        id: 1
                      },
                      workflowType: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 2
                      },
                      taskQueue: {
                        type: "temporal.api.taskqueue.v1.TaskQueue",
                        id: 3
                      },
                      input: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 4
                      },
                      workflowExecutionTimeout: {
                        type: "google.protobuf.Duration",
                        id: 5,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      workflowRunTimeout: {
                        type: "google.protobuf.Duration",
                        id: 6,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      workflowTaskTimeout: {
                        type: "google.protobuf.Duration",
                        id: 7,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      workflowIdReusePolicy: {
                        type: "temporal.api.enums.v1.WorkflowIdReusePolicy",
                        id: 8
                      },
                      retryPolicy: {
                        type: "temporal.api.common.v1.RetryPolicy",
                        id: 9
                      },
                      cronSchedule: {
                        type: "string",
                        id: 10
                      },
                      memo: {
                        type: "temporal.api.common.v1.Memo",
                        id: 11
                      },
                      searchAttributes: {
                        type: "temporal.api.common.v1.SearchAttributes",
                        id: 12
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 13
                      }
                    }
                  }
                }
              }
            }
          },
          sdk: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/sdk/v1;sdk",
                  java_package: "io.temporal.api.sdk.v1",
                  java_multiple_files: true,
                  java_outer_classname: "TaskCompleteMetadataProto",
                  ruby_package: "Temporalio::Api::Sdk::V1",
                  csharp_namespace: "Temporalio.Api.Sdk.V1"
                },
                nested: {
                  WorkflowTaskCompletedMetadata: {
                    fields: {
                      coreUsedFlags: {
                        rule: "repeated",
                        type: "uint32",
                        id: 1
                      },
                      langUsedFlags: {
                        rule: "repeated",
                        type: "uint32",
                        id: 2
                      }
                    }
                  }
                }
              }
            }
          },
          command: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/command/v1;command",
                  java_package: "io.temporal.api.command.v1",
                  java_multiple_files: true,
                  java_outer_classname: "MessageProto",
                  ruby_package: "Temporalio::Api::Command::V1",
                  csharp_namespace: "Temporalio.Api.Command.V1"
                },
                nested: {
                  ScheduleActivityTaskCommandAttributes: {
                    fields: {
                      activityId: {
                        type: "string",
                        id: 1
                      },
                      activityType: {
                        type: "temporal.api.common.v1.ActivityType",
                        id: 2
                      },
                      taskQueue: {
                        type: "temporal.api.taskqueue.v1.TaskQueue",
                        id: 4
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 5
                      },
                      input: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 6
                      },
                      scheduleToCloseTimeout: {
                        type: "google.protobuf.Duration",
                        id: 7,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      scheduleToStartTimeout: {
                        type: "google.protobuf.Duration",
                        id: 8,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      startToCloseTimeout: {
                        type: "google.protobuf.Duration",
                        id: 9,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      heartbeatTimeout: {
                        type: "google.protobuf.Duration",
                        id: 10,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      retryPolicy: {
                        type: "temporal.api.common.v1.RetryPolicy",
                        id: 11
                      },
                      requestEagerExecution: {
                        type: "bool",
                        id: 12
                      },
                      useCompatibleVersion: {
                        type: "bool",
                        id: 13
                      }
                    },
                    reserved: [
                      [
                        3,
                        3
                      ]
                    ]
                  },
                  RequestCancelActivityTaskCommandAttributes: {
                    fields: {
                      scheduledEventId: {
                        type: "int64",
                        id: 1
                      }
                    }
                  },
                  StartTimerCommandAttributes: {
                    fields: {
                      timerId: {
                        type: "string",
                        id: 1
                      },
                      startToFireTimeout: {
                        type: "google.protobuf.Duration",
                        id: 2,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      }
                    }
                  },
                  CompleteWorkflowExecutionCommandAttributes: {
                    fields: {
                      result: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 1
                      }
                    }
                  },
                  FailWorkflowExecutionCommandAttributes: {
                    fields: {
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 1
                      }
                    }
                  },
                  CancelTimerCommandAttributes: {
                    fields: {
                      timerId: {
                        type: "string",
                        id: 1
                      }
                    }
                  },
                  CancelWorkflowExecutionCommandAttributes: {
                    fields: {
                      details: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 1
                      }
                    }
                  },
                  RequestCancelExternalWorkflowExecutionCommandAttributes: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      workflowId: {
                        type: "string",
                        id: 2
                      },
                      runId: {
                        type: "string",
                        id: 3
                      },
                      control: {
                        type: "string",
                        id: 4
                      },
                      childWorkflowOnly: {
                        type: "bool",
                        id: 5
                      },
                      reason: {
                        type: "string",
                        id: 6
                      }
                    }
                  },
                  SignalExternalWorkflowExecutionCommandAttributes: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      execution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 2
                      },
                      signalName: {
                        type: "string",
                        id: 3
                      },
                      input: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 4
                      },
                      control: {
                        type: "string",
                        id: 5
                      },
                      childWorkflowOnly: {
                        type: "bool",
                        id: 6
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 7
                      }
                    }
                  },
                  UpsertWorkflowSearchAttributesCommandAttributes: {
                    fields: {
                      searchAttributes: {
                        type: "temporal.api.common.v1.SearchAttributes",
                        id: 1
                      }
                    }
                  },
                  ModifyWorkflowPropertiesCommandAttributes: {
                    fields: {
                      upsertedMemo: {
                        type: "temporal.api.common.v1.Memo",
                        id: 1
                      }
                    }
                  },
                  RecordMarkerCommandAttributes: {
                    fields: {
                      markerName: {
                        type: "string",
                        id: 1
                      },
                      details: {
                        keyType: "string",
                        type: "temporal.api.common.v1.Payloads",
                        id: 2
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 3
                      },
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 4
                      }
                    }
                  },
                  ContinueAsNewWorkflowExecutionCommandAttributes: {
                    fields: {
                      workflowType: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 1
                      },
                      taskQueue: {
                        type: "temporal.api.taskqueue.v1.TaskQueue",
                        id: 2
                      },
                      input: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 3
                      },
                      workflowRunTimeout: {
                        type: "google.protobuf.Duration",
                        id: 4,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      workflowTaskTimeout: {
                        type: "google.protobuf.Duration",
                        id: 5,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      backoffStartInterval: {
                        type: "google.protobuf.Duration",
                        id: 6,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      retryPolicy: {
                        type: "temporal.api.common.v1.RetryPolicy",
                        id: 7
                      },
                      initiator: {
                        type: "temporal.api.enums.v1.ContinueAsNewInitiator",
                        id: 8
                      },
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 9
                      },
                      lastCompletionResult: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 10
                      },
                      cronSchedule: {
                        type: "string",
                        id: 11
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 12
                      },
                      memo: {
                        type: "temporal.api.common.v1.Memo",
                        id: 13
                      },
                      searchAttributes: {
                        type: "temporal.api.common.v1.SearchAttributes",
                        id: 14
                      },
                      useCompatibleVersion: {
                        type: "bool",
                        id: 15
                      }
                    }
                  },
                  StartChildWorkflowExecutionCommandAttributes: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      workflowId: {
                        type: "string",
                        id: 2
                      },
                      workflowType: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 3
                      },
                      taskQueue: {
                        type: "temporal.api.taskqueue.v1.TaskQueue",
                        id: 4
                      },
                      input: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 5
                      },
                      workflowExecutionTimeout: {
                        type: "google.protobuf.Duration",
                        id: 6,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      workflowRunTimeout: {
                        type: "google.protobuf.Duration",
                        id: 7,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      workflowTaskTimeout: {
                        type: "google.protobuf.Duration",
                        id: 8,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      parentClosePolicy: {
                        type: "temporal.api.enums.v1.ParentClosePolicy",
                        id: 9
                      },
                      control: {
                        type: "string",
                        id: 10
                      },
                      workflowIdReusePolicy: {
                        type: "temporal.api.enums.v1.WorkflowIdReusePolicy",
                        id: 11
                      },
                      retryPolicy: {
                        type: "temporal.api.common.v1.RetryPolicy",
                        id: 12
                      },
                      cronSchedule: {
                        type: "string",
                        id: 13
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 14
                      },
                      memo: {
                        type: "temporal.api.common.v1.Memo",
                        id: 15
                      },
                      searchAttributes: {
                        type: "temporal.api.common.v1.SearchAttributes",
                        id: 16
                      },
                      useCompatibleVersion: {
                        type: "bool",
                        id: 17
                      }
                    }
                  },
                  ProtocolMessageCommandAttributes: {
                    fields: {
                      messageId: {
                        type: "string",
                        id: 1
                      }
                    }
                  },
                  Command: {
                    oneofs: {
                      attributes: {
                        oneof: [
                          "scheduleActivityTaskCommandAttributes",
                          "startTimerCommandAttributes",
                          "completeWorkflowExecutionCommandAttributes",
                          "failWorkflowExecutionCommandAttributes",
                          "requestCancelActivityTaskCommandAttributes",
                          "cancelTimerCommandAttributes",
                          "cancelWorkflowExecutionCommandAttributes",
                          "requestCancelExternalWorkflowExecutionCommandAttributes",
                          "recordMarkerCommandAttributes",
                          "continueAsNewWorkflowExecutionCommandAttributes",
                          "startChildWorkflowExecutionCommandAttributes",
                          "signalExternalWorkflowExecutionCommandAttributes",
                          "upsertWorkflowSearchAttributesCommandAttributes",
                          "protocolMessageCommandAttributes",
                          "modifyWorkflowPropertiesCommandAttributes"
                        ]
                      }
                    },
                    fields: {
                      commandType: {
                        type: "temporal.api.enums.v1.CommandType",
                        id: 1
                      },
                      scheduleActivityTaskCommandAttributes: {
                        type: "ScheduleActivityTaskCommandAttributes",
                        id: 2
                      },
                      startTimerCommandAttributes: {
                        type: "StartTimerCommandAttributes",
                        id: 3
                      },
                      completeWorkflowExecutionCommandAttributes: {
                        type: "CompleteWorkflowExecutionCommandAttributes",
                        id: 4
                      },
                      failWorkflowExecutionCommandAttributes: {
                        type: "FailWorkflowExecutionCommandAttributes",
                        id: 5
                      },
                      requestCancelActivityTaskCommandAttributes: {
                        type: "RequestCancelActivityTaskCommandAttributes",
                        id: 6
                      },
                      cancelTimerCommandAttributes: {
                        type: "CancelTimerCommandAttributes",
                        id: 7
                      },
                      cancelWorkflowExecutionCommandAttributes: {
                        type: "CancelWorkflowExecutionCommandAttributes",
                        id: 8
                      },
                      requestCancelExternalWorkflowExecutionCommandAttributes: {
                        type: "RequestCancelExternalWorkflowExecutionCommandAttributes",
                        id: 9
                      },
                      recordMarkerCommandAttributes: {
                        type: "RecordMarkerCommandAttributes",
                        id: 10
                      },
                      continueAsNewWorkflowExecutionCommandAttributes: {
                        type: "ContinueAsNewWorkflowExecutionCommandAttributes",
                        id: 11
                      },
                      startChildWorkflowExecutionCommandAttributes: {
                        type: "StartChildWorkflowExecutionCommandAttributes",
                        id: 12
                      },
                      signalExternalWorkflowExecutionCommandAttributes: {
                        type: "SignalExternalWorkflowExecutionCommandAttributes",
                        id: 13
                      },
                      upsertWorkflowSearchAttributesCommandAttributes: {
                        type: "UpsertWorkflowSearchAttributesCommandAttributes",
                        id: 14
                      },
                      protocolMessageCommandAttributes: {
                        type: "ProtocolMessageCommandAttributes",
                        id: 15
                      },
                      modifyWorkflowPropertiesCommandAttributes: {
                        type: "ModifyWorkflowPropertiesCommandAttributes",
                        id: 17
                      }
                    }
                  }
                }
              }
            }
          },
          filter: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/filter/v1;filter",
                  java_package: "io.temporal.api.filter.v1",
                  java_multiple_files: true,
                  java_outer_classname: "MessageProto",
                  ruby_package: "Temporalio::Api::Filter::V1",
                  csharp_namespace: "Temporalio.Api.Filter.V1"
                },
                nested: {
                  WorkflowExecutionFilter: {
                    fields: {
                      workflowId: {
                        type: "string",
                        id: 1
                      },
                      runId: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  WorkflowTypeFilter: {
                    fields: {
                      name: {
                        type: "string",
                        id: 1
                      }
                    }
                  },
                  StartTimeFilter: {
                    fields: {
                      earliestTime: {
                        type: "google.protobuf.Timestamp",
                        id: 1,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      },
                      latestTime: {
                        type: "google.protobuf.Timestamp",
                        id: 2,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      }
                    }
                  },
                  StatusFilter: {
                    fields: {
                      status: {
                        type: "temporal.api.enums.v1.WorkflowExecutionStatus",
                        id: 1
                      }
                    }
                  }
                }
              }
            }
          },
          protocol: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/protocol/v1;protocol",
                  java_package: "io.temporal.api.protocol.v1",
                  java_multiple_files: true,
                  java_outer_classname: "MessageProto",
                  ruby_package: "Temporalio::Api::Protocol::V1",
                  csharp_namespace: "Temporalio.Api.Protocol.V1"
                },
                nested: {
                  Message: {
                    oneofs: {
                      sequencingId: {
                        oneof: [
                          "eventId",
                          "commandIndex"
                        ]
                      }
                    },
                    fields: {
                      id: {
                        type: "string",
                        id: 1
                      },
                      protocolInstanceId: {
                        type: "string",
                        id: 2
                      },
                      eventId: {
                        type: "int64",
                        id: 3
                      },
                      commandIndex: {
                        type: "int64",
                        id: 4
                      },
                      body: {
                        type: "google.protobuf.Any",
                        id: 5
                      }
                    }
                  }
                }
              }
            }
          },
          namespace: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/namespace/v1;namespace",
                  java_package: "io.temporal.api.namespace.v1",
                  java_multiple_files: true,
                  java_outer_classname: "MessageProto",
                  ruby_package: "Temporalio::Api::Namespace::V1",
                  csharp_namespace: "Temporalio.Api.Namespace.V1"
                },
                nested: {
                  NamespaceInfo: {
                    fields: {
                      name: {
                        type: "string",
                        id: 1
                      },
                      state: {
                        type: "temporal.api.enums.v1.NamespaceState",
                        id: 2
                      },
                      description: {
                        type: "string",
                        id: 3
                      },
                      ownerEmail: {
                        type: "string",
                        id: 4
                      },
                      data: {
                        keyType: "string",
                        type: "string",
                        id: 5
                      },
                      id: {
                        type: "string",
                        id: 6
                      },
                      supportsSchedules: {
                        type: "bool",
                        id: 100
                      }
                    }
                  },
                  NamespaceConfig: {
                    fields: {
                      workflowExecutionRetentionTtl: {
                        type: "google.protobuf.Duration",
                        id: 1,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      badBinaries: {
                        type: "BadBinaries",
                        id: 2
                      },
                      historyArchivalState: {
                        type: "temporal.api.enums.v1.ArchivalState",
                        id: 3
                      },
                      historyArchivalUri: {
                        type: "string",
                        id: 4
                      },
                      visibilityArchivalState: {
                        type: "temporal.api.enums.v1.ArchivalState",
                        id: 5
                      },
                      visibilityArchivalUri: {
                        type: "string",
                        id: 6
                      },
                      customSearchAttributeAliases: {
                        keyType: "string",
                        type: "string",
                        id: 7
                      }
                    }
                  },
                  BadBinaries: {
                    fields: {
                      binaries: {
                        keyType: "string",
                        type: "BadBinaryInfo",
                        id: 1
                      }
                    }
                  },
                  BadBinaryInfo: {
                    fields: {
                      reason: {
                        type: "string",
                        id: 1
                      },
                      operator: {
                        type: "string",
                        id: 2
                      },
                      createTime: {
                        type: "google.protobuf.Timestamp",
                        id: 3,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      }
                    }
                  },
                  UpdateNamespaceInfo: {
                    fields: {
                      description: {
                        type: "string",
                        id: 1
                      },
                      ownerEmail: {
                        type: "string",
                        id: 2
                      },
                      data: {
                        keyType: "string",
                        type: "string",
                        id: 3
                      },
                      state: {
                        type: "temporal.api.enums.v1.NamespaceState",
                        id: 4
                      }
                    }
                  },
                  NamespaceFilter: {
                    fields: {
                      includeDeleted: {
                        type: "bool",
                        id: 1
                      }
                    }
                  }
                }
              }
            }
          },
          query: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/query/v1;query",
                  java_package: "io.temporal.api.query.v1",
                  java_multiple_files: true,
                  java_outer_classname: "MessageProto",
                  ruby_package: "Temporalio::Api::Query::V1",
                  csharp_namespace: "Temporalio.Api.Query.V1"
                },
                nested: {
                  WorkflowQuery: {
                    fields: {
                      queryType: {
                        type: "string",
                        id: 1
                      },
                      queryArgs: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 2
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 3
                      }
                    }
                  },
                  WorkflowQueryResult: {
                    fields: {
                      resultType: {
                        type: "temporal.api.enums.v1.QueryResultType",
                        id: 1
                      },
                      answer: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 2
                      },
                      errorMessage: {
                        type: "string",
                        id: 3
                      }
                    }
                  },
                  QueryRejected: {
                    fields: {
                      status: {
                        type: "temporal.api.enums.v1.WorkflowExecutionStatus",
                        id: 1
                      }
                    }
                  }
                }
              }
            }
          },
          replication: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/replication/v1;replication",
                  java_package: "io.temporal.api.replication.v1",
                  java_multiple_files: true,
                  java_outer_classname: "MessageProto",
                  ruby_package: "Temporalio::Api::Replication::V1",
                  csharp_namespace: "Temporalio.Api.Replication.V1"
                },
                nested: {
                  ClusterReplicationConfig: {
                    fields: {
                      clusterName: {
                        type: "string",
                        id: 1
                      }
                    }
                  },
                  NamespaceReplicationConfig: {
                    fields: {
                      activeClusterName: {
                        type: "string",
                        id: 1
                      },
                      clusters: {
                        rule: "repeated",
                        type: "ClusterReplicationConfig",
                        id: 2
                      },
                      state: {
                        type: "temporal.api.enums.v1.ReplicationState",
                        id: 3
                      }
                    }
                  },
                  FailoverStatus: {
                    fields: {
                      failoverTime: {
                        type: "google.protobuf.Timestamp",
                        id: 1,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      },
                      failoverVersion: {
                        type: "int64",
                        id: 2
                      }
                    }
                  }
                }
              }
            }
          },
          schedule: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/schedule/v1;schedule",
                  java_package: "io.temporal.api.schedule.v1",
                  java_multiple_files: true,
                  java_outer_classname: "MessageProto",
                  ruby_package: "Temporalio::Api::Schedule::V1",
                  csharp_namespace: "Temporalio.Api.Schedule.V1"
                },
                nested: {
                  CalendarSpec: {
                    fields: {
                      second: {
                        type: "string",
                        id: 1
                      },
                      minute: {
                        type: "string",
                        id: 2
                      },
                      hour: {
                        type: "string",
                        id: 3
                      },
                      dayOfMonth: {
                        type: "string",
                        id: 4
                      },
                      month: {
                        type: "string",
                        id: 5
                      },
                      year: {
                        type: "string",
                        id: 6
                      },
                      dayOfWeek: {
                        type: "string",
                        id: 7
                      },
                      comment: {
                        type: "string",
                        id: 8
                      }
                    }
                  },
                  Range: {
                    fields: {
                      start: {
                        type: "int32",
                        id: 1
                      },
                      end: {
                        type: "int32",
                        id: 2
                      },
                      step: {
                        type: "int32",
                        id: 3
                      }
                    }
                  },
                  StructuredCalendarSpec: {
                    fields: {
                      second: {
                        rule: "repeated",
                        type: "Range",
                        id: 1
                      },
                      minute: {
                        rule: "repeated",
                        type: "Range",
                        id: 2
                      },
                      hour: {
                        rule: "repeated",
                        type: "Range",
                        id: 3
                      },
                      dayOfMonth: {
                        rule: "repeated",
                        type: "Range",
                        id: 4
                      },
                      month: {
                        rule: "repeated",
                        type: "Range",
                        id: 5
                      },
                      year: {
                        rule: "repeated",
                        type: "Range",
                        id: 6
                      },
                      dayOfWeek: {
                        rule: "repeated",
                        type: "Range",
                        id: 7
                      },
                      comment: {
                        type: "string",
                        id: 8
                      }
                    }
                  },
                  IntervalSpec: {
                    fields: {
                      interval: {
                        type: "google.protobuf.Duration",
                        id: 1,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      phase: {
                        type: "google.protobuf.Duration",
                        id: 2,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      }
                    }
                  },
                  ScheduleSpec: {
                    fields: {
                      structuredCalendar: {
                        rule: "repeated",
                        type: "StructuredCalendarSpec",
                        id: 7
                      },
                      cronString: {
                        rule: "repeated",
                        type: "string",
                        id: 8
                      },
                      calendar: {
                        rule: "repeated",
                        type: "CalendarSpec",
                        id: 1
                      },
                      interval: {
                        rule: "repeated",
                        type: "IntervalSpec",
                        id: 2
                      },
                      excludeCalendar: {
                        rule: "repeated",
                        type: "CalendarSpec",
                        id: 3,
                        options: {
                          deprecated: true
                        }
                      },
                      excludeStructuredCalendar: {
                        rule: "repeated",
                        type: "StructuredCalendarSpec",
                        id: 9
                      },
                      startTime: {
                        type: "google.protobuf.Timestamp",
                        id: 4,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      },
                      endTime: {
                        type: "google.protobuf.Timestamp",
                        id: 5,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      },
                      jitter: {
                        type: "google.protobuf.Duration",
                        id: 6,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      timezoneName: {
                        type: "string",
                        id: 10
                      },
                      timezoneData: {
                        type: "bytes",
                        id: 11
                      }
                    }
                  },
                  SchedulePolicies: {
                    fields: {
                      overlapPolicy: {
                        type: "temporal.api.enums.v1.ScheduleOverlapPolicy",
                        id: 1
                      },
                      catchupWindow: {
                        type: "google.protobuf.Duration",
                        id: 2,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      },
                      pauseOnFailure: {
                        type: "bool",
                        id: 3
                      }
                    }
                  },
                  ScheduleAction: {
                    oneofs: {
                      action: {
                        oneof: [
                          "startWorkflow"
                        ]
                      }
                    },
                    fields: {
                      startWorkflow: {
                        type: "temporal.api.workflow.v1.NewWorkflowExecutionInfo",
                        id: 1
                      }
                    }
                  },
                  ScheduleActionResult: {
                    fields: {
                      scheduleTime: {
                        type: "google.protobuf.Timestamp",
                        id: 1,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      },
                      actualTime: {
                        type: "google.protobuf.Timestamp",
                        id: 2,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      },
                      startWorkflowResult: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 11
                      }
                    }
                  },
                  ScheduleState: {
                    fields: {
                      notes: {
                        type: "string",
                        id: 1
                      },
                      paused: {
                        type: "bool",
                        id: 2
                      },
                      limitedActions: {
                        type: "bool",
                        id: 3
                      },
                      remainingActions: {
                        type: "int64",
                        id: 4
                      }
                    }
                  },
                  TriggerImmediatelyRequest: {
                    fields: {
                      overlapPolicy: {
                        type: "temporal.api.enums.v1.ScheduleOverlapPolicy",
                        id: 1
                      }
                    }
                  },
                  BackfillRequest: {
                    fields: {
                      startTime: {
                        type: "google.protobuf.Timestamp",
                        id: 1,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      },
                      endTime: {
                        type: "google.protobuf.Timestamp",
                        id: 2,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      },
                      overlapPolicy: {
                        type: "temporal.api.enums.v1.ScheduleOverlapPolicy",
                        id: 3
                      }
                    }
                  },
                  SchedulePatch: {
                    fields: {
                      triggerImmediately: {
                        type: "TriggerImmediatelyRequest",
                        id: 1
                      },
                      backfillRequest: {
                        rule: "repeated",
                        type: "BackfillRequest",
                        id: 2
                      },
                      pause: {
                        type: "string",
                        id: 3
                      },
                      unpause: {
                        type: "string",
                        id: 4
                      }
                    }
                  },
                  ScheduleInfo: {
                    fields: {
                      actionCount: {
                        type: "int64",
                        id: 1
                      },
                      missedCatchupWindow: {
                        type: "int64",
                        id: 2
                      },
                      overlapSkipped: {
                        type: "int64",
                        id: 3
                      },
                      runningWorkflows: {
                        rule: "repeated",
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 9
                      },
                      recentActions: {
                        rule: "repeated",
                        type: "ScheduleActionResult",
                        id: 4
                      },
                      futureActionTimes: {
                        rule: "repeated",
                        type: "google.protobuf.Timestamp",
                        id: 5,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      },
                      createTime: {
                        type: "google.protobuf.Timestamp",
                        id: 6,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      },
                      updateTime: {
                        type: "google.protobuf.Timestamp",
                        id: 7,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      },
                      invalidScheduleError: {
                        type: "string",
                        id: 8,
                        options: {
                          deprecated: true
                        }
                      }
                    }
                  },
                  Schedule: {
                    fields: {
                      spec: {
                        type: "ScheduleSpec",
                        id: 1
                      },
                      action: {
                        type: "ScheduleAction",
                        id: 2
                      },
                      policies: {
                        type: "SchedulePolicies",
                        id: 3
                      },
                      state: {
                        type: "ScheduleState",
                        id: 4
                      }
                    }
                  },
                  ScheduleListInfo: {
                    fields: {
                      spec: {
                        type: "ScheduleSpec",
                        id: 1
                      },
                      workflowType: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 2
                      },
                      notes: {
                        type: "string",
                        id: 3
                      },
                      paused: {
                        type: "bool",
                        id: 4
                      },
                      recentActions: {
                        rule: "repeated",
                        type: "ScheduleActionResult",
                        id: 5
                      },
                      futureActionTimes: {
                        rule: "repeated",
                        type: "google.protobuf.Timestamp",
                        id: 6,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      }
                    }
                  },
                  ScheduleListEntry: {
                    fields: {
                      scheduleId: {
                        type: "string",
                        id: 1
                      },
                      memo: {
                        type: "temporal.api.common.v1.Memo",
                        id: 2
                      },
                      searchAttributes: {
                        type: "temporal.api.common.v1.SearchAttributes",
                        id: 3
                      },
                      info: {
                        type: "ScheduleListInfo",
                        id: 4
                      }
                    }
                  }
                }
              }
            }
          },
          version: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/version/v1;version",
                  java_package: "io.temporal.api.version.v1",
                  java_multiple_files: true,
                  java_outer_classname: "MessageProto",
                  ruby_package: "Temporalio::Api::Version::V1",
                  csharp_namespace: "Temporalio.Api.Version.V1"
                },
                nested: {
                  ReleaseInfo: {
                    fields: {
                      version: {
                        type: "string",
                        id: 1
                      },
                      releaseTime: {
                        type: "google.protobuf.Timestamp",
                        id: 2,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      },
                      notes: {
                        type: "string",
                        id: 3
                      }
                    }
                  },
                  Alert: {
                    fields: {
                      message: {
                        type: "string",
                        id: 1
                      },
                      severity: {
                        type: "temporal.api.enums.v1.Severity",
                        id: 2
                      }
                    }
                  },
                  VersionInfo: {
                    fields: {
                      current: {
                        type: "ReleaseInfo",
                        id: 1
                      },
                      recommended: {
                        type: "ReleaseInfo",
                        id: 2
                      },
                      instructions: {
                        type: "string",
                        id: 3
                      },
                      alerts: {
                        rule: "repeated",
                        type: "Alert",
                        id: 4
                      },
                      lastUpdateTime: {
                        type: "google.protobuf.Timestamp",
                        id: 5,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          batch: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/batch/v1;batch",
                  java_package: "io.temporal.api.batch.v1",
                  java_multiple_files: true,
                  java_outer_classname: "MessageProto",
                  ruby_package: "Temporalio::Api::Batch::V1",
                  csharp_namespace: "Temporalio.Api.Batch.V1"
                },
                nested: {
                  BatchOperationInfo: {
                    fields: {
                      jobId: {
                        type: "string",
                        id: 1
                      },
                      state: {
                        type: "temporal.api.enums.v1.BatchOperationState",
                        id: 2
                      },
                      startTime: {
                        type: "google.protobuf.Timestamp",
                        id: 3,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      },
                      closeTime: {
                        type: "google.protobuf.Timestamp",
                        id: 4,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      }
                    }
                  },
                  BatchOperationTermination: {
                    fields: {
                      details: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 1
                      },
                      identity: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  BatchOperationSignal: {
                    fields: {
                      signal: {
                        type: "string",
                        id: 1
                      },
                      input: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 2
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 3
                      },
                      identity: {
                        type: "string",
                        id: 4
                      }
                    }
                  },
                  BatchOperationCancellation: {
                    fields: {
                      identity: {
                        type: "string",
                        id: 1
                      }
                    }
                  },
                  BatchOperationDeletion: {
                    fields: {
                      identity: {
                        type: "string",
                        id: 1
                      }
                    }
                  },
                  BatchOperationReset: {
                    fields: {
                      resetType: {
                        type: "temporal.api.enums.v1.ResetType",
                        id: 1
                      },
                      resetReapplyType: {
                        type: "temporal.api.enums.v1.ResetReapplyType",
                        id: 2
                      },
                      identity: {
                        type: "string",
                        id: 3
                      }
                    }
                  }
                }
              }
            }
          },
          operatorservice: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/operatorservice/v1;operatorservice",
                  java_package: "io.temporal.api.operatorservice.v1",
                  java_multiple_files: true,
                  java_outer_classname: "RequestResponseProto",
                  ruby_package: "Temporalio::Api::OperatorService::V1",
                  csharp_namespace: "Temporalio.Api.OperatorService.V1"
                },
                nested: {
                  OperatorService: {
                    methods: {
                      AddSearchAttributes: {
                        requestType: "AddSearchAttributesRequest",
                        responseType: "AddSearchAttributesResponse"
                      },
                      RemoveSearchAttributes: {
                        requestType: "RemoveSearchAttributesRequest",
                        responseType: "RemoveSearchAttributesResponse"
                      },
                      ListSearchAttributes: {
                        requestType: "ListSearchAttributesRequest",
                        responseType: "ListSearchAttributesResponse"
                      },
                      DeleteNamespace: {
                        requestType: "DeleteNamespaceRequest",
                        responseType: "DeleteNamespaceResponse"
                      },
                      AddOrUpdateRemoteCluster: {
                        requestType: "AddOrUpdateRemoteClusterRequest",
                        responseType: "AddOrUpdateRemoteClusterResponse"
                      },
                      RemoveRemoteCluster: {
                        requestType: "RemoveRemoteClusterRequest",
                        responseType: "RemoveRemoteClusterResponse"
                      },
                      ListClusters: {
                        requestType: "ListClustersRequest",
                        responseType: "ListClustersResponse"
                      }
                    }
                  },
                  AddSearchAttributesRequest: {
                    fields: {
                      searchAttributes: {
                        keyType: "string",
                        type: "temporal.api.enums.v1.IndexedValueType",
                        id: 1
                      },
                      namespace: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  AddSearchAttributesResponse: {
                    fields: {}
                  },
                  RemoveSearchAttributesRequest: {
                    fields: {
                      searchAttributes: {
                        rule: "repeated",
                        type: "string",
                        id: 1
                      },
                      namespace: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  RemoveSearchAttributesResponse: {
                    fields: {}
                  },
                  ListSearchAttributesRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      }
                    }
                  },
                  ListSearchAttributesResponse: {
                    fields: {
                      customAttributes: {
                        keyType: "string",
                        type: "temporal.api.enums.v1.IndexedValueType",
                        id: 1
                      },
                      systemAttributes: {
                        keyType: "string",
                        type: "temporal.api.enums.v1.IndexedValueType",
                        id: 2
                      },
                      storageSchema: {
                        keyType: "string",
                        type: "string",
                        id: 3
                      }
                    }
                  },
                  DeleteNamespaceRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      }
                    }
                  },
                  DeleteNamespaceResponse: {
                    fields: {
                      deletedNamespace: {
                        type: "string",
                        id: 1
                      }
                    }
                  },
                  AddOrUpdateRemoteClusterRequest: {
                    fields: {
                      frontendAddress: {
                        type: "string",
                        id: 1
                      },
                      enableRemoteClusterConnection: {
                        type: "bool",
                        id: 2
                      }
                    }
                  },
                  AddOrUpdateRemoteClusterResponse: {
                    fields: {}
                  },
                  RemoveRemoteClusterRequest: {
                    fields: {
                      clusterName: {
                        type: "string",
                        id: 1
                      }
                    }
                  },
                  RemoveRemoteClusterResponse: {
                    fields: {}
                  },
                  ListClustersRequest: {
                    fields: {
                      pageSize: {
                        type: "int32",
                        id: 1
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 2
                      }
                    }
                  },
                  ListClustersResponse: {
                    fields: {
                      clusters: {
                        rule: "repeated",
                        type: "ClusterMetadata",
                        id: 1
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 4
                      }
                    }
                  },
                  ClusterMetadata: {
                    fields: {
                      clusterName: {
                        type: "string",
                        id: 1
                      },
                      clusterId: {
                        type: "string",
                        id: 2
                      },
                      address: {
                        type: "string",
                        id: 3
                      },
                      initialFailoverVersion: {
                        type: "int64",
                        id: 4
                      },
                      historyShardCount: {
                        type: "int32",
                        id: 5
                      },
                      isConnectionEnabled: {
                        type: "bool",
                        id: 6
                      }
                    }
                  }
                }
              }
            }
          },
          errordetails: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/errordetails/v1;errordetails",
                  java_package: "io.temporal.api.errordetails.v1",
                  java_multiple_files: true,
                  java_outer_classname: "MessageProto",
                  ruby_package: "Temporalio::Api::ErrorDetails::V1",
                  csharp_namespace: "Temporalio.Api.ErrorDetails.V1"
                },
                nested: {
                  NotFoundFailure: {
                    fields: {
                      currentCluster: {
                        type: "string",
                        id: 1
                      },
                      activeCluster: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  WorkflowExecutionAlreadyStartedFailure: {
                    fields: {
                      startRequestId: {
                        type: "string",
                        id: 1
                      },
                      runId: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  NamespaceNotActiveFailure: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      currentCluster: {
                        type: "string",
                        id: 2
                      },
                      activeCluster: {
                        type: "string",
                        id: 3
                      }
                    }
                  },
                  NamespaceInvalidStateFailure: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      state: {
                        type: "temporal.api.enums.v1.NamespaceState",
                        id: 2
                      },
                      allowedStates: {
                        rule: "repeated",
                        type: "temporal.api.enums.v1.NamespaceState",
                        id: 3
                      }
                    }
                  },
                  NamespaceNotFoundFailure: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      }
                    }
                  },
                  NamespaceAlreadyExistsFailure: {
                    fields: {}
                  },
                  ClientVersionNotSupportedFailure: {
                    fields: {
                      clientVersion: {
                        type: "string",
                        id: 1
                      },
                      clientName: {
                        type: "string",
                        id: 2
                      },
                      supportedVersions: {
                        type: "string",
                        id: 3
                      }
                    }
                  },
                  ServerVersionNotSupportedFailure: {
                    fields: {
                      serverVersion: {
                        type: "string",
                        id: 1
                      },
                      clientSupportedServerVersions: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  CancellationAlreadyRequestedFailure: {
                    fields: {}
                  },
                  QueryFailedFailure: {
                    fields: {}
                  },
                  PermissionDeniedFailure: {
                    fields: {
                      reason: {
                        type: "string",
                        id: 1
                      }
                    }
                  },
                  ResourceExhaustedFailure: {
                    fields: {
                      cause: {
                        type: "temporal.api.enums.v1.ResourceExhaustedCause",
                        id: 1
                      }
                    }
                  },
                  SystemWorkflowFailure: {
                    fields: {
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 1
                      },
                      workflowError: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  WorkflowNotReadyFailure: {
                    fields: {}
                  },
                  NewerBuildExistsFailure: {
                    fields: {
                      defaultBuildId: {
                        type: "string",
                        id: 1
                      }
                    }
                  }
                }
              }
            }
          },
          testservice: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/testservice/v1;testservice",
                  java_package: "io.temporal.api.testservice.v1",
                  java_multiple_files: true,
                  java_outer_classname: "ServiceProto",
                  ruby_package: "Temporalio::Api::TestService::V1",
                  csharp_namespace: "Temporalio.Api.TestService.V1"
                },
                nested: {
                  LockTimeSkippingRequest: {
                    fields: {}
                  },
                  LockTimeSkippingResponse: {
                    fields: {}
                  },
                  UnlockTimeSkippingRequest: {
                    fields: {}
                  },
                  UnlockTimeSkippingResponse: {
                    fields: {}
                  },
                  SleepUntilRequest: {
                    fields: {
                      timestamp: {
                        type: "google.protobuf.Timestamp",
                        id: 1,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      }
                    }
                  },
                  SleepRequest: {
                    fields: {
                      duration: {
                        type: "google.protobuf.Duration",
                        id: 1,
                        options: {
                          "(gogoproto.stdduration)": true
                        }
                      }
                    }
                  },
                  SleepResponse: {
                    fields: {}
                  },
                  GetCurrentTimeResponse: {
                    fields: {
                      time: {
                        type: "google.protobuf.Timestamp",
                        id: 1,
                        options: {
                          "(gogoproto.stdtime)": true
                        }
                      }
                    }
                  },
                  TestService: {
                    methods: {
                      LockTimeSkipping: {
                        requestType: "LockTimeSkippingRequest",
                        responseType: "LockTimeSkippingResponse"
                      },
                      UnlockTimeSkipping: {
                        requestType: "UnlockTimeSkippingRequest",
                        responseType: "UnlockTimeSkippingResponse"
                      },
                      Sleep: {
                        requestType: "SleepRequest",
                        responseType: "SleepResponse"
                      },
                      SleepUntil: {
                        requestType: "SleepUntilRequest",
                        responseType: "SleepResponse"
                      },
                      UnlockTimeSkippingWithSleep: {
                        requestType: "SleepRequest",
                        responseType: "SleepResponse"
                      },
                      GetCurrentTime: {
                        requestType: "google.protobuf.Empty",
                        responseType: "GetCurrentTimeResponse"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  gogoproto: {
    options: {
      go_package: "github.com/gogo/protobuf/gogoproto"
    },
    nested: {
      goprotoEnumPrefix: {
        type: "bool",
        id: 62001,
        extend: "google.protobuf.EnumOptions"
      },
      goprotoEnumStringer: {
        type: "bool",
        id: 62021,
        extend: "google.protobuf.EnumOptions"
      },
      enumStringer: {
        type: "bool",
        id: 62022,
        extend: "google.protobuf.EnumOptions"
      },
      enumCustomname: {
        type: "string",
        id: 62023,
        extend: "google.protobuf.EnumOptions"
      },
      enumdecl: {
        type: "bool",
        id: 62024,
        extend: "google.protobuf.EnumOptions"
      },
      enumvalueCustomname: {
        type: "string",
        id: 66001,
        extend: "google.protobuf.EnumValueOptions"
      },
      goprotoGettersAll: {
        type: "bool",
        id: 63001,
        extend: "google.protobuf.FileOptions"
      },
      goprotoEnumPrefixAll: {
        type: "bool",
        id: 63002,
        extend: "google.protobuf.FileOptions"
      },
      goprotoStringerAll: {
        type: "bool",
        id: 63003,
        extend: "google.protobuf.FileOptions"
      },
      verboseEqualAll: {
        type: "bool",
        id: 63004,
        extend: "google.protobuf.FileOptions"
      },
      faceAll: {
        type: "bool",
        id: 63005,
        extend: "google.protobuf.FileOptions"
      },
      gostringAll: {
        type: "bool",
        id: 63006,
        extend: "google.protobuf.FileOptions"
      },
      populateAll: {
        type: "bool",
        id: 63007,
        extend: "google.protobuf.FileOptions"
      },
      stringerAll: {
        type: "bool",
        id: 63008,
        extend: "google.protobuf.FileOptions"
      },
      onlyoneAll: {
        type: "bool",
        id: 63009,
        extend: "google.protobuf.FileOptions"
      },
      equalAll: {
        type: "bool",
        id: 63013,
        extend: "google.protobuf.FileOptions"
      },
      descriptionAll: {
        type: "bool",
        id: 63014,
        extend: "google.protobuf.FileOptions"
      },
      testgenAll: {
        type: "bool",
        id: 63015,
        extend: "google.protobuf.FileOptions"
      },
      benchgenAll: {
        type: "bool",
        id: 63016,
        extend: "google.protobuf.FileOptions"
      },
      marshalerAll: {
        type: "bool",
        id: 63017,
        extend: "google.protobuf.FileOptions"
      },
      unmarshalerAll: {
        type: "bool",
        id: 63018,
        extend: "google.protobuf.FileOptions"
      },
      stableMarshalerAll: {
        type: "bool",
        id: 63019,
        extend: "google.protobuf.FileOptions"
      },
      sizerAll: {
        type: "bool",
        id: 63020,
        extend: "google.protobuf.FileOptions"
      },
      goprotoEnumStringerAll: {
        type: "bool",
        id: 63021,
        extend: "google.protobuf.FileOptions"
      },
      enumStringerAll: {
        type: "bool",
        id: 63022,
        extend: "google.protobuf.FileOptions"
      },
      unsafeMarshalerAll: {
        type: "bool",
        id: 63023,
        extend: "google.protobuf.FileOptions"
      },
      unsafeUnmarshalerAll: {
        type: "bool",
        id: 63024,
        extend: "google.protobuf.FileOptions"
      },
      goprotoExtensionsMapAll: {
        type: "bool",
        id: 63025,
        extend: "google.protobuf.FileOptions"
      },
      goprotoUnrecognizedAll: {
        type: "bool",
        id: 63026,
        extend: "google.protobuf.FileOptions"
      },
      gogoprotoImport: {
        type: "bool",
        id: 63027,
        extend: "google.protobuf.FileOptions"
      },
      protosizerAll: {
        type: "bool",
        id: 63028,
        extend: "google.protobuf.FileOptions"
      },
      compareAll: {
        type: "bool",
        id: 63029,
        extend: "google.protobuf.FileOptions"
      },
      typedeclAll: {
        type: "bool",
        id: 63030,
        extend: "google.protobuf.FileOptions"
      },
      enumdeclAll: {
        type: "bool",
        id: 63031,
        extend: "google.protobuf.FileOptions"
      },
      goprotoRegistration: {
        type: "bool",
        id: 63032,
        extend: "google.protobuf.FileOptions"
      },
      messagenameAll: {
        type: "bool",
        id: 63033,
        extend: "google.protobuf.FileOptions"
      },
      goprotoSizecacheAll: {
        type: "bool",
        id: 63034,
        extend: "google.protobuf.FileOptions"
      },
      goprotoUnkeyedAll: {
        type: "bool",
        id: 63035,
        extend: "google.protobuf.FileOptions"
      },
      goprotoGetters: {
        type: "bool",
        id: 64001,
        extend: "google.protobuf.MessageOptions"
      },
      goprotoStringer: {
        type: "bool",
        id: 64003,
        extend: "google.protobuf.MessageOptions"
      },
      verboseEqual: {
        type: "bool",
        id: 64004,
        extend: "google.protobuf.MessageOptions"
      },
      face: {
        type: "bool",
        id: 64005,
        extend: "google.protobuf.MessageOptions"
      },
      gostring: {
        type: "bool",
        id: 64006,
        extend: "google.protobuf.MessageOptions"
      },
      populate: {
        type: "bool",
        id: 64007,
        extend: "google.protobuf.MessageOptions"
      },
      stringer: {
        type: "bool",
        id: 67008,
        extend: "google.protobuf.MessageOptions"
      },
      onlyone: {
        type: "bool",
        id: 64009,
        extend: "google.protobuf.MessageOptions"
      },
      equal: {
        type: "bool",
        id: 64013,
        extend: "google.protobuf.MessageOptions"
      },
      description: {
        type: "bool",
        id: 64014,
        extend: "google.protobuf.MessageOptions"
      },
      testgen: {
        type: "bool",
        id: 64015,
        extend: "google.protobuf.MessageOptions"
      },
      benchgen: {
        type: "bool",
        id: 64016,
        extend: "google.protobuf.MessageOptions"
      },
      marshaler: {
        type: "bool",
        id: 64017,
        extend: "google.protobuf.MessageOptions"
      },
      unmarshaler: {
        type: "bool",
        id: 64018,
        extend: "google.protobuf.MessageOptions"
      },
      stableMarshaler: {
        type: "bool",
        id: 64019,
        extend: "google.protobuf.MessageOptions"
      },
      sizer: {
        type: "bool",
        id: 64020,
        extend: "google.protobuf.MessageOptions"
      },
      unsafeMarshaler: {
        type: "bool",
        id: 64023,
        extend: "google.protobuf.MessageOptions"
      },
      unsafeUnmarshaler: {
        type: "bool",
        id: 64024,
        extend: "google.protobuf.MessageOptions"
      },
      goprotoExtensionsMap: {
        type: "bool",
        id: 64025,
        extend: "google.protobuf.MessageOptions"
      },
      goprotoUnrecognized: {
        type: "bool",
        id: 64026,
        extend: "google.protobuf.MessageOptions"
      },
      protosizer: {
        type: "bool",
        id: 64028,
        extend: "google.protobuf.MessageOptions"
      },
      compare: {
        type: "bool",
        id: 64029,
        extend: "google.protobuf.MessageOptions"
      },
      typedecl: {
        type: "bool",
        id: 64030,
        extend: "google.protobuf.MessageOptions"
      },
      messagename: {
        type: "bool",
        id: 64033,
        extend: "google.protobuf.MessageOptions"
      },
      goprotoSizecache: {
        type: "bool",
        id: 64034,
        extend: "google.protobuf.MessageOptions"
      },
      goprotoUnkeyed: {
        type: "bool",
        id: 64035,
        extend: "google.protobuf.MessageOptions"
      },
      nullable: {
        type: "bool",
        id: 65001,
        extend: "google.protobuf.FieldOptions"
      },
      embed: {
        type: "bool",
        id: 65002,
        extend: "google.protobuf.FieldOptions"
      },
      customtype: {
        type: "string",
        id: 65003,
        extend: "google.protobuf.FieldOptions"
      },
      customname: {
        type: "string",
        id: 65004,
        extend: "google.protobuf.FieldOptions"
      },
      jsontag: {
        type: "string",
        id: 65005,
        extend: "google.protobuf.FieldOptions"
      },
      moretags: {
        type: "string",
        id: 65006,
        extend: "google.protobuf.FieldOptions"
      },
      casttype: {
        type: "string",
        id: 65007,
        extend: "google.protobuf.FieldOptions"
      },
      castkey: {
        type: "string",
        id: 65008,
        extend: "google.protobuf.FieldOptions"
      },
      castvalue: {
        type: "string",
        id: 65009,
        extend: "google.protobuf.FieldOptions"
      },
      stdtime: {
        type: "bool",
        id: 65010,
        extend: "google.protobuf.FieldOptions"
      },
      stdduration: {
        type: "bool",
        id: 65011,
        extend: "google.protobuf.FieldOptions"
      },
      wktpointer: {
        type: "bool",
        id: 65012,
        extend: "google.protobuf.FieldOptions"
      }
    }
  },
  google: {
    nested: {
      protobuf: {
        nested: {
          FileDescriptorSet: {
            fields: {
              file: {
                rule: "repeated",
                type: "FileDescriptorProto",
                id: 1
              }
            }
          },
          FileDescriptorProto: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              "package": {
                type: "string",
                id: 2
              },
              dependency: {
                rule: "repeated",
                type: "string",
                id: 3
              },
              publicDependency: {
                rule: "repeated",
                type: "int32",
                id: 10,
                options: {
                  packed: false
                }
              },
              weakDependency: {
                rule: "repeated",
                type: "int32",
                id: 11,
                options: {
                  packed: false
                }
              },
              messageType: {
                rule: "repeated",
                type: "DescriptorProto",
                id: 4
              },
              enumType: {
                rule: "repeated",
                type: "EnumDescriptorProto",
                id: 5
              },
              service: {
                rule: "repeated",
                type: "ServiceDescriptorProto",
                id: 6
              },
              extension: {
                rule: "repeated",
                type: "FieldDescriptorProto",
                id: 7
              },
              options: {
                type: "FileOptions",
                id: 8
              },
              sourceCodeInfo: {
                type: "SourceCodeInfo",
                id: 9
              },
              syntax: {
                type: "string",
                id: 12
              }
            }
          },
          DescriptorProto: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              field: {
                rule: "repeated",
                type: "FieldDescriptorProto",
                id: 2
              },
              extension: {
                rule: "repeated",
                type: "FieldDescriptorProto",
                id: 6
              },
              nestedType: {
                rule: "repeated",
                type: "DescriptorProto",
                id: 3
              },
              enumType: {
                rule: "repeated",
                type: "EnumDescriptorProto",
                id: 4
              },
              extensionRange: {
                rule: "repeated",
                type: "ExtensionRange",
                id: 5
              },
              oneofDecl: {
                rule: "repeated",
                type: "OneofDescriptorProto",
                id: 8
              },
              options: {
                type: "MessageOptions",
                id: 7
              },
              reservedRange: {
                rule: "repeated",
                type: "ReservedRange",
                id: 9
              },
              reservedName: {
                rule: "repeated",
                type: "string",
                id: 10
              }
            },
            nested: {
              ExtensionRange: {
                fields: {
                  start: {
                    type: "int32",
                    id: 1
                  },
                  end: {
                    type: "int32",
                    id: 2
                  }
                }
              },
              ReservedRange: {
                fields: {
                  start: {
                    type: "int32",
                    id: 1
                  },
                  end: {
                    type: "int32",
                    id: 2
                  }
                }
              }
            }
          },
          FieldDescriptorProto: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              number: {
                type: "int32",
                id: 3
              },
              label: {
                type: "Label",
                id: 4
              },
              type: {
                type: "Type",
                id: 5
              },
              typeName: {
                type: "string",
                id: 6
              },
              extendee: {
                type: "string",
                id: 2
              },
              defaultValue: {
                type: "string",
                id: 7
              },
              oneofIndex: {
                type: "int32",
                id: 9
              },
              jsonName: {
                type: "string",
                id: 10
              },
              options: {
                type: "FieldOptions",
                id: 8
              }
            },
            nested: {
              Type: {
                values: {
                  TYPE_DOUBLE: 1,
                  TYPE_FLOAT: 2,
                  TYPE_INT64: 3,
                  TYPE_UINT64: 4,
                  TYPE_INT32: 5,
                  TYPE_FIXED64: 6,
                  TYPE_FIXED32: 7,
                  TYPE_BOOL: 8,
                  TYPE_STRING: 9,
                  TYPE_GROUP: 10,
                  TYPE_MESSAGE: 11,
                  TYPE_BYTES: 12,
                  TYPE_UINT32: 13,
                  TYPE_ENUM: 14,
                  TYPE_SFIXED32: 15,
                  TYPE_SFIXED64: 16,
                  TYPE_SINT32: 17,
                  TYPE_SINT64: 18
                }
              },
              Label: {
                values: {
                  LABEL_OPTIONAL: 1,
                  LABEL_REQUIRED: 2,
                  LABEL_REPEATED: 3
                }
              }
            }
          },
          OneofDescriptorProto: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              options: {
                type: "OneofOptions",
                id: 2
              }
            }
          },
          EnumDescriptorProto: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              value: {
                rule: "repeated",
                type: "EnumValueDescriptorProto",
                id: 2
              },
              options: {
                type: "EnumOptions",
                id: 3
              }
            }
          },
          EnumValueDescriptorProto: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              number: {
                type: "int32",
                id: 2
              },
              options: {
                type: "EnumValueOptions",
                id: 3
              }
            }
          },
          ServiceDescriptorProto: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              method: {
                rule: "repeated",
                type: "MethodDescriptorProto",
                id: 2
              },
              options: {
                type: "ServiceOptions",
                id: 3
              }
            }
          },
          MethodDescriptorProto: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              inputType: {
                type: "string",
                id: 2
              },
              outputType: {
                type: "string",
                id: 3
              },
              options: {
                type: "MethodOptions",
                id: 4
              },
              clientStreaming: {
                type: "bool",
                id: 5
              },
              serverStreaming: {
                type: "bool",
                id: 6
              }
            }
          },
          FileOptions: {
            fields: {
              javaPackage: {
                type: "string",
                id: 1
              },
              javaOuterClassname: {
                type: "string",
                id: 8
              },
              javaMultipleFiles: {
                type: "bool",
                id: 10
              },
              javaGenerateEqualsAndHash: {
                type: "bool",
                id: 20,
                options: {
                  deprecated: true
                }
              },
              javaStringCheckUtf8: {
                type: "bool",
                id: 27
              },
              optimizeFor: {
                type: "OptimizeMode",
                id: 9,
                options: {
                  "default": "SPEED"
                }
              },
              goPackage: {
                type: "string",
                id: 11
              },
              ccGenericServices: {
                type: "bool",
                id: 16
              },
              javaGenericServices: {
                type: "bool",
                id: 17
              },
              pyGenericServices: {
                type: "bool",
                id: 18
              },
              deprecated: {
                type: "bool",
                id: 23
              },
              ccEnableArenas: {
                type: "bool",
                id: 31
              },
              objcClassPrefix: {
                type: "string",
                id: 36
              },
              csharpNamespace: {
                type: "string",
                id: 37
              },
              uninterpretedOption: {
                rule: "repeated",
                type: "UninterpretedOption",
                id: 999
              }
            },
            extensions: [
              [
                1000,
                536870911
              ]
            ],
            reserved: [
              [
                38,
                38
              ]
            ],
            nested: {
              OptimizeMode: {
                values: {
                  SPEED: 1,
                  CODE_SIZE: 2,
                  LITE_RUNTIME: 3
                }
              }
            }
          },
          MessageOptions: {
            fields: {
              messageSetWireFormat: {
                type: "bool",
                id: 1
              },
              noStandardDescriptorAccessor: {
                type: "bool",
                id: 2
              },
              deprecated: {
                type: "bool",
                id: 3
              },
              mapEntry: {
                type: "bool",
                id: 7
              },
              uninterpretedOption: {
                rule: "repeated",
                type: "UninterpretedOption",
                id: 999
              }
            },
            extensions: [
              [
                1000,
                536870911
              ]
            ],
            reserved: [
              [
                8,
                8
              ]
            ]
          },
          FieldOptions: {
            fields: {
              ctype: {
                type: "CType",
                id: 1,
                options: {
                  "default": "STRING"
                }
              },
              packed: {
                type: "bool",
                id: 2
              },
              jstype: {
                type: "JSType",
                id: 6,
                options: {
                  "default": "JS_NORMAL"
                }
              },
              lazy: {
                type: "bool",
                id: 5
              },
              deprecated: {
                type: "bool",
                id: 3
              },
              weak: {
                type: "bool",
                id: 10
              },
              uninterpretedOption: {
                rule: "repeated",
                type: "UninterpretedOption",
                id: 999
              }
            },
            extensions: [
              [
                1000,
                536870911
              ]
            ],
            reserved: [
              [
                4,
                4
              ]
            ],
            nested: {
              CType: {
                values: {
                  STRING: 0,
                  CORD: 1,
                  STRING_PIECE: 2
                }
              },
              JSType: {
                values: {
                  JS_NORMAL: 0,
                  JS_STRING: 1,
                  JS_NUMBER: 2
                }
              }
            }
          },
          OneofOptions: {
            fields: {
              uninterpretedOption: {
                rule: "repeated",
                type: "UninterpretedOption",
                id: 999
              }
            },
            extensions: [
              [
                1000,
                536870911
              ]
            ]
          },
          EnumOptions: {
            fields: {
              allowAlias: {
                type: "bool",
                id: 2
              },
              deprecated: {
                type: "bool",
                id: 3
              },
              uninterpretedOption: {
                rule: "repeated",
                type: "UninterpretedOption",
                id: 999
              }
            },
            extensions: [
              [
                1000,
                536870911
              ]
            ]
          },
          EnumValueOptions: {
            fields: {
              deprecated: {
                type: "bool",
                id: 1
              },
              uninterpretedOption: {
                rule: "repeated",
                type: "UninterpretedOption",
                id: 999
              }
            },
            extensions: [
              [
                1000,
                536870911
              ]
            ]
          },
          ServiceOptions: {
            fields: {
              deprecated: {
                type: "bool",
                id: 33
              },
              uninterpretedOption: {
                rule: "repeated",
                type: "UninterpretedOption",
                id: 999
              }
            },
            extensions: [
              [
                1000,
                536870911
              ]
            ]
          },
          MethodOptions: {
            fields: {
              deprecated: {
                type: "bool",
                id: 33
              },
              uninterpretedOption: {
                rule: "repeated",
                type: "UninterpretedOption",
                id: 999
              }
            },
            extensions: [
              [
                1000,
                536870911
              ]
            ]
          },
          UninterpretedOption: {
            fields: {
              name: {
                rule: "repeated",
                type: "NamePart",
                id: 2
              },
              identifierValue: {
                type: "string",
                id: 3
              },
              positiveIntValue: {
                type: "uint64",
                id: 4
              },
              negativeIntValue: {
                type: "int64",
                id: 5
              },
              doubleValue: {
                type: "double",
                id: 6
              },
              stringValue: {
                type: "bytes",
                id: 7
              },
              aggregateValue: {
                type: "string",
                id: 8
              }
            },
            nested: {
              NamePart: {
                fields: {
                  namePart: {
                    rule: "required",
                    type: "string",
                    id: 1
                  },
                  isExtension: {
                    rule: "required",
                    type: "bool",
                    id: 2
                  }
                }
              }
            }
          },
          SourceCodeInfo: {
            fields: {
              location: {
                rule: "repeated",
                type: "Location",
                id: 1
              }
            },
            nested: {
              Location: {
                fields: {
                  path: {
                    rule: "repeated",
                    type: "int32",
                    id: 1
                  },
                  span: {
                    rule: "repeated",
                    type: "int32",
                    id: 2
                  },
                  leadingComments: {
                    type: "string",
                    id: 3
                  },
                  trailingComments: {
                    type: "string",
                    id: 4
                  },
                  leadingDetachedComments: {
                    rule: "repeated",
                    type: "string",
                    id: 6
                  }
                }
              }
            }
          },
          GeneratedCodeInfo: {
            fields: {
              annotation: {
                rule: "repeated",
                type: "Annotation",
                id: 1
              }
            },
            nested: {
              Annotation: {
                fields: {
                  path: {
                    rule: "repeated",
                    type: "int32",
                    id: 1
                  },
                  sourceFile: {
                    type: "string",
                    id: 2
                  },
                  begin: {
                    type: "int32",
                    id: 3
                  },
                  end: {
                    type: "int32",
                    id: 4
                  }
                }
              }
            }
          },
          Duration: {
            fields: {
              seconds: {
                type: "int64",
                id: 1
              },
              nanos: {
                type: "int32",
                id: 2
              }
            }
          },
          Empty: {
            fields: {}
          },
          Timestamp: {
            fields: {
              seconds: {
                type: "int64",
                id: 1
              },
              nanos: {
                type: "int32",
                id: 2
              }
            }
          },
          DoubleValue: {
            fields: {
              value: {
                type: "double",
                id: 1
              }
            }
          },
          FloatValue: {
            fields: {
              value: {
                type: "float",
                id: 1
              }
            }
          },
          Int64Value: {
            fields: {
              value: {
                type: "int64",
                id: 1
              }
            }
          },
          UInt64Value: {
            fields: {
              value: {
                type: "uint64",
                id: 1
              }
            }
          },
          Int32Value: {
            fields: {
              value: {
                type: "int32",
                id: 1
              }
            }
          },
          UInt32Value: {
            fields: {
              value: {
                type: "uint32",
                id: 1
              }
            }
          },
          BoolValue: {
            fields: {
              value: {
                type: "bool",
                id: 1
              }
            }
          },
          StringValue: {
            fields: {
              value: {
                type: "string",
                id: 1
              }
            }
          },
          BytesValue: {
            fields: {
              value: {
                type: "bytes",
                id: 1
              }
            }
          },
          Any: {
            fields: {
              type_url: {
                type: "string",
                id: 1
              },
              value: {
                type: "bytes",
                id: 2
              }
            }
          }
        }
      },
      rpc: {
        options: {
          cc_enable_arenas: true,
          go_package: "google.golang.org/genproto/googleapis/rpc/status;status",
          java_multiple_files: true,
          java_outer_classname: "StatusProto",
          java_package: "com.google.rpc",
          objc_class_prefix: "RPC"
        },
        nested: {
          Status: {
            fields: {
              code: {
                type: "int32",
                id: 1
              },
              message: {
                type: "string",
                id: 2
              },
              details: {
                rule: "repeated",
                type: "google.protobuf.Any",
                id: 3
              }
            }
          }
        }
      }
    }
  },
  grpc: {
    nested: {
      health: {
        nested: {
          v1: {
            options: {
              csharp_namespace: "Grpc.Health.V1",
              go_package: "google.golang.org/grpc/health/grpc_health_v1",
              java_multiple_files: true,
              java_outer_classname: "HealthProto",
              java_package: "io.grpc.health.v1"
            },
            nested: {
              HealthCheckRequest: {
                fields: {
                  service: {
                    type: "string",
                    id: 1
                  }
                }
              },
              HealthCheckResponse: {
                fields: {
                  status: {
                    type: "ServingStatus",
                    id: 1
                  }
                },
                nested: {
                  ServingStatus: {
                    values: {
                      UNKNOWN: 0,
                      SERVING: 1,
                      NOT_SERVING: 2,
                      SERVICE_UNKNOWN: 3
                    }
                  }
                }
              },
              Health: {
                methods: {
                  Check: {
                    requestType: "HealthCheckRequest",
                    responseType: "HealthCheckResponse"
                  },
                  Watch: {
                    requestType: "HealthCheckRequest",
                    responseType: "HealthCheckResponse",
                    responseStream: true
                  }
                }
              }
            }
          }
        }
      }
    }
  }
});

module.exports = $root;
