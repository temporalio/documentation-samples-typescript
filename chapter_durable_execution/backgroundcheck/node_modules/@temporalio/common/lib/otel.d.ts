import * as otel from '@opentelemetry/api';
import { Headers } from './interceptors';
/** Default trace header for opentelemetry interceptors */
export declare const TRACE_HEADER = "_tracer-data";
/** As in workflow run id */
export declare const RUN_ID_ATTR_KEY = "run_id";
/** For a workflow or activity task */
export declare const TASK_TOKEN_ATTR_KEY = "task_token";
/** Number of jobs in a workflow activation */
export declare const NUM_JOBS_ATTR_KEY = "num_jobs";
/**
 * If found, return an otel Context deserialized from the provided headers
 */
export declare function extractContextFromHeaders(headers: Headers): Promise<otel.Context | undefined>;
/**
 * If found, return an otel SpanContext deserialized from the provided headers
 */
export declare function extractSpanContextFromHeaders(headers: Headers): Promise<otel.SpanContext | undefined>;
/**
 * Given headers, return new headers with the current otel context inserted
 */
export declare function headersWithContext(headers: Headers): Promise<Headers>;
/**
 * Link a span to an maybe-existing span context
 */
export declare function linkSpans(fromSpan: otel.Span, toContext?: otel.SpanContext): void;
