"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Connection = exports.TestService = void 0;
const grpc = __importStar(require("@grpc/grpc-js"));
const client_1 = require("@temporalio/client");
const proto_1 = require("@temporalio/proto");
exports.TestService = proto_1.temporal.api.testservice.v1.TestService;
/**
 * A Connection class that can be used to interact with both the test server's TestService and WorkflowService
 */
class Connection extends client_1.Connection {
    static createCtorOptions(options) {
        const ctorOptions = client_1.Connection.createCtorOptions(options);
        const rpcImpl = this.generateRPCImplementation({
            serviceName: 'temporal.api.testservice.v1.TestService',
            client: ctorOptions.client,
            callContextStorage: ctorOptions.callContextStorage,
            interceptors: ctorOptions.options.interceptors,
            staticMetadata: ctorOptions.options.metadata,
        });
        const testService = exports.TestService.create(rpcImpl, false, false);
        return { ...ctorOptions, testService };
    }
    static lazy(options) {
        const ctorOptions = this.createCtorOptions(options);
        return new this(ctorOptions);
    }
    static async connect(options) {
        const ret = this.lazy(options);
        await ret.ensureConnected();
        return ret;
    }
    constructor(options) {
        super(options);
        this.testService = options.testService;
    }
}
exports.Connection = Connection;
Connection.TestServiceClient = grpc.makeGenericClientConstructor({}, 'TestService', {});
//# sourceMappingURL=connection.js.map