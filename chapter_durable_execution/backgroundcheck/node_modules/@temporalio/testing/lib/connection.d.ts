import * as grpc from '@grpc/grpc-js';
import { Connection as BaseConnection, ConnectionOptions } from '@temporalio/client';
import { ConnectionCtorOptions as BaseConnectionCtorOptions } from '@temporalio/client/lib/connection';
import { temporal } from '@temporalio/proto';
export type TestService = temporal.api.testservice.v1.TestService;
export declare const TestService: typeof temporal.api.testservice.v1.TestService;
interface ConnectionCtorOptions extends BaseConnectionCtorOptions {
    testService: TestService;
}
/**
 * A Connection class that can be used to interact with both the test server's TestService and WorkflowService
 */
export declare class Connection extends BaseConnection {
    static readonly TestServiceClient: grpc.ServiceClientConstructor;
    readonly testService: TestService;
    protected static createCtorOptions(options?: ConnectionOptions): ConnectionCtorOptions;
    static lazy(options?: ConnectionOptions): Connection;
    static connect(options?: ConnectionOptions): Promise<Connection>;
    protected constructor(options: ConnectionCtorOptions);
}
export {};
