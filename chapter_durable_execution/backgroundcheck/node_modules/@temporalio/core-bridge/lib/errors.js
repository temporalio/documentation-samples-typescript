"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertFromNamedError = exports.IllegalStateError = exports.UnexpectedError = exports.TransportError = exports.ShutdownError = void 0;
const common_1 = require("@temporalio/common");
Object.defineProperty(exports, "IllegalStateError", { enumerable: true, get: function () { return common_1.IllegalStateError; } });
const type_helpers_1 = require("@temporalio/common/lib/type-helpers");
/**
 * The worker has been shut down
 */
let ShutdownError = class ShutdownError extends Error {
};
ShutdownError = __decorate([
    (0, type_helpers_1.SymbolBasedInstanceOfError)('ShutdownError')
], ShutdownError);
exports.ShutdownError = ShutdownError;
/**
 * Thrown after shutdown was requested as a response to a poll function, JS should stop polling
 * once this error is encountered
 */
let TransportError = class TransportError extends Error {
};
TransportError = __decorate([
    (0, type_helpers_1.SymbolBasedInstanceOfError)('TransportError')
], TransportError);
exports.TransportError = TransportError;
/**
 * Something unexpected happened, considered fatal
 */
let UnexpectedError = class UnexpectedError extends Error {
};
UnexpectedError = __decorate([
    (0, type_helpers_1.SymbolBasedInstanceOfError)('UnexpectedError')
], UnexpectedError);
exports.UnexpectedError = UnexpectedError;
// Check if the error's class is exactly Error (not a descendant of it), in a realm-safe way
function isBareError(e) {
    return (0, type_helpers_1.isError)(e) && Object.getPrototypeOf(e)?.name === 'Error';
}
function convertFromNamedError(e, keepStackTrace) {
    if (isBareError(e)) {
        let newerr;
        switch (e.name) {
            case 'TransportError':
                newerr = new TransportError(e.message);
                newerr.stack = keepStackTrace ? e.stack : undefined;
                return newerr;
            case 'IllegalStateError':
                newerr = new common_1.IllegalStateError(e.message);
                newerr.stack = keepStackTrace ? e.stack : undefined;
                return newerr;
            case 'ShutdownError':
                newerr = new ShutdownError(e.message);
                newerr.stack = keepStackTrace ? e.stack : undefined;
                return newerr;
            case 'UnexpectedError':
                newerr = new UnexpectedError(e.message);
                newerr.stack = keepStackTrace ? e.stack : undefined;
                return newerr;
        }
    }
    return e;
}
exports.convertFromNamedError = convertFromNamedError;
//# sourceMappingURL=errors.js.map